

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Jun 15 12:56:15 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1828
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	dabs	1,0x7E,2
    37  0000                     
    38                           ; Version 1.45
    39                           ; Generated 16/11/2017 GMT
    40                           ; 
    41                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC16F1828 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     	;# 
    73  0001                     	;# 
    74  0002                     	;# 
    75  0003                     	;# 
    76  0004                     	;# 
    77  0005                     	;# 
    78  0006                     	;# 
    79  0007                     	;# 
    80  0008                     	;# 
    81  0009                     	;# 
    82  000A                     	;# 
    83  000B                     	;# 
    84  000C                     	;# 
    85  000D                     	;# 
    86  000E                     	;# 
    87  0011                     	;# 
    88  0012                     	;# 
    89  0013                     	;# 
    90  0015                     	;# 
    91  0016                     	;# 
    92  0016                     	;# 
    93  0017                     	;# 
    94  0018                     	;# 
    95  0019                     	;# 
    96  001A                     	;# 
    97  001B                     	;# 
    98  001C                     	;# 
    99  001E                     	;# 
   100  001F                     	;# 
   101  008C                     	;# 
   102  008D                     	;# 
   103  008E                     	;# 
   104  0091                     	;# 
   105  0092                     	;# 
   106  0093                     	;# 
   107  0095                     	;# 
   108  0096                     	;# 
   109  0097                     	;# 
   110  0098                     	;# 
   111  0099                     	;# 
   112  009A                     	;# 
   113  009B                     	;# 
   114  009B                     	;# 
   115  009C                     	;# 
   116  009D                     	;# 
   117  009E                     	;# 
   118  010C                     	;# 
   119  010D                     	;# 
   120  010E                     	;# 
   121  0111                     	;# 
   122  0112                     	;# 
   123  0113                     	;# 
   124  0114                     	;# 
   125  0115                     	;# 
   126  0116                     	;# 
   127  0117                     	;# 
   128  0118                     	;# 
   129  0119                     	;# 
   130  011A                     	;# 
   131  011B                     	;# 
   132  011D                     	;# 
   133  011E                     	;# 
   134  018C                     	;# 
   135  018D                     	;# 
   136  018E                     	;# 
   137  0191                     	;# 
   138  0191                     	;# 
   139  0192                     	;# 
   140  0193                     	;# 
   141  0193                     	;# 
   142  0193                     	;# 
   143  0194                     	;# 
   144  0195                     	;# 
   145  0196                     	;# 
   146  0199                     	;# 
   147  019A                     	;# 
   148  019B                     	;# 
   149  019B                     	;# 
   150  019B                     	;# 
   151  019B                     	;# 
   152  019C                     	;# 
   153  019C                     	;# 
   154  019D                     	;# 
   155  019E                     	;# 
   156  019F                     	;# 
   157  020C                     	;# 
   158  020D                     	;# 
   159  020E                     	;# 
   160  0211                     	;# 
   161  0211                     	;# 
   162  0212                     	;# 
   163  0212                     	;# 
   164  0213                     	;# 
   165  0213                     	;# 
   166  0214                     	;# 
   167  0214                     	;# 
   168  0215                     	;# 
   169  0215                     	;# 
   170  0215                     	;# 
   171  0215                     	;# 
   172  0216                     	;# 
   173  0216                     	;# 
   174  0217                     	;# 
   175  0217                     	;# 
   176  0291                     	;# 
   177  0291                     	;# 
   178  0292                     	;# 
   179  0293                     	;# 
   180  0294                     	;# 
   181  0295                     	;# 
   182  0295                     	;# 
   183  0296                     	;# 
   184  0298                     	;# 
   185  0298                     	;# 
   186  0299                     	;# 
   187  029A                     	;# 
   188  029B                     	;# 
   189  029C                     	;# 
   190  029D                     	;# 
   191  029E                     	;# 
   192  029E                     	;# 
   193  0311                     	;# 
   194  0311                     	;# 
   195  0312                     	;# 
   196  0313                     	;# 
   197  0318                     	;# 
   198  0318                     	;# 
   199  0319                     	;# 
   200  031A                     	;# 
   201  038C                     	;# 
   202  038D                     	;# 
   203  038E                     	;# 
   204  0391                     	;# 
   205  0392                     	;# 
   206  0393                     	;# 
   207  0394                     	;# 
   208  0395                     	;# 
   209  0396                     	;# 
   210  039A                     	;# 
   211  039C                     	;# 
   212  039D                     	;# 
   213  039E                     	;# 
   214  039F                     	;# 
   215  0415                     	;# 
   216  0416                     	;# 
   217  0417                     	;# 
   218  041C                     	;# 
   219  041D                     	;# 
   220  041E                     	;# 
   221  0FE4                     	;# 
   222  0FE5                     	;# 
   223  0FE6                     	;# 
   224  0FE7                     	;# 
   225  0FE8                     	;# 
   226  0FE9                     	;# 
   227  0FEA                     	;# 
   228  0FEB                     	;# 
   229  0FED                     	;# 
   230  0FEE                     	;# 
   231  0FEF                     	;# 
   232  0000                     	;# 
   233  0001                     	;# 
   234  0002                     	;# 
   235  0003                     	;# 
   236  0004                     	;# 
   237  0005                     	;# 
   238  0006                     	;# 
   239  0007                     	;# 
   240  0008                     	;# 
   241  0009                     	;# 
   242  000A                     	;# 
   243  000B                     	;# 
   244  000C                     	;# 
   245  000D                     	;# 
   246  000E                     	;# 
   247  0011                     	;# 
   248  0012                     	;# 
   249  0013                     	;# 
   250  0015                     	;# 
   251  0016                     	;# 
   252  0016                     	;# 
   253  0017                     	;# 
   254  0018                     	;# 
   255  0019                     	;# 
   256  001A                     	;# 
   257  001B                     	;# 
   258  001C                     	;# 
   259  001E                     	;# 
   260  001F                     	;# 
   261  008C                     	;# 
   262  008D                     	;# 
   263  008E                     	;# 
   264  0091                     	;# 
   265  0092                     	;# 
   266  0093                     	;# 
   267  0095                     	;# 
   268  0096                     	;# 
   269  0097                     	;# 
   270  0098                     	;# 
   271  0099                     	;# 
   272  009A                     	;# 
   273  009B                     	;# 
   274  009B                     	;# 
   275  009C                     	;# 
   276  009D                     	;# 
   277  009E                     	;# 
   278  010C                     	;# 
   279  010D                     	;# 
   280  010E                     	;# 
   281  0111                     	;# 
   282  0112                     	;# 
   283  0113                     	;# 
   284  0114                     	;# 
   285  0115                     	;# 
   286  0116                     	;# 
   287  0117                     	;# 
   288  0118                     	;# 
   289  0119                     	;# 
   290  011A                     	;# 
   291  011B                     	;# 
   292  011D                     	;# 
   293  011E                     	;# 
   294  018C                     	;# 
   295  018D                     	;# 
   296  018E                     	;# 
   297  0191                     	;# 
   298  0191                     	;# 
   299  0192                     	;# 
   300  0193                     	;# 
   301  0193                     	;# 
   302  0193                     	;# 
   303  0194                     	;# 
   304  0195                     	;# 
   305  0196                     	;# 
   306  0199                     	;# 
   307  019A                     	;# 
   308  019B                     	;# 
   309  019B                     	;# 
   310  019B                     	;# 
   311  019B                     	;# 
   312  019C                     	;# 
   313  019C                     	;# 
   314  019D                     	;# 
   315  019E                     	;# 
   316  019F                     	;# 
   317  020C                     	;# 
   318  020D                     	;# 
   319  020E                     	;# 
   320  0211                     	;# 
   321  0211                     	;# 
   322  0212                     	;# 
   323  0212                     	;# 
   324  0213                     	;# 
   325  0213                     	;# 
   326  0214                     	;# 
   327  0214                     	;# 
   328  0215                     	;# 
   329  0215                     	;# 
   330  0215                     	;# 
   331  0215                     	;# 
   332  0216                     	;# 
   333  0216                     	;# 
   334  0217                     	;# 
   335  0217                     	;# 
   336  0291                     	;# 
   337  0291                     	;# 
   338  0292                     	;# 
   339  0293                     	;# 
   340  0294                     	;# 
   341  0295                     	;# 
   342  0295                     	;# 
   343  0296                     	;# 
   344  0298                     	;# 
   345  0298                     	;# 
   346  0299                     	;# 
   347  029A                     	;# 
   348  029B                     	;# 
   349  029C                     	;# 
   350  029D                     	;# 
   351  029E                     	;# 
   352  029E                     	;# 
   353  0311                     	;# 
   354  0311                     	;# 
   355  0312                     	;# 
   356  0313                     	;# 
   357  0318                     	;# 
   358  0318                     	;# 
   359  0319                     	;# 
   360  031A                     	;# 
   361  038C                     	;# 
   362  038D                     	;# 
   363  038E                     	;# 
   364  0391                     	;# 
   365  0392                     	;# 
   366  0393                     	;# 
   367  0394                     	;# 
   368  0395                     	;# 
   369  0396                     	;# 
   370  039A                     	;# 
   371  039C                     	;# 
   372  039D                     	;# 
   373  039E                     	;# 
   374  039F                     	;# 
   375  0415                     	;# 
   376  0416                     	;# 
   377  0417                     	;# 
   378  041C                     	;# 
   379  041D                     	;# 
   380  041E                     	;# 
   381  0FE4                     	;# 
   382  0FE5                     	;# 
   383  0FE6                     	;# 
   384  0FE7                     	;# 
   385  0FE8                     	;# 
   386  0FE9                     	;# 
   387  0FEA                     	;# 
   388  0FEB                     	;# 
   389  0FED                     	;# 
   390  0FEE                     	;# 
   391  0FEF                     	;# 
   392  0000                     	;# 
   393  0001                     	;# 
   394  0002                     	;# 
   395  0003                     	;# 
   396  0004                     	;# 
   397  0005                     	;# 
   398  0006                     	;# 
   399  0007                     	;# 
   400  0008                     	;# 
   401  0009                     	;# 
   402  000A                     	;# 
   403  000B                     	;# 
   404  000C                     	;# 
   405  000D                     	;# 
   406  000E                     	;# 
   407  0011                     	;# 
   408  0012                     	;# 
   409  0013                     	;# 
   410  0015                     	;# 
   411  0016                     	;# 
   412  0016                     	;# 
   413  0017                     	;# 
   414  0018                     	;# 
   415  0019                     	;# 
   416  001A                     	;# 
   417  001B                     	;# 
   418  001C                     	;# 
   419  001E                     	;# 
   420  001F                     	;# 
   421  008C                     	;# 
   422  008D                     	;# 
   423  008E                     	;# 
   424  0091                     	;# 
   425  0092                     	;# 
   426  0093                     	;# 
   427  0095                     	;# 
   428  0096                     	;# 
   429  0097                     	;# 
   430  0098                     	;# 
   431  0099                     	;# 
   432  009A                     	;# 
   433  009B                     	;# 
   434  009B                     	;# 
   435  009C                     	;# 
   436  009D                     	;# 
   437  009E                     	;# 
   438  010C                     	;# 
   439  010D                     	;# 
   440  010E                     	;# 
   441  0111                     	;# 
   442  0112                     	;# 
   443  0113                     	;# 
   444  0114                     	;# 
   445  0115                     	;# 
   446  0116                     	;# 
   447  0117                     	;# 
   448  0118                     	;# 
   449  0119                     	;# 
   450  011A                     	;# 
   451  011B                     	;# 
   452  011D                     	;# 
   453  011E                     	;# 
   454  018C                     	;# 
   455  018D                     	;# 
   456  018E                     	;# 
   457  0191                     	;# 
   458  0191                     	;# 
   459  0192                     	;# 
   460  0193                     	;# 
   461  0193                     	;# 
   462  0193                     	;# 
   463  0194                     	;# 
   464  0195                     	;# 
   465  0196                     	;# 
   466  0199                     	;# 
   467  019A                     	;# 
   468  019B                     	;# 
   469  019B                     	;# 
   470  019B                     	;# 
   471  019B                     	;# 
   472  019C                     	;# 
   473  019C                     	;# 
   474  019D                     	;# 
   475  019E                     	;# 
   476  019F                     	;# 
   477  020C                     	;# 
   478  020D                     	;# 
   479  020E                     	;# 
   480  0211                     	;# 
   481  0211                     	;# 
   482  0212                     	;# 
   483  0212                     	;# 
   484  0213                     	;# 
   485  0213                     	;# 
   486  0214                     	;# 
   487  0214                     	;# 
   488  0215                     	;# 
   489  0215                     	;# 
   490  0215                     	;# 
   491  0215                     	;# 
   492  0216                     	;# 
   493  0216                     	;# 
   494  0217                     	;# 
   495  0217                     	;# 
   496  0291                     	;# 
   497  0291                     	;# 
   498  0292                     	;# 
   499  0293                     	;# 
   500  0294                     	;# 
   501  0295                     	;# 
   502  0295                     	;# 
   503  0296                     	;# 
   504  0298                     	;# 
   505  0298                     	;# 
   506  0299                     	;# 
   507  029A                     	;# 
   508  029B                     	;# 
   509  029C                     	;# 
   510  029D                     	;# 
   511  029E                     	;# 
   512  029E                     	;# 
   513  0311                     	;# 
   514  0311                     	;# 
   515  0312                     	;# 
   516  0313                     	;# 
   517  0318                     	;# 
   518  0318                     	;# 
   519  0319                     	;# 
   520  031A                     	;# 
   521  038C                     	;# 
   522  038D                     	;# 
   523  038E                     	;# 
   524  0391                     	;# 
   525  0392                     	;# 
   526  0393                     	;# 
   527  0394                     	;# 
   528  0395                     	;# 
   529  0396                     	;# 
   530  039A                     	;# 
   531  039C                     	;# 
   532  039D                     	;# 
   533  039E                     	;# 
   534  039F                     	;# 
   535  0415                     	;# 
   536  0416                     	;# 
   537  0417                     	;# 
   538  041C                     	;# 
   539  041D                     	;# 
   540  041E                     	;# 
   541  0FE4                     	;# 
   542  0FE5                     	;# 
   543  0FE6                     	;# 
   544  0FE7                     	;# 
   545  0FE8                     	;# 
   546  0FE9                     	;# 
   547  0FEA                     	;# 
   548  0FEB                     	;# 
   549  0FED                     	;# 
   550  0FEE                     	;# 
   551  0FEF                     	;# 
   552  0000                     	;# 
   553  0001                     	;# 
   554  0002                     	;# 
   555  0003                     	;# 
   556  0004                     	;# 
   557  0005                     	;# 
   558  0006                     	;# 
   559  0007                     	;# 
   560  0008                     	;# 
   561  0009                     	;# 
   562  000A                     	;# 
   563  000B                     	;# 
   564  000C                     	;# 
   565  000D                     	;# 
   566  000E                     	;# 
   567  0011                     	;# 
   568  0012                     	;# 
   569  0013                     	;# 
   570  0015                     	;# 
   571  0016                     	;# 
   572  0016                     	;# 
   573  0017                     	;# 
   574  0018                     	;# 
   575  0019                     	;# 
   576  001A                     	;# 
   577  001B                     	;# 
   578  001C                     	;# 
   579  001E                     	;# 
   580  001F                     	;# 
   581  008C                     	;# 
   582  008D                     	;# 
   583  008E                     	;# 
   584  0091                     	;# 
   585  0092                     	;# 
   586  0093                     	;# 
   587  0095                     	;# 
   588  0096                     	;# 
   589  0097                     	;# 
   590  0098                     	;# 
   591  0099                     	;# 
   592  009A                     	;# 
   593  009B                     	;# 
   594  009B                     	;# 
   595  009C                     	;# 
   596  009D                     	;# 
   597  009E                     	;# 
   598  010C                     	;# 
   599  010D                     	;# 
   600  010E                     	;# 
   601  0111                     	;# 
   602  0112                     	;# 
   603  0113                     	;# 
   604  0114                     	;# 
   605  0115                     	;# 
   606  0116                     	;# 
   607  0117                     	;# 
   608  0118                     	;# 
   609  0119                     	;# 
   610  011A                     	;# 
   611  011B                     	;# 
   612  011D                     	;# 
   613  011E                     	;# 
   614  018C                     	;# 
   615  018D                     	;# 
   616  018E                     	;# 
   617  0191                     	;# 
   618  0191                     	;# 
   619  0192                     	;# 
   620  0193                     	;# 
   621  0193                     	;# 
   622  0193                     	;# 
   623  0194                     	;# 
   624  0195                     	;# 
   625  0196                     	;# 
   626  0199                     	;# 
   627  019A                     	;# 
   628  019B                     	;# 
   629  019B                     	;# 
   630  019B                     	;# 
   631  019B                     	;# 
   632  019C                     	;# 
   633  019C                     	;# 
   634  019D                     	;# 
   635  019E                     	;# 
   636  019F                     	;# 
   637  020C                     	;# 
   638  020D                     	;# 
   639  020E                     	;# 
   640  0211                     	;# 
   641  0211                     	;# 
   642  0212                     	;# 
   643  0212                     	;# 
   644  0213                     	;# 
   645  0213                     	;# 
   646  0214                     	;# 
   647  0214                     	;# 
   648  0215                     	;# 
   649  0215                     	;# 
   650  0215                     	;# 
   651  0215                     	;# 
   652  0216                     	;# 
   653  0216                     	;# 
   654  0217                     	;# 
   655  0217                     	;# 
   656  0291                     	;# 
   657  0291                     	;# 
   658  0292                     	;# 
   659  0293                     	;# 
   660  0294                     	;# 
   661  0295                     	;# 
   662  0295                     	;# 
   663  0296                     	;# 
   664  0298                     	;# 
   665  0298                     	;# 
   666  0299                     	;# 
   667  029A                     	;# 
   668  029B                     	;# 
   669  029C                     	;# 
   670  029D                     	;# 
   671  029E                     	;# 
   672  029E                     	;# 
   673  0311                     	;# 
   674  0311                     	;# 
   675  0312                     	;# 
   676  0313                     	;# 
   677  0318                     	;# 
   678  0318                     	;# 
   679  0319                     	;# 
   680  031A                     	;# 
   681  038C                     	;# 
   682  038D                     	;# 
   683  038E                     	;# 
   684  0391                     	;# 
   685  0392                     	;# 
   686  0393                     	;# 
   687  0394                     	;# 
   688  0395                     	;# 
   689  0396                     	;# 
   690  039A                     	;# 
   691  039C                     	;# 
   692  039D                     	;# 
   693  039E                     	;# 
   694  039F                     	;# 
   695  0415                     	;# 
   696  0416                     	;# 
   697  0417                     	;# 
   698  041C                     	;# 
   699  041D                     	;# 
   700  041E                     	;# 
   701  0FE4                     	;# 
   702  0FE5                     	;# 
   703  0FE6                     	;# 
   704  0FE7                     	;# 
   705  0FE8                     	;# 
   706  0FE9                     	;# 
   707  0FEA                     	;# 
   708  0FEB                     	;# 
   709  0FED                     	;# 
   710  0FEE                     	;# 
   711  0FEF                     	;# 
   712  0000                     	;# 
   713  0001                     	;# 
   714  0002                     	;# 
   715  0003                     	;# 
   716  0004                     	;# 
   717  0005                     	;# 
   718  0006                     	;# 
   719  0007                     	;# 
   720  0008                     	;# 
   721  0009                     	;# 
   722  000A                     	;# 
   723  000B                     	;# 
   724  000C                     	;# 
   725  000D                     	;# 
   726  000E                     	;# 
   727  0011                     	;# 
   728  0012                     	;# 
   729  0013                     	;# 
   730  0015                     	;# 
   731  0016                     	;# 
   732  0016                     	;# 
   733  0017                     	;# 
   734  0018                     	;# 
   735  0019                     	;# 
   736  001A                     	;# 
   737  001B                     	;# 
   738  001C                     	;# 
   739  001E                     	;# 
   740  001F                     	;# 
   741  008C                     	;# 
   742  008D                     	;# 
   743  008E                     	;# 
   744  0091                     	;# 
   745  0092                     	;# 
   746  0093                     	;# 
   747  0095                     	;# 
   748  0096                     	;# 
   749  0097                     	;# 
   750  0098                     	;# 
   751  0099                     	;# 
   752  009A                     	;# 
   753  009B                     	;# 
   754  009B                     	;# 
   755  009C                     	;# 
   756  009D                     	;# 
   757  009E                     	;# 
   758  010C                     	;# 
   759  010D                     	;# 
   760  010E                     	;# 
   761  0111                     	;# 
   762  0112                     	;# 
   763  0113                     	;# 
   764  0114                     	;# 
   765  0115                     	;# 
   766  0116                     	;# 
   767  0117                     	;# 
   768  0118                     	;# 
   769  0119                     	;# 
   770  011A                     	;# 
   771  011B                     	;# 
   772  011D                     	;# 
   773  011E                     	;# 
   774  018C                     	;# 
   775  018D                     	;# 
   776  018E                     	;# 
   777  0191                     	;# 
   778  0191                     	;# 
   779  0192                     	;# 
   780  0193                     	;# 
   781  0193                     	;# 
   782  0193                     	;# 
   783  0194                     	;# 
   784  0195                     	;# 
   785  0196                     	;# 
   786  0199                     	;# 
   787  019A                     	;# 
   788  019B                     	;# 
   789  019B                     	;# 
   790  019B                     	;# 
   791  019B                     	;# 
   792  019C                     	;# 
   793  019C                     	;# 
   794  019D                     	;# 
   795  019E                     	;# 
   796  019F                     	;# 
   797  020C                     	;# 
   798  020D                     	;# 
   799  020E                     	;# 
   800  0211                     	;# 
   801  0211                     	;# 
   802  0212                     	;# 
   803  0212                     	;# 
   804  0213                     	;# 
   805  0213                     	;# 
   806  0214                     	;# 
   807  0214                     	;# 
   808  0215                     	;# 
   809  0215                     	;# 
   810  0215                     	;# 
   811  0215                     	;# 
   812  0216                     	;# 
   813  0216                     	;# 
   814  0217                     	;# 
   815  0217                     	;# 
   816  0291                     	;# 
   817  0291                     	;# 
   818  0292                     	;# 
   819  0293                     	;# 
   820  0294                     	;# 
   821  0295                     	;# 
   822  0295                     	;# 
   823  0296                     	;# 
   824  0298                     	;# 
   825  0298                     	;# 
   826  0299                     	;# 
   827  029A                     	;# 
   828  029B                     	;# 
   829  029C                     	;# 
   830  029D                     	;# 
   831  029E                     	;# 
   832  029E                     	;# 
   833  0311                     	;# 
   834  0311                     	;# 
   835  0312                     	;# 
   836  0313                     	;# 
   837  0318                     	;# 
   838  0318                     	;# 
   839  0319                     	;# 
   840  031A                     	;# 
   841  038C                     	;# 
   842  038D                     	;# 
   843  038E                     	;# 
   844  0391                     	;# 
   845  0392                     	;# 
   846  0393                     	;# 
   847  0394                     	;# 
   848  0395                     	;# 
   849  0396                     	;# 
   850  039A                     	;# 
   851  039C                     	;# 
   852  039D                     	;# 
   853  039E                     	;# 
   854  039F                     	;# 
   855  0415                     	;# 
   856  0416                     	;# 
   857  0417                     	;# 
   858  041C                     	;# 
   859  041D                     	;# 
   860  041E                     	;# 
   861  0FE4                     	;# 
   862  0FE5                     	;# 
   863  0FE6                     	;# 
   864  0FE7                     	;# 
   865  0FE8                     	;# 
   866  0FE9                     	;# 
   867  0FEA                     	;# 
   868  0FEB                     	;# 
   869  0FED                     	;# 
   870  0FEE                     	;# 
   871  0FEF                     	;# 
   872  0000                     	;# 
   873  0001                     	;# 
   874  0002                     	;# 
   875  0003                     	;# 
   876  0004                     	;# 
   877  0005                     	;# 
   878  0006                     	;# 
   879  0007                     	;# 
   880  0008                     	;# 
   881  0009                     	;# 
   882  000A                     	;# 
   883  000B                     	;# 
   884  000C                     	;# 
   885  000D                     	;# 
   886  000E                     	;# 
   887  0011                     	;# 
   888  0012                     	;# 
   889  0013                     	;# 
   890  0015                     	;# 
   891  0016                     	;# 
   892  0016                     	;# 
   893  0017                     	;# 
   894  0018                     	;# 
   895  0019                     	;# 
   896  001A                     	;# 
   897  001B                     	;# 
   898  001C                     	;# 
   899  001E                     	;# 
   900  001F                     	;# 
   901  008C                     	;# 
   902  008D                     	;# 
   903  008E                     	;# 
   904  0091                     	;# 
   905  0092                     	;# 
   906  0093                     	;# 
   907  0095                     	;# 
   908  0096                     	;# 
   909  0097                     	;# 
   910  0098                     	;# 
   911  0099                     	;# 
   912  009A                     	;# 
   913  009B                     	;# 
   914  009B                     	;# 
   915  009C                     	;# 
   916  009D                     	;# 
   917  009E                     	;# 
   918  010C                     	;# 
   919  010D                     	;# 
   920  010E                     	;# 
   921  0111                     	;# 
   922  0112                     	;# 
   923  0113                     	;# 
   924  0114                     	;# 
   925  0115                     	;# 
   926  0116                     	;# 
   927  0117                     	;# 
   928  0118                     	;# 
   929  0119                     	;# 
   930  011A                     	;# 
   931  011B                     	;# 
   932  011D                     	;# 
   933  011E                     	;# 
   934  018C                     	;# 
   935  018D                     	;# 
   936  018E                     	;# 
   937  0191                     	;# 
   938  0191                     	;# 
   939  0192                     	;# 
   940  0193                     	;# 
   941  0193                     	;# 
   942  0193                     	;# 
   943  0194                     	;# 
   944  0195                     	;# 
   945  0196                     	;# 
   946  0199                     	;# 
   947  019A                     	;# 
   948  019B                     	;# 
   949  019B                     	;# 
   950  019B                     	;# 
   951  019B                     	;# 
   952  019C                     	;# 
   953  019C                     	;# 
   954  019D                     	;# 
   955  019E                     	;# 
   956  019F                     	;# 
   957  020C                     	;# 
   958  020D                     	;# 
   959  020E                     	;# 
   960  0211                     	;# 
   961  0211                     	;# 
   962  0212                     	;# 
   963  0212                     	;# 
   964  0213                     	;# 
   965  0213                     	;# 
   966  0214                     	;# 
   967  0214                     	;# 
   968  0215                     	;# 
   969  0215                     	;# 
   970  0215                     	;# 
   971  0215                     	;# 
   972  0216                     	;# 
   973  0216                     	;# 
   974  0217                     	;# 
   975  0217                     	;# 
   976  0291                     	;# 
   977  0291                     	;# 
   978  0292                     	;# 
   979  0293                     	;# 
   980  0294                     	;# 
   981  0295                     	;# 
   982  0295                     	;# 
   983  0296                     	;# 
   984  0298                     	;# 
   985  0298                     	;# 
   986  0299                     	;# 
   987  029A                     	;# 
   988  029B                     	;# 
   989  029C                     	;# 
   990  029D                     	;# 
   991  029E                     	;# 
   992  029E                     	;# 
   993  0311                     	;# 
   994  0311                     	;# 
   995  0312                     	;# 
   996  0313                     	;# 
   997  0318                     	;# 
   998  0318                     	;# 
   999  0319                     	;# 
  1000  031A                     	;# 
  1001  038C                     	;# 
  1002  038D                     	;# 
  1003  038E                     	;# 
  1004  0391                     	;# 
  1005  0392                     	;# 
  1006  0393                     	;# 
  1007  0394                     	;# 
  1008  0395                     	;# 
  1009  0396                     	;# 
  1010  039A                     	;# 
  1011  039C                     	;# 
  1012  039D                     	;# 
  1013  039E                     	;# 
  1014  039F                     	;# 
  1015  0415                     	;# 
  1016  0416                     	;# 
  1017  0417                     	;# 
  1018  041C                     	;# 
  1019  041D                     	;# 
  1020  041E                     	;# 
  1021  0FE4                     	;# 
  1022  0FE5                     	;# 
  1023  0FE6                     	;# 
  1024  0FE7                     	;# 
  1025  0FE8                     	;# 
  1026  0FE9                     	;# 
  1027  0FEA                     	;# 
  1028  0FEB                     	;# 
  1029  0FED                     	;# 
  1030  0FEE                     	;# 
  1031  0FEF                     	;# 
  1032  0000                     	;# 
  1033  0001                     	;# 
  1034  0002                     	;# 
  1035  0003                     	;# 
  1036  0004                     	;# 
  1037  0005                     	;# 
  1038  0006                     	;# 
  1039  0007                     	;# 
  1040  0008                     	;# 
  1041  0009                     	;# 
  1042  000A                     	;# 
  1043  000B                     	;# 
  1044  000C                     	;# 
  1045  000D                     	;# 
  1046  000E                     	;# 
  1047  0011                     	;# 
  1048  0012                     	;# 
  1049  0013                     	;# 
  1050  0015                     	;# 
  1051  0016                     	;# 
  1052  0016                     	;# 
  1053  0017                     	;# 
  1054  0018                     	;# 
  1055  0019                     	;# 
  1056  001A                     	;# 
  1057  001B                     	;# 
  1058  001C                     	;# 
  1059  001E                     	;# 
  1060  001F                     	;# 
  1061  008C                     	;# 
  1062  008D                     	;# 
  1063  008E                     	;# 
  1064  0091                     	;# 
  1065  0092                     	;# 
  1066  0093                     	;# 
  1067  0095                     	;# 
  1068  0096                     	;# 
  1069  0097                     	;# 
  1070  0098                     	;# 
  1071  0099                     	;# 
  1072  009A                     	;# 
  1073  009B                     	;# 
  1074  009B                     	;# 
  1075  009C                     	;# 
  1076  009D                     	;# 
  1077  009E                     	;# 
  1078  010C                     	;# 
  1079  010D                     	;# 
  1080  010E                     	;# 
  1081  0111                     	;# 
  1082  0112                     	;# 
  1083  0113                     	;# 
  1084  0114                     	;# 
  1085  0115                     	;# 
  1086  0116                     	;# 
  1087  0117                     	;# 
  1088  0118                     	;# 
  1089  0119                     	;# 
  1090  011A                     	;# 
  1091  011B                     	;# 
  1092  011D                     	;# 
  1093  011E                     	;# 
  1094  018C                     	;# 
  1095  018D                     	;# 
  1096  018E                     	;# 
  1097  0191                     	;# 
  1098  0191                     	;# 
  1099  0192                     	;# 
  1100  0193                     	;# 
  1101  0193                     	;# 
  1102  0193                     	;# 
  1103  0194                     	;# 
  1104  0195                     	;# 
  1105  0196                     	;# 
  1106  0199                     	;# 
  1107  019A                     	;# 
  1108  019B                     	;# 
  1109  019B                     	;# 
  1110  019B                     	;# 
  1111  019B                     	;# 
  1112  019C                     	;# 
  1113  019C                     	;# 
  1114  019D                     	;# 
  1115  019E                     	;# 
  1116  019F                     	;# 
  1117  020C                     	;# 
  1118  020D                     	;# 
  1119  020E                     	;# 
  1120  0211                     	;# 
  1121  0211                     	;# 
  1122  0212                     	;# 
  1123  0212                     	;# 
  1124  0213                     	;# 
  1125  0213                     	;# 
  1126  0214                     	;# 
  1127  0214                     	;# 
  1128  0215                     	;# 
  1129  0215                     	;# 
  1130  0215                     	;# 
  1131  0215                     	;# 
  1132  0216                     	;# 
  1133  0216                     	;# 
  1134  0217                     	;# 
  1135  0217                     	;# 
  1136  0291                     	;# 
  1137  0291                     	;# 
  1138  0292                     	;# 
  1139  0293                     	;# 
  1140  0294                     	;# 
  1141  0295                     	;# 
  1142  0295                     	;# 
  1143  0296                     	;# 
  1144  0298                     	;# 
  1145  0298                     	;# 
  1146  0299                     	;# 
  1147  029A                     	;# 
  1148  029B                     	;# 
  1149  029C                     	;# 
  1150  029D                     	;# 
  1151  029E                     	;# 
  1152  029E                     	;# 
  1153  0311                     	;# 
  1154  0311                     	;# 
  1155  0312                     	;# 
  1156  0313                     	;# 
  1157  0318                     	;# 
  1158  0318                     	;# 
  1159  0319                     	;# 
  1160  031A                     	;# 
  1161  038C                     	;# 
  1162  038D                     	;# 
  1163  038E                     	;# 
  1164  0391                     	;# 
  1165  0392                     	;# 
  1166  0393                     	;# 
  1167  0394                     	;# 
  1168  0395                     	;# 
  1169  0396                     	;# 
  1170  039A                     	;# 
  1171  039C                     	;# 
  1172  039D                     	;# 
  1173  039E                     	;# 
  1174  039F                     	;# 
  1175  0415                     	;# 
  1176  0416                     	;# 
  1177  0417                     	;# 
  1178  041C                     	;# 
  1179  041D                     	;# 
  1180  041E                     	;# 
  1181  0FE4                     	;# 
  1182  0FE5                     	;# 
  1183  0FE6                     	;# 
  1184  0FE7                     	;# 
  1185  0FE8                     	;# 
  1186  0FE9                     	;# 
  1187  0FEA                     	;# 
  1188  0FEB                     	;# 
  1189  0FED                     	;# 
  1190  0FEE                     	;# 
  1191  0FEF                     	;# 
  1192                           
  1193                           	psect	idataBANK0
  1194  02AB                     __pidataBANK0:	
  1195                           
  1196                           ;initializer for _IQRPreSta
  1197  02AB  3403               	retlw	3
  1198  02AC  3403               	retlw	3
  1199  02AD  3403               	retlw	3
  1200  02AE  3403               	retlw	3
  1201  02AF  3403               	retlw	3
  1202  02B0  3403               	retlw	3
  1203  02B1  3403               	retlw	3
  1204  02B2  3403               	retlw	3
  1205                           
  1206                           	psect	nvBANK0
  1207  0053                     __pnvBANK0:	
  1208  0053                     _TMR0_InterruptHandler:	
  1209  0053                     	ds	2
  1210  0055                     _EUSART_RxDefaultInterruptHandler:	
  1211  0055                     	ds	2
  1212  0057                     _timer0ReloadVal:	
  1213  0057                     	ds	1
  1214  0015                     _TMR0	set	21
  1215  0011                     _PIR1bits	set	17
  1216  000B                     _INTCONbits	set	11
  1217  000D                     _PORTBbits	set	13
  1218  0095                     _OPTION_REG	set	149
  1219  0091                     _PIE1bits	set	145
  1220  0095                     _OPTION_REGbits	set	149
  1221  008E                     _TRISC	set	142
  1222  008D                     _TRISB	set	141
  1223  008C                     _TRISA	set	140
  1224  0097                     _WDTCON	set	151
  1225  0098                     _OSCTUNE	set	152
  1226  0099                     _OSCCON	set	153
  1227  010C                     _LATAbits	set	268
  1228  011E                     _APFCON1	set	286
  1229  011D                     _APFCON0	set	285
  1230  010E                     _LATC	set	270
  1231  010D                     _LATB	set	269
  1232  010C                     _LATA	set	268
  1233  0116                     _BORCON	set	278
  1234  0199                     _RCREG	set	409
  1235  019D                     _RCSTAbits	set	413
  1236  019C                     _SPBRGH	set	412
  1237  019B                     _SPBRGL	set	411
  1238  019E                     _TXSTA	set	414
  1239  019D                     _RCSTA	set	413
  1240  019F                     _BAUDCON	set	415
  1241  018C                     _ANSELA	set	396
  1242  018D                     _ANSELB	set	397
  1243  018E                     _ANSELC	set	398
  1244  020E                     _WPUC	set	526
  1245  020C                     _WPUA	set	524
  1246  020D                     _WPUB	set	525
  1247                           
  1248                           ; #config settings
  1249  0000                     
  1250                           	psect	cinit
  1251  0029                     start_initialization:	
  1252  0029                     __initialization:	
  1253                           
  1254                           ; Initialize objects allocated to BANK0
  1255  0029  30AB               	movlw	low __pidataBANK0
  1256  002A  0084               	movwf	4
  1257  002B  3082               	movlw	(high __pidataBANK0)| (0+128)
  1258  002C  0085               	movwf	5
  1259  002D  304B               	movlw	low __pdataBANK0
  1260  002E  0086               	movwf	6
  1261  002F  3000               	movlw	high __pdataBANK0
  1262  0030  0087               	movwf	7
  1263  0031  3008               	movlw	8
  1264  0032  3182  22C8  3180   	fcall	init_ram
  1265                           
  1266                           ; Clear objects allocated to COMMON
  1267  0035  01F7               	clrf	__pbssCOMMON& (0+127)
  1268  0036  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
  1269  0037  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
  1270  0038  01FA               	clrf	(__pbssCOMMON+3)& (0+127)
  1271                           
  1272                           ; Clear objects allocated to BANK0
  1273  0039  3020               	movlw	low __pbssBANK0
  1274  003A  0084               	movwf	4
  1275  003B  3000               	movlw	high __pbssBANK0
  1276  003C  0085               	movwf	5
  1277  003D  301E               	movlw	30
  1278  003E  3182  22CE  3180   	fcall	clear_ram0
  1279                           
  1280                           ; Clear objects allocated to BANK1
  1281  0041  30A0               	movlw	low __pbssBANK1
  1282  0042  0084               	movwf	4
  1283  0043  3000               	movlw	high __pbssBANK1
  1284  0044  0085               	movwf	5
  1285  0045  3040               	movlw	64
  1286  0046  3182  22CE  3180   	fcall	clear_ram0
  1287                           
  1288                           ; Clear objects allocated to BANK2
  1289  0049  3020               	movlw	low __pbssBANK2
  1290  004A  0084               	movwf	4
  1291  004B  3001               	movlw	high __pbssBANK2
  1292  004C  0085               	movwf	5
  1293  004D  304B               	movlw	75
  1294  004E  3182  22CE         	fcall	clear_ram0
  1295  0050                     end_of_initialization:	
  1296                           ;End of C runtime variable initialization code
  1297                           
  1298  0050                     __end_of__initialization:	
  1299  0050  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1300  0051  0020               	movlb	0
  1301  0052  3182  2A50         	ljmp	_main	;jump to C main() function
  1302                           
  1303                           	psect	bssCOMMON
  1304  0077                     __pbssCOMMON:	
  1305  0077                     _EusartRxLenth:	
  1306  0077                     	ds	1
  1307  0078                     _eusartRxCount:	
  1308  0078                     	ds	1
  1309  0079                     _timeCtrlOvertimeMask:	
  1310  0079                     	ds	1
  1311  007A                     _timeCtrlStartFlag:	
  1312  007A                     	ds	1
  1313                           
  1314                           	psect	bssBANK0
  1315  0020                     __pbssBANK0:	
  1316  0020                     tempCtrlProcess@timeCnt:	
  1317  0020                     	ds	16
  1318  0030                     _IQRSta:	
  1319  0030                     	ds	8
  1320  0038                     _EUSART_TxDefaultInterruptHandler:	
  1321  0038                     	ds	2
  1322  003A                     TMR0_CallBack@preEusartRxCount:	
  1323  003A                     	ds	1
  1324  003B                     TMR0_CallBack@timeCrlCnt:	
  1325  003B                     	ds	1
  1326  003C                     TMR0_CallBack@eusartRXOvertimeCnt:	
  1327  003C                     	ds	1
  1328  003D                     _eusartRxOvertimeMask:	
  1329  003D                     	ds	1
  1330                           
  1331                           	psect	dataBANK0
  1332  004B                     __pdataBANK0:	
  1333  004B                     _IQRPreSta:	
  1334  004B                     	ds	8
  1335                           
  1336                           	psect	bssBANK1
  1337  00A0                     __pbssBANK1:	
  1338  00A0                     _timeCtrlValue:	
  1339  00A0                     	ds	64
  1340                           
  1341                           	psect	bssBANK2
  1342  0120                     __pbssBANK2:	
  1343  0120                     _eusartRxBuffer:	
  1344  0120                     	ds	75
  1345                           
  1346                           	psect	inittext
  1347  02C8                     init_ram:	
  1348  02C8  00FE               	movwf	126
  1349  02C9                     initloop:	
  1350  02C9  0012               	moviw fsr0++
  1351  02CA  001E               	movwi fsr1++
  1352  02CB  0BFE               	decfsz	126,f
  1353  02CC  2AC9               	goto	initloop
  1354  02CD  3400               	retlw	0
  1355                           
  1356                           	psect	clrtext
  1357  02CE                     clear_ram0:	
  1358                           ;	Called with FSR0 containing the base address, and
  1359                           ;	WREG with the size to clear
  1360                           
  1361  02CE  0064               	clrwdt	;clear the watchdog before getting into this loop
  1362  02CF                     clrloop0:	
  1363  02CF  0180               	clrf	0	;clear RAM location pointed to by FSR
  1364  02D0  3101               	addfsr 0,1
  1365  02D1  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1366  02D2  2ACF               	goto	clrloop0	;have we reached the end yet?
  1367  02D3  3400               	retlw	0	;all done for this memory range, return
  1368                           
  1369                           	psect	cstackCOMMON
  1370  0070                     __pcstackCOMMON:	
  1371  0070                     ?_PIN_MANAGER_Initialize:	
  1372  0070                     ?_OSCILLATOR_Initialize:	
  1373                           ; 1 bytes @ 0x0
  1374                           
  1375  0070                     ?_WDT_Initialize:	
  1376                           ; 1 bytes @ 0x0
  1377                           
  1378  0070                     ?_TMR0_Initialize:	
  1379                           ; 1 bytes @ 0x0
  1380                           
  1381  0070                     ?_EUSART_Initialize:	
  1382                           ; 1 bytes @ 0x0
  1383                           
  1384  0070                     ?_TMR0_ISR:	
  1385                           ; 1 bytes @ 0x0
  1386                           
  1387  0070                     ?_TMR0_DefaultInterruptHandler:	
  1388                           ; 1 bytes @ 0x0
  1389                           
  1390  0070                     ??_TMR0_DefaultInterruptHandler:	
  1391                           ; 1 bytes @ 0x0
  1392                           
  1393  0070                     ?_TMR0_CallBack:	
  1394                           ; 1 bytes @ 0x0
  1395                           
  1396  0070                     ??_TMR0_CallBack:	
  1397                           ; 1 bytes @ 0x0
  1398                           
  1399  0070                     ?_EUSART_Receive_ISR:	
  1400                           ; 1 bytes @ 0x0
  1401                           
  1402  0070                     ??_EUSART_Receive_ISR:	
  1403                           ; 1 bytes @ 0x0
  1404                           
  1405  0070                     ?_stopTimeCtrl:	
  1406                           ; 1 bytes @ 0x0
  1407                           
  1408  0070                     ?_startTimeCtrl:	
  1409                           ; 1 bytes @ 0x0
  1410                           
  1411  0070                     ?_SYSTEM_Initialize:	
  1412                           ; 1 bytes @ 0x0
  1413                           
  1414  0070                     ?_Get_Device_Addr:	
  1415                           ; 1 bytes @ 0x0
  1416                           
  1417  0070                     ?_INTERRUPT_InterruptManager:	
  1418                           ; 1 bytes @ 0x0
  1419                           
  1420  0070                     ?_EUSART_Deal:	
  1421                           ; 1 bytes @ 0x0
  1422                           
  1423  0070                     ?_getTimeData:	
  1424                           ; 1 bytes @ 0x0
  1425                           
  1426  0070                     ?_tempCtrlProcess:	
  1427                           ; 1 bytes @ 0x0
  1428                           
  1429  0070                     ?_main:	
  1430                           ; 1 bytes @ 0x0
  1431                           
  1432                           
  1433                           ; 1 bytes @ 0x0
  1434  0070                     	ds	1
  1435  0071                     ??_TMR0_ISR:	
  1436  0071                     ??_INTERRUPT_InterruptManager:	
  1437                           ; 1 bytes @ 0x1
  1438                           
  1439                           
  1440                           ; 1 bytes @ 0x1
  1441  0071                     	ds	1
  1442  0072                     ??_PIN_MANAGER_Initialize:	
  1443  0072                     ??_OSCILLATOR_Initialize:	
  1444                           ; 1 bytes @ 0x2
  1445                           
  1446  0072                     ??_WDT_Initialize:	
  1447                           ; 1 bytes @ 0x2
  1448                           
  1449  0072                     ?_TMR0_SetInterruptHandler:	
  1450                           ; 1 bytes @ 0x2
  1451                           
  1452  0072                     ?_EUSART_SetRxInterruptHandler:	
  1453                           ; 1 bytes @ 0x2
  1454                           
  1455  0072                     ??_stopTimeCtrl:	
  1456                           ; 1 bytes @ 0x2
  1457                           
  1458  0072                     ??_Get_Device_Addr:	
  1459                           ; 1 bytes @ 0x2
  1460                           
  1461  0072                     ??_tempCtrlProcess:	
  1462                           ; 1 bytes @ 0x2
  1463                           
  1464  0072                     getTimeData@cnt:	
  1465                           ; 1 bytes @ 0x2
  1466                           
  1467  0072                     TMR0_SetInterruptHandler@InterruptHandler:	
  1468                           ; 1 bytes @ 0x2
  1469                           
  1470  0072                     EUSART_SetRxInterruptHandler@interruptHandler:	
  1471                           ; 2 bytes @ 0x2
  1472                           
  1473                           
  1474                           ; 2 bytes @ 0x2
  1475  0072                     	ds	1
  1476  0073                     Get_Device_Addr@device_addr:	
  1477  0073                     getTimeData@i:	
  1478                           ; 1 bytes @ 0x3
  1479                           
  1480                           
  1481                           ; 1 bytes @ 0x3
  1482  0073                     	ds	1
  1483  0074                     ??_TMR0_Initialize:	
  1484  0074                     ??_EUSART_Initialize:	
  1485                           ; 1 bytes @ 0x4
  1486                           
  1487  0074                     ??_TMR0_SetInterruptHandler:	
  1488                           ; 1 bytes @ 0x4
  1489                           
  1490  0074                     ??_EUSART_SetRxInterruptHandler:	
  1491                           ; 1 bytes @ 0x4
  1492                           
  1493  0074                     getTimeData@j:	
  1494                           ; 1 bytes @ 0x4
  1495                           
  1496  0074                     stopTimeCtrl@i:	
  1497                           ; 1 bytes @ 0x4
  1498                           
  1499  0074                     tempCtrlProcess@i:	
  1500                           ; 1 bytes @ 0x4
  1501                           
  1502                           
  1503                           ; 1 bytes @ 0x4
  1504  0074                     	ds	1
  1505  0075                     ??_startTimeCtrl:	
  1506  0075                     ??_SYSTEM_Initialize:	
  1507                           ; 1 bytes @ 0x5
  1508                           
  1509  0075                     ??_EUSART_Deal:	
  1510                           ; 1 bytes @ 0x5
  1511                           
  1512                           
  1513                           ; 1 bytes @ 0x5
  1514  0075                     	ds	2
  1515  0077                     ??_main:	
  1516                           
  1517                           	psect	cstackBANK0
  1518  003E                     __pcstackBANK0:	
  1519                           ; 1 bytes @ 0x7
  1520                           
  1521  003E                     ??_getTimeData:	
  1522                           
  1523                           ; 1 bytes @ 0x0
  1524  003E                     	ds	13
  1525                           
  1526                           	psect	maintext
  1527  0250                     __pmaintext:	
  1528 ;;
  1529 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1530 ;;
  1531 ;; *************** function _main *****************
  1532 ;; Defined at:
  1533 ;;		line 49 in file "main.c"
  1534 ;; Parameters:    Size  Location     Type
  1535 ;;		None
  1536 ;; Auto vars:     Size  Location     Type
  1537 ;;		None
  1538 ;; Return value:  Size  Location     Type
  1539 ;;                  1    wreg      void 
  1540 ;; Registers used:
  1541 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1542 ;; Tracked objects:
  1543 ;;		On entry : B1F/0
  1544 ;;		On exit  : 0/0
  1545 ;;		Unchanged: 0/0
  1546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1547 ;;      Params:         0       0       0       0
  1548 ;;      Locals:         0       0       0       0
  1549 ;;      Temps:          0       0       0       0
  1550 ;;      Totals:         0       0       0       0
  1551 ;;Total ram usage:        0 bytes
  1552 ;; Hardware stack levels required when called:    7
  1553 ;; This function calls:
  1554 ;;		_EUSART_Deal
  1555 ;;		_SYSTEM_Initialize
  1556 ;;		_tempCtrlProcess
  1557 ;; This function is called by:
  1558 ;;		Startup code after reset
  1559 ;; This function uses a non-reentrant model
  1560 ;;
  1561                           
  1562                           
  1563                           ;psect for function _main
  1564  0250                     _main:	
  1565                           
  1566                           ;main.c: 52: SYSTEM_Initialize();
  1567                           
  1568                           ;incstack = 0
  1569                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1570  0250  3182  228D  3182   	fcall	_SYSTEM_Initialize
  1571                           
  1572                           ;main.c: 58: (INTCONbits.GIE = 1);
  1573  0253  178B               	bsf	11,7	;volatile
  1574                           
  1575                           ;main.c: 61: (INTCONbits.PEIE = 1);
  1576  0254  170B               	bsf	11,6	;volatile
  1577  0255                     l1257:	
  1578                           ;main.c: 69: while (1)
  1579                           
  1580                           
  1581                           ;main.c: 70: {
  1582                           ;main.c: 72: if (eusartRxOvertimeMask)
  1583  0255  0020               	movlb	0	; select bank0
  1584  0256  083D               	movf	_eusartRxOvertimeMask,w
  1585  0257  1903               	btfsc	3,2
  1586  0258  2A5D               	goto	l1263
  1587                           
  1588                           ;main.c: 73: {
  1589                           ;main.c: 74: eusartRxOvertimeMask = 0;
  1590  0259  01BD               	clrf	_eusartRxOvertimeMask
  1591                           
  1592                           ;main.c: 75: EUSART_Deal();
  1593  025A  3181  21CB  3182   	fcall	_EUSART_Deal
  1594  025D                     l1263:	
  1595                           
  1596                           ;main.c: 76: }
  1597                           ;main.c: 78: if(timeCtrlOvertimeMask)
  1598  025D  0879               	movf	_timeCtrlOvertimeMask,w
  1599  025E  1903               	btfsc	3,2
  1600  025F  2A55               	goto	l1257
  1601                           
  1602                           ;main.c: 79: {
  1603                           ;main.c: 80: tempCtrlProcess();
  1604  0260  3180  2054  3182   	fcall	_tempCtrlProcess
  1605                           
  1606                           ;main.c: 81: timeCtrlOvertimeMask = 0;
  1607  0263  01F9               	clrf	_timeCtrlOvertimeMask
  1608  0264  2A55               	goto	l1257
  1609  0265                     __end_of_main:	
  1610                           
  1611                           	psect	text1
  1612  0054                     __ptext1:	
  1613 ;; *************** function _tempCtrlProcess *****************
  1614 ;; Defined at:
  1615 ;;		line 46 in file "mcc_generated_files/time_ctrl.c"
  1616 ;; Parameters:    Size  Location     Type
  1617 ;;		None
  1618 ;; Auto vars:     Size  Location     Type
  1619 ;;  i               1    4[COMMON] unsigned char 
  1620 ;; Return value:  Size  Location     Type
  1621 ;;                  1    wreg      void 
  1622 ;; Registers used:
  1623 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  1624 ;; Tracked objects:
  1625 ;;		On entry : 0/0
  1626 ;;		On exit  : 0/0
  1627 ;;		Unchanged: 0/0
  1628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1629 ;;      Params:         0       0       0       0
  1630 ;;      Locals:         1       0       0       0
  1631 ;;      Temps:          2       0       0       0
  1632 ;;      Totals:         3       0       0       0
  1633 ;;Total ram usage:        3 bytes
  1634 ;; Hardware stack levels used:    1
  1635 ;; Hardware stack levels required when called:    4
  1636 ;; This function calls:
  1637 ;;		Nothing
  1638 ;; This function is called by:
  1639 ;;		_main
  1640 ;; This function uses a non-reentrant model
  1641 ;;
  1642                           
  1643                           
  1644                           ;psect for function _tempCtrlProcess
  1645  0054                     _tempCtrlProcess:	
  1646                           
  1647                           ;time_ctrl.c: 48: uint8_t i;
  1648                           ;time_ctrl.c: 49: static uint16_t timeCnt[8] = {0};
  1649                           ;time_ctrl.c: 51: for(i=0; i<8; i++)
  1650                           
  1651                           ;incstack = 0
  1652                           ; Regs used in _tempCtrlProcess: [wreg-fsr1h+status,2+status,0]
  1653  0054  01F4               	clrf	tempCtrlProcess@i
  1654  0055                     L1:	
  1655  0055  3008               	movlw	8
  1656  0056  0274               	subwf	tempCtrlProcess@i,w
  1657  0057  1803               	btfsc	3,0
  1658  0058  0008               	return
  1659                           
  1660                           ;time_ctrl.c: 52: {
  1661                           ;time_ctrl.c: 53: if(IQRPreSta[i] != IQRSta[i])
  1662  0059  0874               	movf	tempCtrlProcess@i,w
  1663  005A  3E30               	addlw	(low (_IQRSta| 0))& (0+255)
  1664  005B  0086               	movwf	6
  1665  005C  0187               	clrf	7
  1666  005D  0874               	movf	tempCtrlProcess@i,w
  1667  005E  3E4B               	addlw	(low (_IQRPreSta| 0))& (0+255)
  1668  005F  0084               	movwf	4
  1669  0060  0185               	clrf	5
  1670  0061  0800               	movf	0,w
  1671  0062  0601               	xorwf	1,w
  1672  0063  1D03               	btfss	3,2
  1673  0064  28B9               	goto	l1215
  1674  0065  28D7               	goto	l258
  1675  0066                     l1205:	
  1676                           ;time_ctrl.c: 56: {
  1677                           ;time_ctrl.c: 57: case 0: timeCnt[i] = timeCtrlValue[i][0]; break;
  1678                           
  1679                           ;time_ctrl.c: 54: {
  1680                           ;time_ctrl.c: 55: switch(IQRSta[i])
  1681                           
  1682  0066  0874               	movf	tempCtrlProcess@i,w
  1683  0067  00F2               	movwf	??_tempCtrlProcess
  1684  0068  3002               	movlw	2
  1685  0069                     u655:	
  1686  0069  35F2               	lslf	??_tempCtrlProcess,f
  1687  006A  3EFF               	addlw	-1
  1688  006B  1D03               	skipz
  1689  006C  2869               	goto	u655
  1690  006D  3572               	lslf	??_tempCtrlProcess,w
  1691  006E  3EA0               	addlw	(low (_timeCtrlValue| 0))& (0+255)
  1692  006F  0086               	movwf	6
  1693  0070  0187               	clrf	7
  1694  0071  3574               	lslf	tempCtrlProcess@i,w
  1695  0072  3E20               	addlw	(low (tempCtrlProcess@timeCnt| 0))& (0+255)
  1696  0073  0084               	movwf	4
  1697  0074  0185               	clrf	5
  1698  0075  3F40               	moviw [0]fsr1
  1699  0076  3F80               	movwi [0]fsr0
  1700  0077  3F41               	moviw [1]fsr1
  1701  0078  3F81               	movwi [1]fsr0
  1702  0079  28CB               	goto	l1217
  1703  007A                     l1207:	
  1704                           ;time_ctrl.c: 58: case 1: timeCnt[i] = timeCtrlValue[i][1]; break;
  1705                           
  1706  007A  0874               	movf	tempCtrlProcess@i,w
  1707  007B  00F2               	movwf	??_tempCtrlProcess
  1708  007C  3002               	movlw	2
  1709  007D                     u665:	
  1710  007D  35F2               	lslf	??_tempCtrlProcess,f
  1711  007E  3EFF               	addlw	-1
  1712  007F  1D03               	skipz
  1713  0080  287D               	goto	u665
  1714  0081  3572               	lslf	??_tempCtrlProcess,w
  1715  0082  3E02               	addlw	2
  1716  0083  3EA0               	addlw	(low (_timeCtrlValue| 0))& (0+255)
  1717  0084  0086               	movwf	6
  1718  0085  0187               	clrf	7
  1719  0086  3574               	lslf	tempCtrlProcess@i,w
  1720  0087  3E20               	addlw	(low (tempCtrlProcess@timeCnt| 0))& (0+255)
  1721  0088  0084               	movwf	4
  1722  0089  0185               	clrf	5
  1723  008A  3F40               	moviw [0]fsr1
  1724  008B  3F80               	movwi [0]fsr0
  1725  008C  3F41               	moviw [1]fsr1
  1726  008D  3F81               	movwi [1]fsr0
  1727  008E  28CB               	goto	l1217
  1728  008F                     l1209:	
  1729                           ;time_ctrl.c: 59: case 2: timeCnt[i] = timeCtrlValue[i][2]; break;
  1730                           
  1731  008F  0874               	movf	tempCtrlProcess@i,w
  1732  0090  00F2               	movwf	??_tempCtrlProcess
  1733  0091  3002               	movlw	2
  1734  0092                     u675:	
  1735  0092  35F2               	lslf	??_tempCtrlProcess,f
  1736  0093  3EFF               	addlw	-1
  1737  0094  1D03               	skipz
  1738  0095  2892               	goto	u675
  1739  0096  3572               	lslf	??_tempCtrlProcess,w
  1740  0097  3E04               	addlw	4
  1741  0098  3EA0               	addlw	(low (_timeCtrlValue| 0))& (0+255)
  1742  0099  0086               	movwf	6
  1743  009A  0187               	clrf	7
  1744  009B  3574               	lslf	tempCtrlProcess@i,w
  1745  009C  3E20               	addlw	(low (tempCtrlProcess@timeCnt| 0))& (0+255)
  1746  009D  0084               	movwf	4
  1747  009E  0185               	clrf	5
  1748  009F  3F40               	moviw [0]fsr1
  1749  00A0  3F80               	movwi [0]fsr0
  1750  00A1  3F41               	moviw [1]fsr1
  1751  00A2  3F81               	movwi [1]fsr0
  1752  00A3  28CB               	goto	l1217
  1753  00A4                     l1211:	
  1754                           ;time_ctrl.c: 60: case 3: timeCnt[i] = timeCtrlValue[i][3]; break;
  1755                           
  1756  00A4  0874               	movf	tempCtrlProcess@i,w
  1757  00A5  00F2               	movwf	??_tempCtrlProcess
  1758  00A6  3002               	movlw	2
  1759  00A7                     u685:	
  1760  00A7  35F2               	lslf	??_tempCtrlProcess,f
  1761  00A8  3EFF               	addlw	-1
  1762  00A9  1D03               	skipz
  1763  00AA  28A7               	goto	u685
  1764  00AB  3572               	lslf	??_tempCtrlProcess,w
  1765  00AC  3E06               	addlw	6
  1766  00AD  3EA0               	addlw	(low (_timeCtrlValue| 0))& (0+255)
  1767  00AE  0086               	movwf	6
  1768  00AF  0187               	clrf	7
  1769  00B0  3574               	lslf	tempCtrlProcess@i,w
  1770  00B1  3E20               	addlw	(low (tempCtrlProcess@timeCnt| 0))& (0+255)
  1771  00B2  0084               	movwf	4
  1772  00B3  0185               	clrf	5
  1773  00B4  3F40               	moviw [0]fsr1
  1774  00B5  3F80               	movwi [0]fsr0
  1775  00B6  3F41               	moviw [1]fsr1
  1776  00B7  3F81               	movwi [1]fsr0
  1777                           
  1778                           ;time_ctrl.c: 62: }
  1779                           
  1780                           ;time_ctrl.c: 61: default: break;
  1781  00B8  28CB               	goto	l1217
  1782  00B9                     l1215:	
  1783  00B9  0874               	movf	tempCtrlProcess@i,w
  1784  00BA  3E30               	addlw	(low (_IQRSta| 0))& (0+255)
  1785  00BB  0086               	movwf	6
  1786  00BC  0187               	clrf	7
  1787  00BD  0801               	movf	1,w
  1788                           
  1789                           ; Switch size 1, requested type "space"
  1790                           ; Number of cases is 4, Range of values is 0 to 3
  1791                           ; switch strategies available:
  1792                           ; Name         Instructions Cycles
  1793                           ; simple_byte           13     7 (average)
  1794                           ; direct_byte           14     6 (fixed)
  1795                           ; jumptable            260     6 (fixed)
  1796                           ;	Chosen strategy is simple_byte
  1797  00BE  3A00               	xorlw	0	; case 0
  1798  00BF  1903               	skipnz
  1799  00C0  2866               	goto	l1205
  1800  00C1  3A01               	xorlw	1	; case 1
  1801  00C2  1903               	skipnz
  1802  00C3  287A               	goto	l1207
  1803  00C4  3A03               	xorlw	3	; case 2
  1804  00C5  1903               	skipnz
  1805  00C6  288F               	goto	l1209
  1806  00C7  3A01               	xorlw	1	; case 3
  1807  00C8  1903               	skipnz
  1808  00C9  28A4               	goto	l1211
  1809  00CA  28CB               	goto	l1217
  1810  00CB                     l1217:	
  1811                           
  1812                           ;time_ctrl.c: 64: IQRPreSta[i] = IQRSta[i];
  1813  00CB  0874               	movf	tempCtrlProcess@i,w
  1814  00CC  3E30               	addlw	(low (_IQRSta| 0))& (0+255)
  1815  00CD  0086               	movwf	6
  1816  00CE  0187               	clrf	7
  1817  00CF  0801               	movf	1,w
  1818  00D0  00F2               	movwf	??_tempCtrlProcess
  1819  00D1  0874               	movf	tempCtrlProcess@i,w
  1820  00D2  3E4B               	addlw	(low (_IQRPreSta| 0))& (0+255)
  1821  00D3  0086               	movwf	6
  1822  00D4  0187               	clrf	7
  1823  00D5  0872               	movf	??_tempCtrlProcess,w
  1824  00D6  0081               	movwf	1
  1825  00D7                     l258:	
  1826                           
  1827                           ;time_ctrl.c: 65: }
  1828                           ;time_ctrl.c: 67: if(--timeCnt[i] == 0)
  1829  00D7  3574               	lslf	tempCtrlProcess@i,w
  1830  00D8  3E20               	addlw	(low (tempCtrlProcess@timeCnt| 0))& (0+255)
  1831  00D9  0086               	movwf	6
  1832  00DA  0187               	clrf	7
  1833  00DB  3001               	movlw	1
  1834  00DC  0281               	subwf	1,f
  1835  00DD  3141               	addfsr 1,1
  1836  00DE  3000               	movlw	0
  1837  00DF  3B81               	subwfb	1,f
  1838  00E0  317F               	addfsr 1,-1
  1839  00E1  0016               	moviw fsr1++
  1840  00E2  0401               	iorwf	1,w
  1841  00E3  1D03               	btfss	3,2
  1842  00E4  291C               	goto	l1231
  1843                           
  1844                           ;time_ctrl.c: 68: {
  1845                           ;time_ctrl.c: 69: if(IQRSta[i]%2 == 0)
  1846  00E5  0874               	movf	tempCtrlProcess@i,w
  1847  00E6  3E30               	addlw	(low (_IQRSta| 0))& (0+255)
  1848  00E7  0086               	movwf	6
  1849  00E8  0187               	clrf	7
  1850  00E9  1801               	btfsc	1,0
  1851  00EA  28F8               	goto	l1223
  1852                           
  1853                           ;time_ctrl.c: 70: {
  1854                           ;time_ctrl.c: 71: LATC |= 1 << i;
  1855  00EB  3001               	movlw	1
  1856  00EC  00F2               	movwf	??_tempCtrlProcess
  1857  00ED  0A74               	incf	tempCtrlProcess@i,w
  1858  00EE  28F0               	goto	u714
  1859  00EF                     u715:	
  1860  00EF  35F2               	lslf	??_tempCtrlProcess,f
  1861  00F0                     u714:	
  1862  00F0  0B89               	decfsz	9,f
  1863  00F1  28EF               	goto	u715
  1864  00F2  0872               	movf	??_tempCtrlProcess,w
  1865  00F3  00F3               	movwf	??_tempCtrlProcess+1
  1866  00F4  0873               	movf	??_tempCtrlProcess+1,w
  1867  00F5  0022               	movlb	2	; select bank2
  1868  00F6  048E               	iorwf	14,f	;volatile
  1869                           
  1870                           ;time_ctrl.c: 72: }
  1871  00F7  290B               	goto	l1227
  1872  00F8                     l1223:	
  1873                           
  1874                           ;time_ctrl.c: 73: else if(IQRSta[i]%2 == 1)
  1875  00F8  0874               	movf	tempCtrlProcess@i,w
  1876  00F9  3E30               	addlw	(low (_IQRSta| 0))& (0+255)
  1877  00FA  0086               	movwf	6
  1878  00FB  0187               	clrf	7
  1879  00FC  1C01               	btfss	1,0
  1880  00FD  290B               	goto	l1227
  1881                           
  1882                           ;time_ctrl.c: 74: {
  1883                           ;time_ctrl.c: 75: LATC &= ~(1<<i);
  1884  00FE  3001               	movlw	1
  1885  00FF  00F2               	movwf	??_tempCtrlProcess
  1886  0100  0A74               	incf	tempCtrlProcess@i,w
  1887  0101  2903               	goto	u734
  1888  0102                     u735:	
  1889  0102  35F2               	lslf	??_tempCtrlProcess,f
  1890  0103                     u734:	
  1891  0103  0B89               	decfsz	9,f
  1892  0104  2902               	goto	u735
  1893  0105  0872               	movf	??_tempCtrlProcess,w
  1894  0106  3AFF               	xorlw	255
  1895  0107  00F3               	movwf	??_tempCtrlProcess+1
  1896  0108  0873               	movf	??_tempCtrlProcess+1,w
  1897  0109  0022               	movlb	2	; select bank2
  1898  010A  058E               	andwf	14,f	;volatile
  1899  010B                     l1227:	
  1900                           
  1901                           ;time_ctrl.c: 76: }
  1902                           ;time_ctrl.c: 78: if(++IQRSta[i] >= 4)
  1903  010B  3001               	movlw	1
  1904  010C  00F2               	movwf	??_tempCtrlProcess
  1905  010D  0874               	movf	tempCtrlProcess@i,w
  1906  010E  3E30               	addlw	(low (_IQRSta| 0))& (0+255)
  1907  010F  0086               	movwf	6
  1908  0110  0187               	clrf	7
  1909  0111  0872               	movf	??_tempCtrlProcess,w
  1910  0112  0781               	addwf	1,f
  1911  0113  3004               	movlw	4
  1912  0114  0201               	subwf	1,w
  1913  0115  1C03               	skipc
  1914  0116  291C               	goto	l1231
  1915                           
  1916                           ;time_ctrl.c: 79: {
  1917                           ;time_ctrl.c: 80: IQRSta[i] = 0;
  1918  0117  0874               	movf	tempCtrlProcess@i,w
  1919  0118  3E30               	addlw	(low (_IQRSta| 0))& (0+255)
  1920  0119  0086               	movwf	6
  1921  011A  0187               	clrf	7
  1922  011B  0181               	clrf	1
  1923  011C                     l1231:	
  1924  011C  3001               	movlw	1
  1925  011D  00F2               	movwf	??_tempCtrlProcess
  1926  011E  0872               	movf	??_tempCtrlProcess,w
  1927  011F  07F4               	addwf	tempCtrlProcess@i,f
  1928  0120  2855               	goto	L1
  1929  0121                     __end_of_tempCtrlProcess:	
  1930                           
  1931                           	psect	text2
  1932  028D                     __ptext2:	
  1933 ;; *************** function _SYSTEM_Initialize *****************
  1934 ;; Defined at:
  1935 ;;		line 50 in file "mcc_generated_files/mcc.c"
  1936 ;; Parameters:    Size  Location     Type
  1937 ;;		None
  1938 ;; Auto vars:     Size  Location     Type
  1939 ;;		None
  1940 ;; Return value:  Size  Location     Type
  1941 ;;                  1    wreg      void 
  1942 ;; Registers used:
  1943 ;;		wreg, status,2, status,0, pclath, cstack
  1944 ;; Tracked objects:
  1945 ;;		On entry : 0/0
  1946 ;;		On exit  : 0/0
  1947 ;;		Unchanged: 0/0
  1948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1949 ;;      Params:         0       0       0       0
  1950 ;;      Locals:         0       0       0       0
  1951 ;;      Temps:          0       0       0       0
  1952 ;;      Totals:         0       0       0       0
  1953 ;;Total ram usage:        0 bytes
  1954 ;; Hardware stack levels used:    1
  1955 ;; Hardware stack levels required when called:    6
  1956 ;; This function calls:
  1957 ;;		_EUSART_Initialize
  1958 ;;		_OSCILLATOR_Initialize
  1959 ;;		_PIN_MANAGER_Initialize
  1960 ;;		_TMR0_Initialize
  1961 ;;		_WDT_Initialize
  1962 ;; This function is called by:
  1963 ;;		_main
  1964 ;; This function uses a non-reentrant model
  1965 ;;
  1966                           
  1967                           
  1968                           ;psect for function _SYSTEM_Initialize
  1969  028D                     _SYSTEM_Initialize:	
  1970                           
  1971                           ;mcc.c: 52: PIN_MANAGER_Initialize();
  1972                           
  1973                           ;incstack = 0
  1974                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  1975  028D  3182  221C  3182   	fcall	_PIN_MANAGER_Initialize
  1976                           
  1977                           ;mcc.c: 53: OSCILLATOR_Initialize();
  1978  0290  3182  22B3  3182   	fcall	_OSCILLATOR_Initialize
  1979                           
  1980                           ;mcc.c: 54: WDT_Initialize();
  1981  0293  3182  22E0  3182   	fcall	_WDT_Initialize
  1982                           
  1983                           ;mcc.c: 55: TMR0_Initialize();
  1984  0296  3182  2265  3182   	fcall	_TMR0_Initialize
  1985                           
  1986                           ;mcc.c: 56: EUSART_Initialize();
  1987  0299  3182  2237         	fcall	_EUSART_Initialize
  1988  029B  0008               	return
  1989  029C                     __end_of_SYSTEM_Initialize:	
  1990                           
  1991                           	psect	text3
  1992  02E0                     __ptext3:	
  1993 ;; *************** function _WDT_Initialize *****************
  1994 ;; Defined at:
  1995 ;;		line 69 in file "mcc_generated_files/mcc.c"
  1996 ;; Parameters:    Size  Location     Type
  1997 ;;		None
  1998 ;; Auto vars:     Size  Location     Type
  1999 ;;		None
  2000 ;; Return value:  Size  Location     Type
  2001 ;;                  1    wreg      void 
  2002 ;; Registers used:
  2003 ;;		wreg
  2004 ;; Tracked objects:
  2005 ;;		On entry : 0/0
  2006 ;;		On exit  : 0/0
  2007 ;;		Unchanged: 0/0
  2008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2009 ;;      Params:         0       0       0       0
  2010 ;;      Locals:         0       0       0       0
  2011 ;;      Temps:          0       0       0       0
  2012 ;;      Totals:         0       0       0       0
  2013 ;;Total ram usage:        0 bytes
  2014 ;; Hardware stack levels used:    1
  2015 ;; Hardware stack levels required when called:    4
  2016 ;; This function calls:
  2017 ;;		Nothing
  2018 ;; This function is called by:
  2019 ;;		_SYSTEM_Initialize
  2020 ;; This function uses a non-reentrant model
  2021 ;;
  2022                           
  2023                           
  2024                           ;psect for function _WDT_Initialize
  2025  02E0                     _WDT_Initialize:	
  2026                           
  2027                           ;mcc.c: 72: WDTCON = 0x16;
  2028                           
  2029                           ;incstack = 0
  2030                           ; Regs used in _WDT_Initialize: [wreg]
  2031  02E0  3016               	movlw	22
  2032  02E1  0021               	movlb	1	; select bank1
  2033  02E2  0097               	movwf	23	;volatile
  2034  02E3  0008               	return
  2035  02E4                     __end_of_WDT_Initialize:	
  2036                           
  2037                           	psect	text4
  2038  0265                     __ptext4:	
  2039 ;; *************** function _TMR0_Initialize *****************
  2040 ;; Defined at:
  2041 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  2042 ;; Parameters:    Size  Location     Type
  2043 ;;		None
  2044 ;; Auto vars:     Size  Location     Type
  2045 ;;		None
  2046 ;; Return value:  Size  Location     Type
  2047 ;;                  1    wreg      void 
  2048 ;; Registers used:
  2049 ;;		wreg, status,2, status,0, pclath, cstack
  2050 ;; Tracked objects:
  2051 ;;		On entry : 0/0
  2052 ;;		On exit  : 0/0
  2053 ;;		Unchanged: 0/0
  2054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2055 ;;      Params:         0       0       0       0
  2056 ;;      Locals:         0       0       0       0
  2057 ;;      Temps:          1       0       0       0
  2058 ;;      Totals:         1       0       0       0
  2059 ;;Total ram usage:        1 bytes
  2060 ;; Hardware stack levels used:    1
  2061 ;; Hardware stack levels required when called:    5
  2062 ;; This function calls:
  2063 ;;		_TMR0_SetInterruptHandler
  2064 ;; This function is called by:
  2065 ;;		_SYSTEM_Initialize
  2066 ;; This function uses a non-reentrant model
  2067 ;;
  2068                           
  2069                           
  2070                           ;psect for function _TMR0_Initialize
  2071  0265                     _TMR0_Initialize:	
  2072                           
  2073                           ;tmr0.c: 69: OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | 0xD7 & 0x3F);
  2074                           
  2075                           ;incstack = 0
  2076                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2077  0265  0021               	movlb	1	; select bank1
  2078  0266  0815               	movf	21,w	;volatile
  2079  0267  39C0               	andlw	192
  2080  0268  3817               	iorlw	23
  2081  0269  0095               	movwf	21	;volatile
  2082                           
  2083                           ;tmr0.c: 72: TMR0 = 0xF0;
  2084  026A  30F0               	movlw	240
  2085  026B  0020               	movlb	0	; select bank0
  2086  026C  0095               	movwf	21	;volatile
  2087                           
  2088                           ;tmr0.c: 75: timer0ReloadVal= 240;
  2089  026D  30F0               	movlw	240
  2090  026E  00F4               	movwf	??_TMR0_Initialize
  2091  026F  0874               	movf	??_TMR0_Initialize,w
  2092  0270  00D7               	movwf	_timer0ReloadVal	;volatile
  2093                           
  2094                           ;tmr0.c: 78: INTCONbits.TMR0IF = 0;
  2095  0271  110B               	bcf	11,2	;volatile
  2096                           
  2097                           ;tmr0.c: 81: INTCONbits.TMR0IE = 1;
  2098  0272  168B               	bsf	11,5	;volatile
  2099                           
  2100                           ;tmr0.c: 84: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  2101  0273  30E4               	movlw	low _TMR0_DefaultInterruptHandler
  2102  0274  00F2               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  2103  0275  3002               	movlw	high _TMR0_DefaultInterruptHandler
  2104  0276  00F3               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  2105  0277  3182  22D4         	fcall	_TMR0_SetInterruptHandler
  2106  0279  0008               	return
  2107  027A                     __end_of_TMR0_Initialize:	
  2108                           
  2109                           	psect	text5
  2110  02D4                     __ptext5:	
  2111 ;; *************** function _TMR0_SetInterruptHandler *****************
  2112 ;; Defined at:
  2113 ;;		line 166 in file "mcc_generated_files/tmr0.c"
  2114 ;; Parameters:    Size  Location     Type
  2115 ;;  InterruptHan    2    2[COMMON] PTR FTN()void 
  2116 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  2117 ;; Auto vars:     Size  Location     Type
  2118 ;;		None
  2119 ;; Return value:  Size  Location     Type
  2120 ;;                  1    wreg      void 
  2121 ;; Registers used:
  2122 ;;		wreg
  2123 ;; Tracked objects:
  2124 ;;		On entry : 0/0
  2125 ;;		On exit  : 0/0
  2126 ;;		Unchanged: 0/0
  2127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2128 ;;      Params:         2       0       0       0
  2129 ;;      Locals:         0       0       0       0
  2130 ;;      Temps:          0       0       0       0
  2131 ;;      Totals:         2       0       0       0
  2132 ;;Total ram usage:        2 bytes
  2133 ;; Hardware stack levels used:    1
  2134 ;; Hardware stack levels required when called:    4
  2135 ;; This function calls:
  2136 ;;		Nothing
  2137 ;; This function is called by:
  2138 ;;		_TMR0_Initialize
  2139 ;; This function uses a non-reentrant model
  2140 ;;
  2141                           
  2142                           
  2143                           ;psect for function _TMR0_SetInterruptHandler
  2144  02D4                     _TMR0_SetInterruptHandler:	
  2145                           
  2146                           ;tmr0.c: 167: TMR0_InterruptHandler = InterruptHandler;
  2147                           
  2148                           ;incstack = 0
  2149                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  2150  02D4  0873               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  2151  02D5  0020               	movlb	0	; select bank0
  2152  02D6  00D4               	movwf	_TMR0_InterruptHandler+1
  2153  02D7  0872               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  2154  02D8  00D3               	movwf	_TMR0_InterruptHandler
  2155  02D9  0008               	return
  2156  02DA                     __end_of_TMR0_SetInterruptHandler:	
  2157                           
  2158                           	psect	text6
  2159  021C                     __ptext6:	
  2160 ;; *************** function _PIN_MANAGER_Initialize *****************
  2161 ;; Defined at:
  2162 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  2163 ;; Parameters:    Size  Location     Type
  2164 ;;		None
  2165 ;; Auto vars:     Size  Location     Type
  2166 ;;		None
  2167 ;; Return value:  Size  Location     Type
  2168 ;;                  1    wreg      void 
  2169 ;; Registers used:
  2170 ;;		wreg, status,2
  2171 ;; Tracked objects:
  2172 ;;		On entry : 0/0
  2173 ;;		On exit  : 0/0
  2174 ;;		Unchanged: 0/0
  2175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2176 ;;      Params:         0       0       0       0
  2177 ;;      Locals:         0       0       0       0
  2178 ;;      Temps:          0       0       0       0
  2179 ;;      Totals:         0       0       0       0
  2180 ;;Total ram usage:        0 bytes
  2181 ;; Hardware stack levels used:    1
  2182 ;; Hardware stack levels required when called:    4
  2183 ;; This function calls:
  2184 ;;		Nothing
  2185 ;; This function is called by:
  2186 ;;		_SYSTEM_Initialize
  2187 ;; This function uses a non-reentrant model
  2188 ;;
  2189                           
  2190                           
  2191                           ;psect for function _PIN_MANAGER_Initialize
  2192  021C                     _PIN_MANAGER_Initialize:	
  2193                           
  2194                           ;pin_manager.c: 62: LATA = 0x04;
  2195                           
  2196                           ;incstack = 0
  2197                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  2198  021C  3004               	movlw	4
  2199  021D  0022               	movlb	2	; select bank2
  2200  021E  008C               	movwf	12	;volatile
  2201                           
  2202                           ;pin_manager.c: 63: LATB = 0x00;
  2203  021F  018D               	clrf	13	;volatile
  2204                           
  2205                           ;pin_manager.c: 64: LATC = 0x00;
  2206  0220  018E               	clrf	14	;volatile
  2207                           
  2208                           ;pin_manager.c: 69: TRISA = 0x3B;
  2209  0221  303B               	movlw	59
  2210  0222  0021               	movlb	1	; select bank1
  2211  0223  008C               	movwf	12	;volatile
  2212                           
  2213                           ;pin_manager.c: 70: TRISB = 0xF0;
  2214  0224  30F0               	movlw	240
  2215  0225  008D               	movwf	13	;volatile
  2216                           
  2217                           ;pin_manager.c: 71: TRISC = 0x00;
  2218  0226  018E               	clrf	14	;volatile
  2219                           
  2220                           ;pin_manager.c: 76: ANSELC = 0x00;
  2221  0227  0023               	movlb	3	; select bank3
  2222  0228  018E               	clrf	14	;volatile
  2223                           
  2224                           ;pin_manager.c: 77: ANSELB = 0x00;
  2225  0229  018D               	clrf	13	;volatile
  2226                           
  2227                           ;pin_manager.c: 78: ANSELA = 0x12;
  2228  022A  3012               	movlw	18
  2229  022B  008C               	movwf	12	;volatile
  2230                           
  2231                           ;pin_manager.c: 83: WPUB = 0x00;
  2232  022C  0024               	movlb	4	; select bank4
  2233  022D  018D               	clrf	13	;volatile
  2234                           
  2235                           ;pin_manager.c: 84: WPUA = 0x01;
  2236  022E  3001               	movlw	1
  2237  022F  008C               	movwf	12	;volatile
  2238                           
  2239                           ;pin_manager.c: 85: WPUC = 0x00;
  2240  0230  018E               	clrf	14	;volatile
  2241                           
  2242                           ;pin_manager.c: 86: OPTION_REGbits.nWPUEN = 0;
  2243  0231  0021               	movlb	1	; select bank1
  2244  0232  1395               	bcf	21,7	;volatile
  2245                           
  2246                           ;pin_manager.c: 95: APFCON0 = 0x00;
  2247  0233  0022               	movlb	2	; select bank2
  2248  0234  019D               	clrf	29	;volatile
  2249                           
  2250                           ;pin_manager.c: 96: APFCON1 = 0x00;
  2251  0235  019E               	clrf	30	;volatile
  2252  0236  0008               	return
  2253  0237                     __end_of_PIN_MANAGER_Initialize:	
  2254                           
  2255                           	psect	text7
  2256  02B3                     __ptext7:	
  2257 ;; *************** function _OSCILLATOR_Initialize *****************
  2258 ;; Defined at:
  2259 ;;		line 59 in file "mcc_generated_files/mcc.c"
  2260 ;; Parameters:    Size  Location     Type
  2261 ;;		None
  2262 ;; Auto vars:     Size  Location     Type
  2263 ;;		None
  2264 ;; Return value:  Size  Location     Type
  2265 ;;                  1    wreg      void 
  2266 ;; Registers used:
  2267 ;;		wreg, status,2
  2268 ;; Tracked objects:
  2269 ;;		On entry : 0/0
  2270 ;;		On exit  : 0/0
  2271 ;;		Unchanged: 0/0
  2272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2273 ;;      Params:         0       0       0       0
  2274 ;;      Locals:         0       0       0       0
  2275 ;;      Temps:          0       0       0       0
  2276 ;;      Totals:         0       0       0       0
  2277 ;;Total ram usage:        0 bytes
  2278 ;; Hardware stack levels used:    1
  2279 ;; Hardware stack levels required when called:    4
  2280 ;; This function calls:
  2281 ;;		Nothing
  2282 ;; This function is called by:
  2283 ;;		_SYSTEM_Initialize
  2284 ;; This function uses a non-reentrant model
  2285 ;;
  2286                           
  2287                           
  2288                           ;psect for function _OSCILLATOR_Initialize
  2289  02B3                     _OSCILLATOR_Initialize:	
  2290                           
  2291                           ;mcc.c: 62: OSCCON = 0x7A;
  2292                           
  2293                           ;incstack = 0
  2294                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  2295  02B3  307A               	movlw	122
  2296  02B4  0021               	movlb	1	; select bank1
  2297  02B5  0099               	movwf	25	;volatile
  2298                           
  2299                           ;mcc.c: 64: OSCTUNE = 0x00;
  2300  02B6  0198               	clrf	24	;volatile
  2301                           
  2302                           ;mcc.c: 66: BORCON = 0x00;
  2303  02B7  0022               	movlb	2	; select bank2
  2304  02B8  0196               	clrf	22	;volatile
  2305  02B9  0008               	return
  2306  02BA                     __end_of_OSCILLATOR_Initialize:	
  2307                           
  2308                           	psect	text8
  2309  0237                     __ptext8:	
  2310 ;; *************** function _EUSART_Initialize *****************
  2311 ;; Defined at:
  2312 ;;		line 74 in file "mcc_generated_files/eusart.c"
  2313 ;; Parameters:    Size  Location     Type
  2314 ;;		None
  2315 ;; Auto vars:     Size  Location     Type
  2316 ;;		None
  2317 ;; Return value:  Size  Location     Type
  2318 ;;                  1    wreg      void 
  2319 ;; Registers used:
  2320 ;;		wreg, status,2, status,0, pclath, cstack
  2321 ;; Tracked objects:
  2322 ;;		On entry : 0/0
  2323 ;;		On exit  : 0/0
  2324 ;;		Unchanged: 0/0
  2325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2326 ;;      Params:         0       0       0       0
  2327 ;;      Locals:         0       0       0       0
  2328 ;;      Temps:          0       0       0       0
  2329 ;;      Totals:         0       0       0       0
  2330 ;;Total ram usage:        0 bytes
  2331 ;; Hardware stack levels used:    1
  2332 ;; Hardware stack levels required when called:    5
  2333 ;; This function calls:
  2334 ;;		_EUSART_SetRxInterruptHandler
  2335 ;; This function is called by:
  2336 ;;		_SYSTEM_Initialize
  2337 ;; This function uses a non-reentrant model
  2338 ;;
  2339                           
  2340                           
  2341                           ;psect for function _EUSART_Initialize
  2342  0237                     _EUSART_Initialize:	
  2343                           
  2344                           ;eusart.c: 77: PIE1bits.RCIE = 0;
  2345                           
  2346                           ;incstack = 0
  2347                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2348  0237  0021               	movlb	1	; select bank1
  2349  0238  1291               	bcf	17,5	;volatile
  2350                           
  2351                           ;eusart.c: 78: EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  2352  0239  307A               	movlw	low _EUSART_Receive_ISR
  2353  023A  00F2               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  2354  023B  3002               	movlw	high _EUSART_Receive_ISR
  2355  023C  00F3               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  2356  023D  3182  22DA         	fcall	_EUSART_SetRxInterruptHandler
  2357                           
  2358                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  2359  023F  0021               	movlb	1	; select bank1
  2360  0240  1211               	bcf	17,4	;volatile
  2361                           
  2362                           ;eusart.c: 84: BAUDCON = 0x08;
  2363  0241  3008               	movlw	8
  2364  0242  0023               	movlb	3	; select bank3
  2365  0243  009F               	movwf	31	;volatile
  2366                           
  2367                           ;eusart.c: 87: RCSTA = 0x90;
  2368  0244  3090               	movlw	144
  2369  0245  009D               	movwf	29	;volatile
  2370                           
  2371                           ;eusart.c: 90: TXSTA = 0x24;
  2372  0246  3024               	movlw	36
  2373  0247  009E               	movwf	30	;volatile
  2374                           
  2375                           ;eusart.c: 93: SPBRGL = 0xA0;
  2376  0248  30A0               	movlw	160
  2377  0249  009B               	movwf	27	;volatile
  2378                           
  2379                           ;eusart.c: 96: SPBRGH = 0x01;
  2380  024A  3001               	movlw	1
  2381  024B  009C               	movwf	28	;volatile
  2382                           
  2383                           ;eusart.c: 106: eusartRxCount = 0;
  2384  024C  01F8               	clrf	_eusartRxCount
  2385                           
  2386                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  2387  024D  0021               	movlb	1	; select bank1
  2388  024E  1691               	bsf	17,5	;volatile
  2389  024F  0008               	return
  2390  0250                     __end_of_EUSART_Initialize:	
  2391                           
  2392                           	psect	text9
  2393  02DA                     __ptext9:	
  2394 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  2395 ;; Defined at:
  2396 ;;		line 223 in file "mcc_generated_files/eusart.c"
  2397 ;; Parameters:    Size  Location     Type
  2398 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  2399 ;;		 -> EUSART_Receive_ISR(1), 
  2400 ;; Auto vars:     Size  Location     Type
  2401 ;;		None
  2402 ;; Return value:  Size  Location     Type
  2403 ;;                  1    wreg      void 
  2404 ;; Registers used:
  2405 ;;		wreg
  2406 ;; Tracked objects:
  2407 ;;		On entry : 0/0
  2408 ;;		On exit  : 0/0
  2409 ;;		Unchanged: 0/0
  2410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2411 ;;      Params:         2       0       0       0
  2412 ;;      Locals:         0       0       0       0
  2413 ;;      Temps:          0       0       0       0
  2414 ;;      Totals:         2       0       0       0
  2415 ;;Total ram usage:        2 bytes
  2416 ;; Hardware stack levels used:    1
  2417 ;; Hardware stack levels required when called:    4
  2418 ;; This function calls:
  2419 ;;		Nothing
  2420 ;; This function is called by:
  2421 ;;		_EUSART_Initialize
  2422 ;; This function uses a non-reentrant model
  2423 ;;
  2424                           
  2425                           
  2426                           ;psect for function _EUSART_SetRxInterruptHandler
  2427  02DA                     _EUSART_SetRxInterruptHandler:	
  2428                           
  2429                           ;eusart.c: 224: EUSART_RxDefaultInterruptHandler = interruptHandler;
  2430                           
  2431                           ;incstack = 0
  2432                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  2433  02DA  0873               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  2434  02DB  0020               	movlb	0	; select bank0
  2435  02DC  00D6               	movwf	_EUSART_RxDefaultInterruptHandler+1
  2436  02DD  0872               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  2437  02DE  00D5               	movwf	_EUSART_RxDefaultInterruptHandler
  2438  02DF  0008               	return
  2439  02E0                     __end_of_EUSART_SetRxInterruptHandler:	
  2440                           
  2441                           	psect	text10
  2442  01CB                     __ptext10:	
  2443 ;; *************** function _EUSART_Deal *****************
  2444 ;; Defined at:
  2445 ;;		line 228 in file "mcc_generated_files/eusart.c"
  2446 ;; Parameters:    Size  Location     Type
  2447 ;;		None
  2448 ;; Auto vars:     Size  Location     Type
  2449 ;;		None
  2450 ;; Return value:  Size  Location     Type
  2451 ;;                  1    wreg      void 
  2452 ;; Registers used:
  2453 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2454 ;; Tracked objects:
  2455 ;;		On entry : 0/0
  2456 ;;		On exit  : 0/0
  2457 ;;		Unchanged: 0/0
  2458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2459 ;;      Params:         0       0       0       0
  2460 ;;      Locals:         0       0       0       0
  2461 ;;      Temps:          2       0       0       0
  2462 ;;      Totals:         2       0       0       0
  2463 ;;Total ram usage:        2 bytes
  2464 ;; Hardware stack levels used:    1
  2465 ;; Hardware stack levels required when called:    6
  2466 ;; This function calls:
  2467 ;;		_Get_Device_Addr
  2468 ;;		_startTimeCtrl
  2469 ;;		_stopTimeCtrl
  2470 ;; This function is called by:
  2471 ;;		_main
  2472 ;; This function uses a non-reentrant model
  2473 ;;
  2474                           
  2475                           
  2476                           ;psect for function _EUSART_Deal
  2477  01CB                     _EUSART_Deal:	
  2478                           
  2479                           ;eusart.c: 231: if(eusartRxBuffer[0] == 0xA5 && eusartRxBuffer[1] == 0x5A)
  2480                           
  2481                           ;incstack = 0
  2482                           ; Regs used in _EUSART_Deal: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2483  01CB  30A5               	movlw	165
  2484  01CC  0022               	movlb	2	; select bank2
  2485  01CD  0620               	xorwf	_eusartRxBuffer^(0+256),w
  2486  01CE  1D03               	btfss	3,2
  2487  01CF  0008               	return
  2488  01D0  305A               	movlw	90
  2489  01D1  0621               	xorwf	(_eusartRxBuffer^(0+256)+1),w
  2490  01D2  1D03               	btfss	3,2
  2491  01D3  0008               	return
  2492                           
  2493                           ;eusart.c: 232: {
  2494                           ;eusart.c: 234: if(eusartRxBuffer[2] == EusartRxLenth-5)
  2495  01D4  0877               	movf	_EusartRxLenth,w
  2496  01D5  3EFB               	addlw	251
  2497  01D6  00F5               	movwf	??_EUSART_Deal
  2498  01D7  30FF               	movlw	255
  2499  01D8  1803               	skipnc
  2500  01D9  3000               	movlw	0
  2501  01DA  00F6               	movwf	??_EUSART_Deal+1
  2502  01DB  0822               	movf	(_eusartRxBuffer^(0+256)+2),w
  2503  01DC  0675               	xorwf	??_EUSART_Deal,w
  2504  01DD  0476               	iorwf	??_EUSART_Deal+1,w
  2505  01DE  1D03               	skipz
  2506  01DF  0008               	return
  2507                           
  2508                           ;eusart.c: 235: {
  2509                           ;eusart.c: 236: if(eusartRxBuffer[4] == Get_Device_Addr())
  2510  01E0  3182  229C  3181   	fcall	_Get_Device_Addr
  2511  01E3  0022               	movlb	2	; select bank2
  2512  01E4  0624               	xorwf	(_eusartRxBuffer^(0+256)+4),w
  2513  01E5  1D03               	skipz
  2514  01E6  0008               	return
  2515                           
  2516                           ;eusart.c: 237: {
  2517                           ;eusart.c: 238: if(eusartRxBuffer[3] == 0x1C)
  2518  01E7  301C               	movlw	28
  2519  01E8  0623               	xorwf	(_eusartRxBuffer^(0+256)+3),w
  2520  01E9  1D03               	btfss	3,2
  2521  01EA  29EE               	goto	l1191
  2522                           
  2523                           ;eusart.c: 239: {
  2524                           ;eusart.c: 240: stopTimeCtrl();
  2525  01EB  3181  21F6         	fcall	_stopTimeCtrl
  2526                           
  2527                           ;eusart.c: 241: }
  2528  01ED  0008               	return
  2529  01EE                     l1191:	
  2530                           
  2531                           ;eusart.c: 242: else if(eusartRxBuffer[3] == 0x1D)
  2532  01EE  301D               	movlw	29
  2533  01EF  0022               	movlb	2	; select bank2
  2534  01F0  0623               	xorwf	(_eusartRxBuffer^(0+256)+3),w
  2535  01F1  1D03               	btfss	3,2
  2536  01F2  0008               	return
  2537                           
  2538                           ;eusart.c: 243: {
  2539                           ;eusart.c: 244: startTimeCtrl();
  2540  01F3  3182  22BA         	fcall	_startTimeCtrl
  2541  01F5  0008               	return
  2542  01F6                     __end_of_EUSART_Deal:	
  2543                           
  2544                           	psect	text11
  2545  01F6                     __ptext11:	
  2546 ;; *************** function _stopTimeCtrl *****************
  2547 ;; Defined at:
  2548 ;;		line 32 in file "mcc_generated_files/time_ctrl.c"
  2549 ;; Parameters:    Size  Location     Type
  2550 ;;		None
  2551 ;; Auto vars:     Size  Location     Type
  2552 ;;  i               1    4[COMMON] unsigned char 
  2553 ;; Return value:  Size  Location     Type
  2554 ;;                  1    wreg      void 
  2555 ;; Registers used:
  2556 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2557 ;; Tracked objects:
  2558 ;;		On entry : 0/0
  2559 ;;		On exit  : 0/0
  2560 ;;		Unchanged: 0/0
  2561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2562 ;;      Params:         0       0       0       0
  2563 ;;      Locals:         1       0       0       0
  2564 ;;      Temps:          2       0       0       0
  2565 ;;      Totals:         3       0       0       0
  2566 ;;Total ram usage:        3 bytes
  2567 ;; Hardware stack levels used:    1
  2568 ;; Hardware stack levels required when called:    4
  2569 ;; This function calls:
  2570 ;;		Nothing
  2571 ;; This function is called by:
  2572 ;;		_EUSART_Deal
  2573 ;; This function uses a non-reentrant model
  2574 ;;
  2575                           
  2576                           
  2577                           ;psect for function _stopTimeCtrl
  2578  01F6                     _stopTimeCtrl:	
  2579                           
  2580                           ;time_ctrl.c: 34: uint8_t i;
  2581                           ;time_ctrl.c: 35: timeCtrlStartFlag = 0;
  2582                           
  2583                           ;incstack = 0
  2584                           ; Regs used in _stopTimeCtrl: [wreg+fsr1l+fsr1h+status,2+status,0]
  2585  01F6  01FA               	clrf	_timeCtrlStartFlag
  2586                           
  2587                           ;time_ctrl.c: 36: do { LATAbits.LATA2 = 1; } while(0);
  2588  01F7  0022               	movlb	2	; select bank2
  2589  01F8  150C               	bsf	12,2	;volatile
  2590                           
  2591                           ;time_ctrl.c: 38: for(i=0; i<8; i++)
  2592  01F9  01F4               	clrf	stopTimeCtrl@i
  2593  01FA                     L2:	
  2594  01FA  3008               	movlw	8
  2595  01FB  0274               	subwf	stopTimeCtrl@i,w
  2596  01FC  1803               	btfsc	3,0
  2597  01FD  0008               	return
  2598                           
  2599                           ;time_ctrl.c: 39: {
  2600                           ;time_ctrl.c: 40: IQRSta[i] = 0;
  2601  01FE  0874               	movf	stopTimeCtrl@i,w
  2602  01FF  3E30               	addlw	(low (_IQRSta| 0))& (0+255)
  2603  0200  0086               	movwf	6
  2604  0201  0187               	clrf	7
  2605  0202  0181               	clrf	1
  2606                           
  2607                           ;time_ctrl.c: 41: IQRPreSta[i] = 3;
  2608  0203  3003               	movlw	3
  2609  0204  00F2               	movwf	??_stopTimeCtrl
  2610  0205  0874               	movf	stopTimeCtrl@i,w
  2611  0206  3E4B               	addlw	(low (_IQRPreSta| 0))& (0+255)
  2612  0207  0086               	movwf	6
  2613  0208  0187               	clrf	7
  2614  0209  0872               	movf	??_stopTimeCtrl,w
  2615  020A  0081               	movwf	1
  2616                           
  2617                           ;time_ctrl.c: 42: LATC &= ~(1<<i);
  2618  020B  3001               	movlw	1
  2619  020C  00F2               	movwf	??_stopTimeCtrl
  2620  020D  0A74               	incf	stopTimeCtrl@i,w
  2621  020E  2A10               	goto	u544
  2622  020F                     u545:	
  2623  020F  35F2               	lslf	??_stopTimeCtrl,f
  2624  0210                     u544:	
  2625  0210  0B89               	decfsz	9,f
  2626  0211  2A0F               	goto	u545
  2627  0212  0872               	movf	??_stopTimeCtrl,w
  2628  0213  3AFF               	xorlw	255
  2629  0214  00F3               	movwf	??_stopTimeCtrl+1
  2630  0215  0873               	movf	??_stopTimeCtrl+1,w
  2631  0216  058E               	andwf	14,f	;volatile
  2632  0217  3001               	movlw	1
  2633  0218  00F2               	movwf	??_stopTimeCtrl
  2634  0219  0872               	movf	??_stopTimeCtrl,w
  2635  021A  07F4               	addwf	stopTimeCtrl@i,f
  2636  021B  29FA               	goto	L2
  2637  021C                     __end_of_stopTimeCtrl:	
  2638                           
  2639                           	psect	text12
  2640  02BA                     __ptext12:	
  2641 ;; *************** function _startTimeCtrl *****************
  2642 ;; Defined at:
  2643 ;;		line 25 in file "mcc_generated_files/time_ctrl.c"
  2644 ;; Parameters:    Size  Location     Type
  2645 ;;		None
  2646 ;; Auto vars:     Size  Location     Type
  2647 ;;		None
  2648 ;; Return value:  Size  Location     Type
  2649 ;;                  1    wreg      void 
  2650 ;; Registers used:
  2651 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2652 ;; Tracked objects:
  2653 ;;		On entry : 0/0
  2654 ;;		On exit  : 0/0
  2655 ;;		Unchanged: 0/0
  2656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2657 ;;      Params:         0       0       0       0
  2658 ;;      Locals:         0       0       0       0
  2659 ;;      Temps:          0       0       0       0
  2660 ;;      Totals:         0       0       0       0
  2661 ;;Total ram usage:        0 bytes
  2662 ;; Hardware stack levels used:    1
  2663 ;; Hardware stack levels required when called:    5
  2664 ;; This function calls:
  2665 ;;		_getTimeData
  2666 ;; This function is called by:
  2667 ;;		_EUSART_Deal
  2668 ;; This function uses a non-reentrant model
  2669 ;;
  2670                           
  2671                           
  2672                           ;psect for function _startTimeCtrl
  2673  02BA                     _startTimeCtrl:	
  2674                           
  2675                           ;time_ctrl.c: 27: getTimeData();
  2676                           
  2677                           ;incstack = 0
  2678                           ; Regs used in _startTimeCtrl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2679  02BA  3181  2121         	fcall	_getTimeData
  2680                           
  2681                           ;time_ctrl.c: 28: do { LATAbits.LATA2 = 0; } while(0);
  2682  02BC  0022               	movlb	2	; select bank2
  2683  02BD  110C               	bcf	12,2	;volatile
  2684                           
  2685                           ;time_ctrl.c: 29: timeCtrlStartFlag = 1;
  2686  02BE  01FA               	clrf	_timeCtrlStartFlag
  2687  02BF  0AFA               	incf	_timeCtrlStartFlag,f
  2688  02C0  0008               	return
  2689  02C1                     __end_of_startTimeCtrl:	
  2690                           
  2691                           	psect	text13
  2692  0121                     __ptext13:	
  2693 ;; *************** function _getTimeData *****************
  2694 ;; Defined at:
  2695 ;;		line 9 in file "mcc_generated_files/time_ctrl.c"
  2696 ;; Parameters:    Size  Location     Type
  2697 ;;		None
  2698 ;; Auto vars:     Size  Location     Type
  2699 ;;  j               1    4[COMMON] unsigned char 
  2700 ;;  i               1    3[COMMON] unsigned char 
  2701 ;;  cnt             1    2[COMMON] unsigned char 
  2702 ;; Return value:  Size  Location     Type
  2703 ;;                  1    wreg      void 
  2704 ;; Registers used:
  2705 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2706 ;; Tracked objects:
  2707 ;;		On entry : 0/0
  2708 ;;		On exit  : 0/0
  2709 ;;		Unchanged: 0/0
  2710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2711 ;;      Params:         0       0       0       0
  2712 ;;      Locals:         3       0       0       0
  2713 ;;      Temps:          0      13       0       0
  2714 ;;      Totals:         3      13       0       0
  2715 ;;Total ram usage:       16 bytes
  2716 ;; Hardware stack levels used:    1
  2717 ;; Hardware stack levels required when called:    4
  2718 ;; This function calls:
  2719 ;;		Nothing
  2720 ;; This function is called by:
  2721 ;;		_startTimeCtrl
  2722 ;; This function uses a non-reentrant model
  2723 ;;
  2724                           
  2725                           
  2726                           ;psect for function _getTimeData
  2727  0121                     _getTimeData:	
  2728                           
  2729                           ;time_ctrl.c: 11: uint8_t i, j;
  2730                           ;time_ctrl.c: 12: uint8_t cnt = 0;
  2731                           
  2732                           ;incstack = 0
  2733                           ; Regs used in _getTimeData: [wreg+fsr1l+fsr1h+status,2+status,0]
  2734  0121  01F2               	clrf	getTimeData@cnt
  2735                           
  2736                           ;time_ctrl.c: 13: for(i=0; i<8; i++)
  2737  0122  01F3               	clrf	getTimeData@i
  2738  0123                     L3:	
  2739  0123  3008               	movlw	8
  2740  0124  0273               	subwf	getTimeData@i,w
  2741  0125  1803               	btfsc	3,0
  2742  0126  0008               	return
  2743                           
  2744                           ;time_ctrl.c: 14: {
  2745                           ;time_ctrl.c: 15: for(j=0; j<4; j++)
  2746  0127  01F4               	clrf	getTimeData@j
  2747  0128  3004               	movlw	4
  2748  0129  0274               	subwf	getTimeData@j,w
  2749  012A  1803               	btfsc	3,0
  2750  012B  298D               	goto	l1033
  2751  012C                     l1025:	
  2752                           
  2753                           ;time_ctrl.c: 16: {
  2754                           ;time_ctrl.c: 17: timeCtrlValue[i][j] = eusartRxBuffer[cnt+5];
  2755  012C  0872               	movf	getTimeData@cnt,w
  2756  012D  3E05               	addlw	5
  2757  012E  3E20               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  2758  012F  0086               	movwf	6
  2759  0130  3001               	movlw	1	; select bank2/3
  2760  0131  0087               	movwf	7
  2761  0132  0801               	movf	1,w
  2762  0133  0020               	movlb	0	; select bank0
  2763  0134  00BE               	movwf	??_getTimeData
  2764  0135  01BF               	clrf	??_getTimeData+1
  2765  0136  0873               	movf	getTimeData@i,w
  2766  0137  00C0               	movwf	??_getTimeData+2
  2767  0138  3003               	movlw	3
  2768  0139                     u425:	
  2769  0139  35C0               	lslf	??_getTimeData+2,f
  2770  013A  0B89               	decfsz	9,f
  2771  013B  2939               	goto	u425
  2772  013C  30A0               	movlw	(low (_timeCtrlValue| 0))& (0+255)
  2773  013D  0740               	addwf	??_getTimeData+2,w
  2774  013E  00C1               	movwf	??_getTimeData+3
  2775  013F  3574               	lslf	getTimeData@j,w
  2776  0140  0741               	addwf	??_getTimeData+3,w
  2777  0141  00C2               	movwf	??_getTimeData+4
  2778  0142  0842               	movf	??_getTimeData+4,w
  2779  0143  0086               	movwf	6
  2780  0144  0187               	clrf	7
  2781  0145  083E               	movf	??_getTimeData,w
  2782  0146  3FC0               	movwi [0]fsr1
  2783  0147  083F               	movf	??_getTimeData+1,w
  2784  0148  3FC1               	movwi [1]fsr1
  2785                           
  2786                           ;time_ctrl.c: 18: timeCtrlValue[i][j] = (timeCtrlValue[i][j] << 8)
  2787                           ;time_ctrl.c: 19: | eusartRxBuffer[cnt+6];
  2788  0149  0872               	movf	getTimeData@cnt,w
  2789  014A  3E06               	addlw	6
  2790  014B  3E20               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  2791  014C  0086               	movwf	6
  2792  014D  3001               	movlw	1	; select bank2/3
  2793  014E  0087               	movwf	7
  2794  014F  0801               	movf	1,w
  2795  0150  00BE               	movwf	??_getTimeData
  2796  0151  01BF               	clrf	??_getTimeData+1
  2797  0152  0873               	movf	getTimeData@i,w
  2798  0153  00C0               	movwf	??_getTimeData+2
  2799  0154  3003               	movlw	3
  2800  0155                     u435:	
  2801  0155  35C0               	lslf	??_getTimeData+2,f
  2802  0156  0B89               	decfsz	9,f
  2803  0157  2955               	goto	u435
  2804  0158  30A0               	movlw	(low (_timeCtrlValue| 0))& (0+255)
  2805  0159  0740               	addwf	??_getTimeData+2,w
  2806  015A  00C1               	movwf	??_getTimeData+3
  2807  015B  3574               	lslf	getTimeData@j,w
  2808  015C  0741               	addwf	??_getTimeData+3,w
  2809  015D  00C2               	movwf	??_getTimeData+4
  2810  015E  0842               	movf	??_getTimeData+4,w
  2811  015F  0086               	movwf	6
  2812  0160  0187               	clrf	7
  2813  0161  3F40               	moviw [0]fsr1
  2814  0162  00C3               	movwf	??_getTimeData+5
  2815  0163  3F41               	moviw [1]fsr1
  2816  0164  00C4               	movwf	??_getTimeData+6
  2817  0165  0843               	movf	??_getTimeData+5,w
  2818  0166  00C4               	movwf	??_getTimeData+6
  2819  0167  01C3               	clrf	??_getTimeData+5
  2820  0168  083E               	movf	??_getTimeData,w
  2821  0169  0443               	iorwf	??_getTimeData+5,w
  2822  016A  00C6               	movwf	??_getTimeData+8
  2823  016B  083F               	movf	??_getTimeData+1,w
  2824  016C  0444               	iorwf	??_getTimeData+6,w
  2825  016D  00C7               	movwf	??_getTimeData+9
  2826  016E  0873               	movf	getTimeData@i,w
  2827  016F  00C8               	movwf	??_getTimeData+10
  2828  0170  3003               	movlw	3
  2829  0171                     u445:	
  2830  0171  35C8               	lslf	??_getTimeData+10,f
  2831  0172  0B89               	decfsz	9,f
  2832  0173  2971               	goto	u445
  2833  0174  30A0               	movlw	(low (_timeCtrlValue| 0))& (0+255)
  2834  0175  0748               	addwf	??_getTimeData+10,w
  2835  0176  00C9               	movwf	??_getTimeData+11
  2836  0177  3574               	lslf	getTimeData@j,w
  2837  0178  0749               	addwf	??_getTimeData+11,w
  2838  0179  00CA               	movwf	??_getTimeData+12
  2839  017A  084A               	movf	??_getTimeData+12,w
  2840  017B  0086               	movwf	6
  2841  017C  0187               	clrf	7
  2842  017D  0846               	movf	??_getTimeData+8,w
  2843  017E  3FC0               	movwi [0]fsr1
  2844  017F  0847               	movf	??_getTimeData+9,w
  2845  0180  3FC1               	movwi [1]fsr1
  2846                           
  2847                           ;time_ctrl.c: 20: cnt += 2;
  2848  0181  3002               	movlw	2
  2849  0182  00BE               	movwf	??_getTimeData
  2850  0183  083E               	movf	??_getTimeData,w
  2851  0184  07F2               	addwf	getTimeData@cnt,f
  2852  0185  3001               	movlw	1
  2853  0186  00BE               	movwf	??_getTimeData
  2854  0187  083E               	movf	??_getTimeData,w
  2855  0188  07F4               	addwf	getTimeData@j,f
  2856  0189  3004               	movlw	4
  2857  018A  0274               	subwf	getTimeData@j,w
  2858  018B  1C03               	skipc
  2859  018C  292C               	goto	l1025
  2860  018D                     l1033:	
  2861  018D  3001               	movlw	1
  2862  018E  0020               	movlb	0	; select bank0
  2863  018F  00BE               	movwf	??_getTimeData
  2864  0190  083E               	movf	??_getTimeData,w
  2865  0191  07F3               	addwf	getTimeData@i,f
  2866  0192  2923               	goto	L3
  2867  0193                     __end_of_getTimeData:	
  2868                           
  2869                           	psect	text14
  2870  029C                     __ptext14:	
  2871 ;; *************** function _Get_Device_Addr *****************
  2872 ;; Defined at:
  2873 ;;		line 75 in file "mcc_generated_files/mcc.c"
  2874 ;; Parameters:    Size  Location     Type
  2875 ;;		None
  2876 ;; Auto vars:     Size  Location     Type
  2877 ;;  device_addr     1    3[COMMON] unsigned char 
  2878 ;; Return value:  Size  Location     Type
  2879 ;;                  1    wreg      unsigned char 
  2880 ;; Registers used:
  2881 ;;		wreg, status,2, status,0
  2882 ;; Tracked objects:
  2883 ;;		On entry : 0/0
  2884 ;;		On exit  : 0/0
  2885 ;;		Unchanged: 0/0
  2886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2887 ;;      Params:         0       0       0       0
  2888 ;;      Locals:         1       0       0       0
  2889 ;;      Temps:          1       0       0       0
  2890 ;;      Totals:         2       0       0       0
  2891 ;;Total ram usage:        2 bytes
  2892 ;; Hardware stack levels used:    1
  2893 ;; Hardware stack levels required when called:    4
  2894 ;; This function calls:
  2895 ;;		Nothing
  2896 ;; This function is called by:
  2897 ;;		_EUSART_Deal
  2898 ;; This function uses a non-reentrant model
  2899 ;;
  2900                           
  2901                           
  2902                           ;psect for function _Get_Device_Addr
  2903  029C                     _Get_Device_Addr:	
  2904                           
  2905                           ;mcc.c: 77: unsigned char device_addr;
  2906                           ;mcc.c: 79: device_addr = PORTBbits.RB4;
  2907                           
  2908                           ;incstack = 0
  2909                           ; Regs used in _Get_Device_Addr: [wreg+status,2+status,0]
  2910  029C  3000               	movlw	0
  2911  029D  0020               	movlb	0	; select bank0
  2912  029E  1A0D               	btfsc	13,4	;volatile
  2913  029F  3001               	movlw	1
  2914  02A0  00F3               	movwf	Get_Device_Addr@device_addr
  2915                           
  2916                           ;mcc.c: 80: device_addr |= PORTBbits.RB6 << 1;
  2917  02A1  0E0D               	swapf	13,w	;volatile
  2918  02A2  0C89               	rrf	9,f
  2919  02A3  0C89               	rrf	9,f
  2920  02A4  3901               	andlw	1
  2921  02A5  0709               	addwf	9,w
  2922  02A6  00F2               	movwf	??_Get_Device_Addr
  2923  02A7  0872               	movf	??_Get_Device_Addr,w
  2924  02A8  04F3               	iorwf	Get_Device_Addr@device_addr,f
  2925                           
  2926                           ;mcc.c: 82: return device_addr;
  2927  02A9  0873               	movf	Get_Device_Addr@device_addr,w
  2928  02AA  0008               	return
  2929  02AB                     __end_of_Get_Device_Addr:	
  2930                           
  2931                           	psect	intentry
  2932  0004                     __pintentry:	
  2933 ;; *************** function _INTERRUPT_InterruptManager *****************
  2934 ;; Defined at:
  2935 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  2936 ;; Parameters:    Size  Location     Type
  2937 ;;		None
  2938 ;; Auto vars:     Size  Location     Type
  2939 ;;		None
  2940 ;; Return value:  Size  Location     Type
  2941 ;;                  1    wreg      void 
  2942 ;; Registers used:
  2943 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2944 ;; Tracked objects:
  2945 ;;		On entry : 0/0
  2946 ;;		On exit  : 0/0
  2947 ;;		Unchanged: 0/0
  2948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2949 ;;      Params:         0       0       0       0
  2950 ;;      Locals:         0       0       0       0
  2951 ;;      Temps:          1       0       0       0
  2952 ;;      Totals:         1       0       0       0
  2953 ;;Total ram usage:        1 bytes
  2954 ;; Hardware stack levels used:    1
  2955 ;; Hardware stack levels required when called:    3
  2956 ;; This function calls:
  2957 ;;		Absolute function
  2958 ;;		_EUSART_Receive_ISR
  2959 ;;		_TMR0_ISR
  2960 ;; This function is called by:
  2961 ;;		Interrupt level 1
  2962 ;; This function uses a non-reentrant model
  2963 ;;
  2964                           
  2965  0004                     _INTERRUPT_InterruptManager:	
  2966                           
  2967                           ;incstack = 0
  2968  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  2969                           
  2970                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  2971  0005  3180               	pagesel	$
  2972  0006  0020               	movlb	0	; select bank0
  2973  0007  087F               	movf	127,w
  2974  0008  00F1               	movwf	??_INTERRUPT_InterruptManager
  2975                           
  2976                           ;interrupt_manager.c: 55: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  2977  0009  1A8B               	btfsc	11,5	;volatile
  2978  000A  1D0B               	btfss	11,2	;volatile
  2979  000B  2810               	goto	i1l89
  2980                           
  2981                           ;interrupt_manager.c: 56: {
  2982                           ;interrupt_manager.c: 57: TMR0_ISR();
  2983  000C  3182  22C1  3180   	fcall	_TMR0_ISR
  2984                           
  2985                           ;interrupt_manager.c: 58: }
  2986  000F  2822               	goto	i1l97
  2987  0010                     i1l89:	
  2988                           
  2989                           ;interrupt_manager.c: 59: else if(INTCONbits.PEIE == 1)
  2990  0010  1F0B               	btfss	11,6	;volatile
  2991  0011  2822               	goto	i1l97
  2992                           
  2993                           ;interrupt_manager.c: 60: {
  2994                           ;interrupt_manager.c: 61: if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
  2995  0012  0021               	movlb	1	; select bank1
  2996  0013  1A11               	btfsc	17,4	;volatile
  2997  0014  0020               	movlb	0	; select bank0
  2998  0015  1A11               	btfsc	17,4	;volatile
  2999  0016  2822               	goto	i1l97
  3000                           
  3001                           ;interrupt_manager.c: 65: else if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
  3002                           
  3003                           ;interrupt_manager.c: 62: {
  3004                           ;interrupt_manager.c: 64: }
  3005  0017  0021               	movlb	1	; select bank1
  3006  0018  1E91               	btfss	17,5	;volatile
  3007  0019  2822               	goto	i1l97
  3008  001A  0020               	movlb	0	; select bank0
  3009  001B  1E91               	btfss	17,5	;volatile
  3010  001C  2822               	goto	i1l97
  3011                           
  3012                           ;interrupt_manager.c: 66: {
  3013                           ;interrupt_manager.c: 67: EUSART_RxDefaultInterruptHandler();
  3014  001D  0856               	movf	_EUSART_RxDefaultInterruptHandler+1,w
  3015  001E  008A               	movwf	10
  3016  001F  0855               	movf	_EUSART_RxDefaultInterruptHandler,w
  3017  0020  000A               	callw
  3018  0021  3180               	pagesel	$
  3019  0022                     i1l97:	
  3020                           ;interrupt_manager.c: 74: else
  3021                           ;interrupt_manager.c: 75: {
  3022                           
  3023                           ;interrupt_manager.c: 72: }
  3024                           ;interrupt_manager.c: 73: }
  3025                           
  3026                           ;interrupt_manager.c: 69: else
  3027                           ;interrupt_manager.c: 70: {
  3028                           
  3029                           ;interrupt_manager.c: 68: }
  3030                           
  3031  0022  0871               	movf	??_INTERRUPT_InterruptManager,w
  3032  0023  0020               	movlb	0	; select bank0
  3033  0024  00FF               	movwf	127
  3034  0025  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  3035  0026  0009               	retfie
  3036  0027                     __end_of_INTERRUPT_InterruptManager:	
  3037                           
  3038                           	psect	text16
  3039  02C1                     __ptext16:	
  3040 ;; *************** function _TMR0_ISR *****************
  3041 ;; Defined at:
  3042 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  3043 ;; Parameters:    Size  Location     Type
  3044 ;;		None
  3045 ;; Auto vars:     Size  Location     Type
  3046 ;;		None
  3047 ;; Return value:  Size  Location     Type
  3048 ;;                  1    wreg      void 
  3049 ;; Registers used:
  3050 ;;		wreg, status,2, status,0, pclath, cstack
  3051 ;; Tracked objects:
  3052 ;;		On entry : 0/0
  3053 ;;		On exit  : 0/0
  3054 ;;		Unchanged: 0/0
  3055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3056 ;;      Params:         0       0       0       0
  3057 ;;      Locals:         0       0       0       0
  3058 ;;      Temps:          0       0       0       0
  3059 ;;      Totals:         0       0       0       0
  3060 ;;Total ram usage:        0 bytes
  3061 ;; Hardware stack levels used:    1
  3062 ;; Hardware stack levels required when called:    2
  3063 ;; This function calls:
  3064 ;;		_TMR0_CallBack
  3065 ;; This function is called by:
  3066 ;;		_INTERRUPT_InterruptManager
  3067 ;; This function uses a non-reentrant model
  3068 ;;
  3069                           
  3070                           
  3071                           ;psect for function _TMR0_ISR
  3072  02C1                     _TMR0_ISR:	
  3073                           
  3074                           ;tmr0.c: 112: INTCONbits.TMR0IF = 0;
  3075                           
  3076                           ;incstack = 0
  3077                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  3078  02C1  110B               	bcf	11,2	;volatile
  3079                           
  3080                           ;tmr0.c: 114: TMR0 = timer0ReloadVal;
  3081  02C2  0020               	movlb	0	; select bank0
  3082  02C3  0857               	movf	_timer0ReloadVal,w	;volatile
  3083  02C4  0095               	movwf	21	;volatile
  3084                           
  3085                           ;tmr0.c: 118: TMR0_CallBack();
  3086  02C5  3181  2193         	fcall	_TMR0_CallBack
  3087  02C7  0008               	return
  3088  02C8                     __end_of_TMR0_ISR:	
  3089                           
  3090                           	psect	text17
  3091  0193                     __ptext17:	
  3092 ;; *************** function _TMR0_CallBack *****************
  3093 ;; Defined at:
  3094 ;;		line 123 in file "mcc_generated_files/tmr0.c"
  3095 ;; Parameters:    Size  Location     Type
  3096 ;;		None
  3097 ;; Auto vars:     Size  Location     Type
  3098 ;;		None
  3099 ;; Return value:  Size  Location     Type
  3100 ;;                  1    wreg      void 
  3101 ;; Registers used:
  3102 ;;		wreg, status,2, status,0, pclath, cstack
  3103 ;; Tracked objects:
  3104 ;;		On entry : 0/0
  3105 ;;		On exit  : 0/0
  3106 ;;		Unchanged: 0/0
  3107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3108 ;;      Params:         0       0       0       0
  3109 ;;      Locals:         0       0       0       0
  3110 ;;      Temps:          1       0       0       0
  3111 ;;      Totals:         1       0       0       0
  3112 ;;Total ram usage:        1 bytes
  3113 ;; Hardware stack levels used:    1
  3114 ;; Hardware stack levels required when called:    1
  3115 ;; This function calls:
  3116 ;;		Absolute function
  3117 ;;		_TMR0_DefaultInterruptHandler
  3118 ;; This function is called by:
  3119 ;;		_TMR0_ISR
  3120 ;; This function uses a non-reentrant model
  3121 ;;
  3122                           
  3123                           
  3124                           ;psect for function _TMR0_CallBack
  3125  0193                     _TMR0_CallBack:	
  3126                           
  3127                           ;tmr0.c: 126: static uint8_t eusartRXOvertimeCnt = 0;
  3128                           ;tmr0.c: 127: static uint8_t timeCrlCnt = 0;
  3129                           ;tmr0.c: 128: static uint8_t preEusartRxCount = 0;
  3130                           ;tmr0.c: 130: if(timeCtrlStartFlag)
  3131                           
  3132                           ;incstack = 0
  3133                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
  3134  0193  087A               	movf	_timeCtrlStartFlag,w
  3135  0194  1903               	btfsc	3,2
  3136  0195  29A2               	goto	i1l1117
  3137                           
  3138                           ;tmr0.c: 131: {
  3139                           ;tmr0.c: 132: if(++timeCrlCnt >= 10)
  3140  0196  3001               	movlw	1
  3141  0197  00F0               	movwf	??_TMR0_CallBack
  3142  0198  0870               	movf	??_TMR0_CallBack,w
  3143  0199  0020               	movlb	0	; select bank0
  3144  019A  07BB               	addwf	TMR0_CallBack@timeCrlCnt,f
  3145  019B  300A               	movlw	10
  3146  019C  023B               	subwf	TMR0_CallBack@timeCrlCnt,w
  3147  019D  1C03               	skipc
  3148  019E  29A2               	goto	i1l1117
  3149                           
  3150                           ;tmr0.c: 133: {
  3151                           ;tmr0.c: 134: timeCrlCnt = 0;
  3152  019F  01BB               	clrf	TMR0_CallBack@timeCrlCnt
  3153                           
  3154                           ;tmr0.c: 135: timeCtrlOvertimeMask = 1;
  3155  01A0  01F9               	clrf	_timeCtrlOvertimeMask
  3156  01A1  0AF9               	incf	_timeCtrlOvertimeMask,f
  3157  01A2                     i1l1117:	
  3158                           
  3159                           ;tmr0.c: 136: }
  3160                           ;tmr0.c: 137: }
  3161                           ;tmr0.c: 140: if(eusartRxCount != preEusartRxCount)
  3162  01A2  0878               	movf	_eusartRxCount,w
  3163  01A3  0020               	movlb	0	; select bank0
  3164  01A4  063A               	xorwf	TMR0_CallBack@preEusartRxCount,w
  3165  01A5  1903               	skipnz
  3166  01A6  29AD               	goto	i1l1123
  3167                           
  3168                           ;tmr0.c: 141: {
  3169                           ;tmr0.c: 142: preEusartRxCount = eusartRxCount;
  3170  01A7  0878               	movf	_eusartRxCount,w
  3171  01A8  00F0               	movwf	??_TMR0_CallBack
  3172  01A9  0870               	movf	??_TMR0_CallBack,w
  3173  01AA  00BA               	movwf	TMR0_CallBack@preEusartRxCount
  3174                           
  3175                           ;tmr0.c: 143: eusartRXOvertimeCnt = 0;
  3176  01AB  01BC               	clrf	TMR0_CallBack@eusartRXOvertimeCnt
  3177                           
  3178                           ;tmr0.c: 144: }
  3179  01AC  29C1               	goto	i1l1137
  3180  01AD                     i1l1123:	
  3181                           
  3182                           ;tmr0.c: 145: else
  3183                           ;tmr0.c: 146: {
  3184                           ;tmr0.c: 147: if(eusartRxCount != 0)
  3185  01AD  0878               	movf	_eusartRxCount,w
  3186  01AE  1903               	btfsc	3,2
  3187  01AF  29C1               	goto	i1l1137
  3188                           
  3189                           ;tmr0.c: 148: {
  3190                           ;tmr0.c: 149: if(++eusartRXOvertimeCnt >= 20)
  3191  01B0  3001               	movlw	1
  3192  01B1  00F0               	movwf	??_TMR0_CallBack
  3193  01B2  0870               	movf	??_TMR0_CallBack,w
  3194  01B3  07BC               	addwf	TMR0_CallBack@eusartRXOvertimeCnt,f
  3195  01B4  3014               	movlw	20
  3196  01B5  023C               	subwf	TMR0_CallBack@eusartRXOvertimeCnt,w
  3197  01B6  1C03               	skipc
  3198  01B7  29C1               	goto	i1l1137
  3199                           
  3200                           ;tmr0.c: 150: {
  3201                           ;tmr0.c: 151: eusartRXOvertimeCnt = 0;
  3202  01B8  01BC               	clrf	TMR0_CallBack@eusartRXOvertimeCnt
  3203                           
  3204                           ;tmr0.c: 152: EusartRxLenth = eusartRxCount;
  3205  01B9  0878               	movf	_eusartRxCount,w
  3206  01BA  00F0               	movwf	??_TMR0_CallBack
  3207  01BB  0870               	movf	??_TMR0_CallBack,w
  3208  01BC  00F7               	movwf	_EusartRxLenth
  3209                           
  3210                           ;tmr0.c: 153: preEusartRxCount = 0;
  3211  01BD  01BA               	clrf	TMR0_CallBack@preEusartRxCount
  3212                           
  3213                           ;tmr0.c: 154: eusartRxCount = 0;
  3214  01BE  01F8               	clrf	_eusartRxCount
  3215                           
  3216                           ;tmr0.c: 155: eusartRxOvertimeMask = 1;
  3217  01BF  01BD               	clrf	_eusartRxOvertimeMask
  3218  01C0  0ABD               	incf	_eusartRxOvertimeMask,f
  3219  01C1                     i1l1137:	
  3220                           
  3221                           ;tmr0.c: 156: }
  3222                           ;tmr0.c: 157: }
  3223                           ;tmr0.c: 158: }
  3224                           ;tmr0.c: 160: if(TMR0_InterruptHandler)
  3225  01C1  0853               	movf	_TMR0_InterruptHandler,w
  3226  01C2  0454               	iorwf	_TMR0_InterruptHandler+1,w
  3227  01C3  1903               	btfsc	3,2
  3228  01C4  0008               	return
  3229                           
  3230                           ;tmr0.c: 161: {
  3231                           ;tmr0.c: 162: TMR0_InterruptHandler();
  3232  01C5  0854               	movf	_TMR0_InterruptHandler+1,w
  3233  01C6  008A               	movwf	10
  3234  01C7  0853               	movf	_TMR0_InterruptHandler,w
  3235  01C8  000A               	callw
  3236  01C9  3181               	pagesel	$
  3237  01CA  0008               	return
  3238  01CB                     __end_of_TMR0_CallBack:	
  3239                           
  3240                           	psect	text18
  3241  02E4                     __ptext18:	
  3242 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  3243 ;; Defined at:
  3244 ;;		line 170 in file "mcc_generated_files/tmr0.c"
  3245 ;; Parameters:    Size  Location     Type
  3246 ;;		None
  3247 ;; Auto vars:     Size  Location     Type
  3248 ;;		None
  3249 ;; Return value:  Size  Location     Type
  3250 ;;                  1    wreg      void 
  3251 ;; Registers used:
  3252 ;;		None
  3253 ;; Tracked objects:
  3254 ;;		On entry : 0/0
  3255 ;;		On exit  : 0/0
  3256 ;;		Unchanged: 0/0
  3257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3258 ;;      Params:         0       0       0       0
  3259 ;;      Locals:         0       0       0       0
  3260 ;;      Temps:          0       0       0       0
  3261 ;;      Totals:         0       0       0       0
  3262 ;;Total ram usage:        0 bytes
  3263 ;; Hardware stack levels used:    1
  3264 ;; This function calls:
  3265 ;;		Nothing
  3266 ;; This function is called by:
  3267 ;;		_TMR0_Initialize
  3268 ;;		_TMR0_CallBack
  3269 ;; This function uses a non-reentrant model
  3270 ;;
  3271                           
  3272                           
  3273                           ;psect for function _TMR0_DefaultInterruptHandler
  3274  02E4                     _TMR0_DefaultInterruptHandler:	
  3275                           
  3276                           ;incstack = 0
  3277                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  3278  02E4  0008               	return
  3279  02E5                     __end_of_TMR0_DefaultInterruptHandler:	
  3280                           
  3281                           	psect	text19
  3282  027A                     __ptext19:	
  3283 ;; *************** function _EUSART_Receive_ISR *****************
  3284 ;; Defined at:
  3285 ;;		line 199 in file "mcc_generated_files/eusart.c"
  3286 ;; Parameters:    Size  Location     Type
  3287 ;;		None
  3288 ;; Auto vars:     Size  Location     Type
  3289 ;;		None
  3290 ;; Return value:  Size  Location     Type
  3291 ;;                  1    wreg      void 
  3292 ;; Registers used:
  3293 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3294 ;; Tracked objects:
  3295 ;;		On entry : 0/0
  3296 ;;		On exit  : 0/0
  3297 ;;		Unchanged: 0/0
  3298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3299 ;;      Params:         0       0       0       0
  3300 ;;      Locals:         0       0       0       0
  3301 ;;      Temps:          1       0       0       0
  3302 ;;      Totals:         1       0       0       0
  3303 ;;Total ram usage:        1 bytes
  3304 ;; Hardware stack levels used:    1
  3305 ;; This function calls:
  3306 ;;		Nothing
  3307 ;; This function is called by:
  3308 ;;		_EUSART_Initialize
  3309 ;;		_INTERRUPT_InterruptManager
  3310 ;; This function uses a non-reentrant model
  3311 ;;
  3312                           
  3313                           
  3314                           ;psect for function _EUSART_Receive_ISR
  3315  027A                     _EUSART_Receive_ISR:	
  3316                           
  3317                           ;eusart.c: 201: if(1 == RCSTAbits.OERR)
  3318                           
  3319                           ;incstack = 0
  3320                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  3321  027A  0023               	movlb	3	; select bank3
  3322  027B  1C9D               	btfss	29,1	;volatile
  3323  027C  2A7F               	goto	i1l1175
  3324                           
  3325                           ;eusart.c: 202: {
  3326                           ;eusart.c: 205: RCSTAbits.CREN = 0;
  3327  027D  121D               	bcf	29,4	;volatile
  3328                           
  3329                           ;eusart.c: 206: RCSTAbits.CREN = 1;
  3330  027E  161D               	bsf	29,4	;volatile
  3331  027F                     i1l1175:	
  3332                           
  3333                           ;eusart.c: 207: }
  3334                           ;eusart.c: 216: eusartRxBuffer[eusartRxCount++] = RCREG;
  3335  027F  0819               	movf	25,w	;volatile
  3336  0280  00F0               	movwf	??_EUSART_Receive_ISR
  3337  0281  0878               	movf	_eusartRxCount,w
  3338  0282  3E20               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  3339  0283  0086               	movwf	6
  3340  0284  3001               	movlw	1	; select bank2/3
  3341  0285  0087               	movwf	7
  3342  0286  0870               	movf	??_EUSART_Receive_ISR,w
  3343  0287  0081               	movwf	1
  3344  0288  3001               	movlw	1
  3345  0289  00F0               	movwf	??_EUSART_Receive_ISR
  3346  028A  0870               	movf	??_EUSART_Receive_ISR,w
  3347  028B  07F8               	addwf	_eusartRxCount,f
  3348  028C  0008               	return
  3349  028D                     __end_of_EUSART_Receive_ISR:	
  3350  007E                     btemp	set	126	;btemp
  3351  007E                     int$flags	set	126
  3352  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         173
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80     13      56
    BANK1            80      0      64
    BANK2            80      0      75

Pointer List with Targets:

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), Absolute function(), 


Critical Paths under _main in COMMON

    _main->_EUSART_Deal
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Deal->_stopTimeCtrl
    _startTimeCtrl->_getTimeData

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART_Receive_ISR
    _TMR0_ISR->_TMR0_CallBack

Critical Paths under _main in BANK0

    _startTimeCtrl->_getTimeData

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1042
                        _EUSART_Deal
                  _SYSTEM_Initialize
                    _tempCtrlProcess
 ---------------------------------------------------------------------------------
 (1) _tempCtrlProcess                                      3     3      0     486
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     150
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0      75
                                              4 COMMON     1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2      75
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0      75
       _EUSART_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      75
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _EUSART_Deal                                          2     2      0     406
                                              5 COMMON     2     2      0
                    _Get_Device_Addr
                      _startTimeCtrl
                       _stopTimeCtrl
 ---------------------------------------------------------------------------------
 (2) _stopTimeCtrl                                         3     3      0     112
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _startTimeCtrl                                        0     0      0     270
                        _getTimeData
 ---------------------------------------------------------------------------------
 (3) _getTimeData                                         16    16      0     270
                                              2 COMMON     3     3      0
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (2) _Get_Device_Addr                                      2     2      0      24
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           1     1      0       0
                                              1 COMMON     1     1      0
                   Absolute function *
                 _EUSART_Receive_ISR *
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR0_ISR                                             0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (6) _TMR0_CallBack                                        1     1      0       0
                                              0 COMMON     1     1      0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Deal
     _Get_Device_Addr
     _startTimeCtrl
       _getTimeData
     _stopTimeCtrl
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetRxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _WDT_Initialize
   _tempCtrlProcess

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
   _TMR0_ISR *
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      CE       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      D      38       6       70.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      40       8       80.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      4B      10       93.8%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      CE      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Jun 15 12:56:15 2018

               ?_EUSART_SetRxInterruptHandler 0072                              ?_tempCtrlProcess 0070  
                                 __CFG_CP$OFF 0000                               _timer0ReloadVal 0057  
                                 __CFG_LVP$ON 0000                                           l258 00D7  
                                         u425 0139                                  __CFG_CPD$OFF 0000  
                                         u435 0155                                           u445 0171  
                                         u544 0210                                           u545 020F  
                                         u714 00F0                                           u715 00EF  
                                         u734 0103                                           u735 0102  
                                         u655 0069                                           u665 007D  
                                         u675 0092                                           u685 00A7  
                                __CFG_BORV$LO 0000                                           wreg 0009  
                                __CFG_IESO$ON 0000                                  ?_EUSART_Deal 0070  
                                        l1033 018D                                          l1025 012C  
                                        l1211 00A4                                          l1205 0066  
                                        l1223 00F8                                          l1231 011C  
                                        l1207 007A                                          l1215 00B9  
                                        l1209 008F                                          l1217 00CB  
                                        l1227 010B                                          l1191 01EE  
                                        l1263 025D                                          l1257 0255  
                                        _LATA 010C                                          _LATB 010D  
                                        _LATC 010E                                          i1l97 0022  
                                        i1l89 0010                                          _TMR0 0015  
                                        _WPUA 020C                                          _WPUB 020D  
                                        _WPUC 020E                                  __CFG_WRT$OFF 0000  
                               __CFG_FCMEN$ON 0000                         __size_of_stopTimeCtrl 0026  
                                        _main 0250                                          fsr0h 0005  
                                        fsr1h 0007                                          indf0 0000  
                                        fsr0l 0004                                          indf1 0001  
                                        fsr1l 0006                                          btemp 007E  
                               __CFG_BOREN$ON 0000                                          start 0027  
                               __CFG_MCLRE$ON 0000                                 _startTimeCtrl 02BA  
                     __end_of_TMR0_Initialize 027A                                 __CFG_PLLEN$ON 0000  
              ??_TMR0_DefaultInterruptHandler 0070                    Get_Device_Addr@device_addr 0073  
              __size_of_OSCILLATOR_Initialize 0007                 __end_of_OSCILLATOR_Initialize 02BA  
                                       ?_main 0070                                 __CFG_WDTE$OFF 0000  
                                       _RCREG 0199                                         _RCSTA 019D  
                                       _TRISA 008C                                         _TRISB 008D  
                                       _TRISC 008E                                         _TXSTA 019E  
           __size_of_TMR0_SetInterruptHandler 0006                     ?_TMR0_SetInterruptHandler 0072  
                                _stopTimeCtrl 01F6                              __end_of_TMR0_ISR 02C8  
                              _WDT_Initialize 02E0                                         pclath 000A  
                                       status 0003                                         wtemp0 007E  
                           ??_Get_Device_Addr 0072                               __initialization 0029  
                              ?_startTimeCtrl 0070                                  __end_of_main 0265  
                 ?_INTERRUPT_InterruptManager 0070                ??_EUSART_SetRxInterruptHandler 0074  
                                      ??_main 0077                        __end_of_WDT_Initialize 02E4  
                                      _ANSELA 018C                                        _ANSELB 018D  
                                      _ANSELC 018E                          __size_of_getTimeData 0072  
                                      _BORCON 0116                                        i1l1123 01AD  
                                      i1l1117 01A2                                        i1l1137 01C1  
                                      i1l1175 027F                              tempCtrlProcess@i 0074  
                                      _OSCCON 0099                                        _IQRSta 0030  
                                      _SPBRGH 019C                                        _SPBRGL 019B  
                                      _WDTCON 0097                                 _EusartRxLenth 0077  
                              __CFG_PWRTE$OFF 0000                                __CFG_STVREN$ON 0000  
                            ?_TMR0_Initialize 0070                          _eusartRxOvertimeMask 003D  
                             ?_WDT_Initialize 0070                         __end_of_TMR0_CallBack 01CB  
    TMR0_SetInterruptHandler@InterruptHandler 0072                          __size_of_EUSART_Deal 002B  
                           _SYSTEM_Initialize 028D                       __end_of__initialization 0050  
                          ?_SYSTEM_Initialize 0070                               ??_startTimeCtrl 0075  
                              __pcstackCOMMON 0070                                  __pidataBANK0 02AB  
                         ??_SYSTEM_Initialize 0075                                     ?_TMR0_ISR 0070  
                              _OPTION_REGbits 0095                     __end_of_SYSTEM_Initialize 029C  
                                  __pbssBANK0 0020                                    __pbssBANK1 00A0  
                                  __pbssBANK2 0120                   __size_of_EUSART_Receive_ISR 0013  
                                  __pmaintext 0250              _EUSART_TxDefaultInterruptHandler 0038  
            __end_of_TMR0_SetInterruptHandler 02DA                                    ??_TMR0_ISR 0071  
                                  __pintentry 0004                                       _BAUDCON 019F  
                                     _APFCON0 011D                                       _APFCON1 011E  
                               _eusartRxCount 0078                      __size_of_tempCtrlProcess 00CD  
                                     _OSCTUNE 0098                               _Get_Device_Addr 029C  
               TMR0_CallBack@preEusartRxCount 003A                                       __ptext1 0054  
                                     __ptext2 028D                                       __ptext3 02E0  
                                     __ptext4 0265                                       __ptext5 02D4  
                                     __ptext6 021C                                       __ptext7 02B3  
                                     __ptext8 0237                                       __ptext9 02DA  
                       _OSCILLATOR_Initialize 02B3                      ??_PIN_MANAGER_Initialize 0072  
                  __size_of_SYSTEM_Initialize 000F                                       clrloop0 02CF  
                        end_of_initialization 0050                                       init_ram 02C8  
                                     initloop 02C9                             _EUSART_Initialize 0237  
                          ?_EUSART_Initialize 0070                                     _IQRPreSta 004B  
                                   _RCSTAbits 019D                           ??_EUSART_Initialize 0074  
                            ??_WDT_Initialize 0072                      _TMR0_SetInterruptHandler 02D4  
                                   _PORTBbits 000D                       __end_of_Get_Device_Addr 02AB  
                            __CFG_FOSC$INTOSC 0000                                 ??_getTimeData 003E  
                           ??_tempCtrlProcess 0072                     __end_of_EUSART_Initialize 0250  
                           __size_of_TMR0_ISR 0007                        ?_OSCILLATOR_Initialize 0070  
                         start_initialization 0029                      __size_of_TMR0_Initialize 0015  
             __size_of_PIN_MANAGER_Initialize 001B                                 ??_EUSART_Deal 0075  
EUSART_SetRxInterruptHandler@interruptHandler 0072              TMR0_CallBack@eusartRXOvertimeCnt 003C  
                         __end_of_getTimeData 0193                       TMR0_CallBack@timeCrlCnt 003B  
                       __end_of_startTimeCtrl 02C1                        __size_of_TMR0_CallBack 0038  
                                 __pdataBANK0 004B                        tempCtrlProcess@timeCnt 0020  
                        _timeCtrlOvertimeMask 0079                              ?_Get_Device_Addr 0070  
                                 __pbssCOMMON 0077                                     ___latbits 0001  
                               ?_stopTimeCtrl 0070                                 __pcstackBANK0 003E  
                  __end_of_EUSART_Receive_ISR 028D                    __size_of_EUSART_Initialize 0019  
                         __end_of_EUSART_Deal 01F6              _EUSART_RxDefaultInterruptHandler 0055  
                       _TMR0_InterruptHandler 0053                                     __pnvBANK0 0053  
                      _PIN_MANAGER_Initialize 021C                                 stopTimeCtrl@i 0074  
                ??_INTERRUPT_InterruptManager 0071                                ??_stopTimeCtrl 0072  
                                 _getTimeData 0121                             _timeCtrlStartFlag 007A  
                               _TMR0_CallBack 0193                                _eusartRxBuffer 0120  
                           ??_TMR0_Initialize 0074                                      _LATAbits 010C  
                                   clear_ram0 02CE                                      _PIE1bits 0091  
                               _timeCtrlValue 00A0           __size_of_INTERRUPT_InterruptManager 0023  
                  ??_TMR0_SetInterruptHandler 0074                                      _PIR1bits 0011  
                                    _TMR0_ISR 02C1                               _tempCtrlProcess 0054  
                              getTimeData@cnt 0072                                ?_TMR0_CallBack 0070  
                                 _EUSART_Deal 01CB                       ??_OSCILLATOR_Initialize 0072  
                                    __ptext10 01CB                                      __ptext11 01F6  
                                    __ptext12 02BA                                      __ptext13 0121  
                                    __ptext14 029C                                      __ptext16 02C1  
                                    __ptext17 0193                                      __ptext18 02E4  
                                    __ptext19 027A                                 __size_of_main 0015  
        __end_of_TMR0_DefaultInterruptHandler 02E5         __size_of_TMR0_DefaultInterruptHandler 0001  
                _TMR0_DefaultInterruptHandler 02E4                          __end_of_stopTimeCtrl 021C  
                     __end_of_tempCtrlProcess 0121                                      int$flags 007E  
          __end_of_INTERRUPT_InterruptManager 0027                    _INTERRUPT_InterruptManager 0004  
                                  _INTCONbits 000B                               ??_TMR0_CallBack 0070  
                     __size_of_WDT_Initialize 0004                                      intlevel1 0000  
                     ?_PIN_MANAGER_Initialize 0070                             __CFG_CLKOUTEN$OFF 0000  
        __end_of_EUSART_SetRxInterruptHandler 02E0         __size_of_EUSART_SetRxInterruptHandler 0006  
                _EUSART_SetRxInterruptHandler 02DA                 ?_TMR0_DefaultInterruptHandler 0070  
                                getTimeData@i 0073                                  getTimeData@j 0074  
                          _EUSART_Receive_ISR 027A                                    _OPTION_REG 0095  
                         ?_EUSART_Receive_ISR 0070                               _TMR0_Initialize 0265  
                                ?_getTimeData 0070                        __size_of_startTimeCtrl 0007  
                    __size_of_Get_Device_Addr 000F                __end_of_PIN_MANAGER_Initialize 0237  
                        ??_EUSART_Receive_ISR 0070  
