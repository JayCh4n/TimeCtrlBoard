

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Aug 06 17:58:01 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1828
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	intentry,global,class=CODE,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	dabs	1,0x7E,2
    41  0000                     
    42                           ; Version 1.45
    43                           ; Generated 16/11/2017 GMT
    44                           ; 
    45                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC16F1828 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76  0000                     	;# 
    77  0001                     	;# 
    78  0002                     	;# 
    79  0003                     	;# 
    80  0004                     	;# 
    81  0005                     	;# 
    82  0006                     	;# 
    83  0007                     	;# 
    84  0008                     	;# 
    85  0009                     	;# 
    86  000A                     	;# 
    87  000B                     	;# 
    88  000C                     	;# 
    89  000D                     	;# 
    90  000E                     	;# 
    91  0011                     	;# 
    92  0012                     	;# 
    93  0013                     	;# 
    94  0015                     	;# 
    95  0016                     	;# 
    96  0016                     	;# 
    97  0017                     	;# 
    98  0018                     	;# 
    99  0019                     	;# 
   100  001A                     	;# 
   101  001B                     	;# 
   102  001C                     	;# 
   103  001E                     	;# 
   104  001F                     	;# 
   105  008C                     	;# 
   106  008D                     	;# 
   107  008E                     	;# 
   108  0091                     	;# 
   109  0092                     	;# 
   110  0093                     	;# 
   111  0095                     	;# 
   112  0096                     	;# 
   113  0097                     	;# 
   114  0098                     	;# 
   115  0099                     	;# 
   116  009A                     	;# 
   117  009B                     	;# 
   118  009B                     	;# 
   119  009C                     	;# 
   120  009D                     	;# 
   121  009E                     	;# 
   122  010C                     	;# 
   123  010D                     	;# 
   124  010E                     	;# 
   125  0111                     	;# 
   126  0112                     	;# 
   127  0113                     	;# 
   128  0114                     	;# 
   129  0115                     	;# 
   130  0116                     	;# 
   131  0117                     	;# 
   132  0118                     	;# 
   133  0119                     	;# 
   134  011A                     	;# 
   135  011B                     	;# 
   136  011D                     	;# 
   137  011E                     	;# 
   138  018C                     	;# 
   139  018D                     	;# 
   140  018E                     	;# 
   141  0191                     	;# 
   142  0191                     	;# 
   143  0192                     	;# 
   144  0193                     	;# 
   145  0193                     	;# 
   146  0193                     	;# 
   147  0194                     	;# 
   148  0195                     	;# 
   149  0196                     	;# 
   150  0199                     	;# 
   151  019A                     	;# 
   152  019B                     	;# 
   153  019B                     	;# 
   154  019B                     	;# 
   155  019B                     	;# 
   156  019C                     	;# 
   157  019C                     	;# 
   158  019D                     	;# 
   159  019E                     	;# 
   160  019F                     	;# 
   161  020C                     	;# 
   162  020D                     	;# 
   163  020E                     	;# 
   164  0211                     	;# 
   165  0211                     	;# 
   166  0212                     	;# 
   167  0212                     	;# 
   168  0213                     	;# 
   169  0213                     	;# 
   170  0214                     	;# 
   171  0214                     	;# 
   172  0215                     	;# 
   173  0215                     	;# 
   174  0215                     	;# 
   175  0215                     	;# 
   176  0216                     	;# 
   177  0216                     	;# 
   178  0217                     	;# 
   179  0217                     	;# 
   180  0291                     	;# 
   181  0291                     	;# 
   182  0292                     	;# 
   183  0293                     	;# 
   184  0294                     	;# 
   185  0295                     	;# 
   186  0295                     	;# 
   187  0296                     	;# 
   188  0298                     	;# 
   189  0298                     	;# 
   190  0299                     	;# 
   191  029A                     	;# 
   192  029B                     	;# 
   193  029C                     	;# 
   194  029D                     	;# 
   195  029E                     	;# 
   196  029E                     	;# 
   197  0311                     	;# 
   198  0311                     	;# 
   199  0312                     	;# 
   200  0313                     	;# 
   201  0318                     	;# 
   202  0318                     	;# 
   203  0319                     	;# 
   204  031A                     	;# 
   205  038C                     	;# 
   206  038D                     	;# 
   207  038E                     	;# 
   208  0391                     	;# 
   209  0392                     	;# 
   210  0393                     	;# 
   211  0394                     	;# 
   212  0395                     	;# 
   213  0396                     	;# 
   214  039A                     	;# 
   215  039C                     	;# 
   216  039D                     	;# 
   217  039E                     	;# 
   218  039F                     	;# 
   219  0415                     	;# 
   220  0416                     	;# 
   221  0417                     	;# 
   222  041C                     	;# 
   223  041D                     	;# 
   224  041E                     	;# 
   225  0FE4                     	;# 
   226  0FE5                     	;# 
   227  0FE6                     	;# 
   228  0FE7                     	;# 
   229  0FE8                     	;# 
   230  0FE9                     	;# 
   231  0FEA                     	;# 
   232  0FEB                     	;# 
   233  0FED                     	;# 
   234  0FEE                     	;# 
   235  0FEF                     	;# 
   236  0000                     	;# 
   237  0001                     	;# 
   238  0002                     	;# 
   239  0003                     	;# 
   240  0004                     	;# 
   241  0005                     	;# 
   242  0006                     	;# 
   243  0007                     	;# 
   244  0008                     	;# 
   245  0009                     	;# 
   246  000A                     	;# 
   247  000B                     	;# 
   248  000C                     	;# 
   249  000D                     	;# 
   250  000E                     	;# 
   251  0011                     	;# 
   252  0012                     	;# 
   253  0013                     	;# 
   254  0015                     	;# 
   255  0016                     	;# 
   256  0016                     	;# 
   257  0017                     	;# 
   258  0018                     	;# 
   259  0019                     	;# 
   260  001A                     	;# 
   261  001B                     	;# 
   262  001C                     	;# 
   263  001E                     	;# 
   264  001F                     	;# 
   265  008C                     	;# 
   266  008D                     	;# 
   267  008E                     	;# 
   268  0091                     	;# 
   269  0092                     	;# 
   270  0093                     	;# 
   271  0095                     	;# 
   272  0096                     	;# 
   273  0097                     	;# 
   274  0098                     	;# 
   275  0099                     	;# 
   276  009A                     	;# 
   277  009B                     	;# 
   278  009B                     	;# 
   279  009C                     	;# 
   280  009D                     	;# 
   281  009E                     	;# 
   282  010C                     	;# 
   283  010D                     	;# 
   284  010E                     	;# 
   285  0111                     	;# 
   286  0112                     	;# 
   287  0113                     	;# 
   288  0114                     	;# 
   289  0115                     	;# 
   290  0116                     	;# 
   291  0117                     	;# 
   292  0118                     	;# 
   293  0119                     	;# 
   294  011A                     	;# 
   295  011B                     	;# 
   296  011D                     	;# 
   297  011E                     	;# 
   298  018C                     	;# 
   299  018D                     	;# 
   300  018E                     	;# 
   301  0191                     	;# 
   302  0191                     	;# 
   303  0192                     	;# 
   304  0193                     	;# 
   305  0193                     	;# 
   306  0193                     	;# 
   307  0194                     	;# 
   308  0195                     	;# 
   309  0196                     	;# 
   310  0199                     	;# 
   311  019A                     	;# 
   312  019B                     	;# 
   313  019B                     	;# 
   314  019B                     	;# 
   315  019B                     	;# 
   316  019C                     	;# 
   317  019C                     	;# 
   318  019D                     	;# 
   319  019E                     	;# 
   320  019F                     	;# 
   321  020C                     	;# 
   322  020D                     	;# 
   323  020E                     	;# 
   324  0211                     	;# 
   325  0211                     	;# 
   326  0212                     	;# 
   327  0212                     	;# 
   328  0213                     	;# 
   329  0213                     	;# 
   330  0214                     	;# 
   331  0214                     	;# 
   332  0215                     	;# 
   333  0215                     	;# 
   334  0215                     	;# 
   335  0215                     	;# 
   336  0216                     	;# 
   337  0216                     	;# 
   338  0217                     	;# 
   339  0217                     	;# 
   340  0291                     	;# 
   341  0291                     	;# 
   342  0292                     	;# 
   343  0293                     	;# 
   344  0294                     	;# 
   345  0295                     	;# 
   346  0295                     	;# 
   347  0296                     	;# 
   348  0298                     	;# 
   349  0298                     	;# 
   350  0299                     	;# 
   351  029A                     	;# 
   352  029B                     	;# 
   353  029C                     	;# 
   354  029D                     	;# 
   355  029E                     	;# 
   356  029E                     	;# 
   357  0311                     	;# 
   358  0311                     	;# 
   359  0312                     	;# 
   360  0313                     	;# 
   361  0318                     	;# 
   362  0318                     	;# 
   363  0319                     	;# 
   364  031A                     	;# 
   365  038C                     	;# 
   366  038D                     	;# 
   367  038E                     	;# 
   368  0391                     	;# 
   369  0392                     	;# 
   370  0393                     	;# 
   371  0394                     	;# 
   372  0395                     	;# 
   373  0396                     	;# 
   374  039A                     	;# 
   375  039C                     	;# 
   376  039D                     	;# 
   377  039E                     	;# 
   378  039F                     	;# 
   379  0415                     	;# 
   380  0416                     	;# 
   381  0417                     	;# 
   382  041C                     	;# 
   383  041D                     	;# 
   384  041E                     	;# 
   385  0FE4                     	;# 
   386  0FE5                     	;# 
   387  0FE6                     	;# 
   388  0FE7                     	;# 
   389  0FE8                     	;# 
   390  0FE9                     	;# 
   391  0FEA                     	;# 
   392  0FEB                     	;# 
   393  0FED                     	;# 
   394  0FEE                     	;# 
   395  0FEF                     	;# 
   396  0000                     	;# 
   397  0001                     	;# 
   398  0002                     	;# 
   399  0003                     	;# 
   400  0004                     	;# 
   401  0005                     	;# 
   402  0006                     	;# 
   403  0007                     	;# 
   404  0008                     	;# 
   405  0009                     	;# 
   406  000A                     	;# 
   407  000B                     	;# 
   408  000C                     	;# 
   409  000D                     	;# 
   410  000E                     	;# 
   411  0011                     	;# 
   412  0012                     	;# 
   413  0013                     	;# 
   414  0015                     	;# 
   415  0016                     	;# 
   416  0016                     	;# 
   417  0017                     	;# 
   418  0018                     	;# 
   419  0019                     	;# 
   420  001A                     	;# 
   421  001B                     	;# 
   422  001C                     	;# 
   423  001E                     	;# 
   424  001F                     	;# 
   425  008C                     	;# 
   426  008D                     	;# 
   427  008E                     	;# 
   428  0091                     	;# 
   429  0092                     	;# 
   430  0093                     	;# 
   431  0095                     	;# 
   432  0096                     	;# 
   433  0097                     	;# 
   434  0098                     	;# 
   435  0099                     	;# 
   436  009A                     	;# 
   437  009B                     	;# 
   438  009B                     	;# 
   439  009C                     	;# 
   440  009D                     	;# 
   441  009E                     	;# 
   442  010C                     	;# 
   443  010D                     	;# 
   444  010E                     	;# 
   445  0111                     	;# 
   446  0112                     	;# 
   447  0113                     	;# 
   448  0114                     	;# 
   449  0115                     	;# 
   450  0116                     	;# 
   451  0117                     	;# 
   452  0118                     	;# 
   453  0119                     	;# 
   454  011A                     	;# 
   455  011B                     	;# 
   456  011D                     	;# 
   457  011E                     	;# 
   458  018C                     	;# 
   459  018D                     	;# 
   460  018E                     	;# 
   461  0191                     	;# 
   462  0191                     	;# 
   463  0192                     	;# 
   464  0193                     	;# 
   465  0193                     	;# 
   466  0193                     	;# 
   467  0194                     	;# 
   468  0195                     	;# 
   469  0196                     	;# 
   470  0199                     	;# 
   471  019A                     	;# 
   472  019B                     	;# 
   473  019B                     	;# 
   474  019B                     	;# 
   475  019B                     	;# 
   476  019C                     	;# 
   477  019C                     	;# 
   478  019D                     	;# 
   479  019E                     	;# 
   480  019F                     	;# 
   481  020C                     	;# 
   482  020D                     	;# 
   483  020E                     	;# 
   484  0211                     	;# 
   485  0211                     	;# 
   486  0212                     	;# 
   487  0212                     	;# 
   488  0213                     	;# 
   489  0213                     	;# 
   490  0214                     	;# 
   491  0214                     	;# 
   492  0215                     	;# 
   493  0215                     	;# 
   494  0215                     	;# 
   495  0215                     	;# 
   496  0216                     	;# 
   497  0216                     	;# 
   498  0217                     	;# 
   499  0217                     	;# 
   500  0291                     	;# 
   501  0291                     	;# 
   502  0292                     	;# 
   503  0293                     	;# 
   504  0294                     	;# 
   505  0295                     	;# 
   506  0295                     	;# 
   507  0296                     	;# 
   508  0298                     	;# 
   509  0298                     	;# 
   510  0299                     	;# 
   511  029A                     	;# 
   512  029B                     	;# 
   513  029C                     	;# 
   514  029D                     	;# 
   515  029E                     	;# 
   516  029E                     	;# 
   517  0311                     	;# 
   518  0311                     	;# 
   519  0312                     	;# 
   520  0313                     	;# 
   521  0318                     	;# 
   522  0318                     	;# 
   523  0319                     	;# 
   524  031A                     	;# 
   525  038C                     	;# 
   526  038D                     	;# 
   527  038E                     	;# 
   528  0391                     	;# 
   529  0392                     	;# 
   530  0393                     	;# 
   531  0394                     	;# 
   532  0395                     	;# 
   533  0396                     	;# 
   534  039A                     	;# 
   535  039C                     	;# 
   536  039D                     	;# 
   537  039E                     	;# 
   538  039F                     	;# 
   539  0415                     	;# 
   540  0416                     	;# 
   541  0417                     	;# 
   542  041C                     	;# 
   543  041D                     	;# 
   544  041E                     	;# 
   545  0FE4                     	;# 
   546  0FE5                     	;# 
   547  0FE6                     	;# 
   548  0FE7                     	;# 
   549  0FE8                     	;# 
   550  0FE9                     	;# 
   551  0FEA                     	;# 
   552  0FEB                     	;# 
   553  0FED                     	;# 
   554  0FEE                     	;# 
   555  0FEF                     	;# 
   556  0000                     	;# 
   557  0001                     	;# 
   558  0002                     	;# 
   559  0003                     	;# 
   560  0004                     	;# 
   561  0005                     	;# 
   562  0006                     	;# 
   563  0007                     	;# 
   564  0008                     	;# 
   565  0009                     	;# 
   566  000A                     	;# 
   567  000B                     	;# 
   568  000C                     	;# 
   569  000D                     	;# 
   570  000E                     	;# 
   571  0011                     	;# 
   572  0012                     	;# 
   573  0013                     	;# 
   574  0015                     	;# 
   575  0016                     	;# 
   576  0016                     	;# 
   577  0017                     	;# 
   578  0018                     	;# 
   579  0019                     	;# 
   580  001A                     	;# 
   581  001B                     	;# 
   582  001C                     	;# 
   583  001E                     	;# 
   584  001F                     	;# 
   585  008C                     	;# 
   586  008D                     	;# 
   587  008E                     	;# 
   588  0091                     	;# 
   589  0092                     	;# 
   590  0093                     	;# 
   591  0095                     	;# 
   592  0096                     	;# 
   593  0097                     	;# 
   594  0098                     	;# 
   595  0099                     	;# 
   596  009A                     	;# 
   597  009B                     	;# 
   598  009B                     	;# 
   599  009C                     	;# 
   600  009D                     	;# 
   601  009E                     	;# 
   602  010C                     	;# 
   603  010D                     	;# 
   604  010E                     	;# 
   605  0111                     	;# 
   606  0112                     	;# 
   607  0113                     	;# 
   608  0114                     	;# 
   609  0115                     	;# 
   610  0116                     	;# 
   611  0117                     	;# 
   612  0118                     	;# 
   613  0119                     	;# 
   614  011A                     	;# 
   615  011B                     	;# 
   616  011D                     	;# 
   617  011E                     	;# 
   618  018C                     	;# 
   619  018D                     	;# 
   620  018E                     	;# 
   621  0191                     	;# 
   622  0191                     	;# 
   623  0192                     	;# 
   624  0193                     	;# 
   625  0193                     	;# 
   626  0193                     	;# 
   627  0194                     	;# 
   628  0195                     	;# 
   629  0196                     	;# 
   630  0199                     	;# 
   631  019A                     	;# 
   632  019B                     	;# 
   633  019B                     	;# 
   634  019B                     	;# 
   635  019B                     	;# 
   636  019C                     	;# 
   637  019C                     	;# 
   638  019D                     	;# 
   639  019E                     	;# 
   640  019F                     	;# 
   641  020C                     	;# 
   642  020D                     	;# 
   643  020E                     	;# 
   644  0211                     	;# 
   645  0211                     	;# 
   646  0212                     	;# 
   647  0212                     	;# 
   648  0213                     	;# 
   649  0213                     	;# 
   650  0214                     	;# 
   651  0214                     	;# 
   652  0215                     	;# 
   653  0215                     	;# 
   654  0215                     	;# 
   655  0215                     	;# 
   656  0216                     	;# 
   657  0216                     	;# 
   658  0217                     	;# 
   659  0217                     	;# 
   660  0291                     	;# 
   661  0291                     	;# 
   662  0292                     	;# 
   663  0293                     	;# 
   664  0294                     	;# 
   665  0295                     	;# 
   666  0295                     	;# 
   667  0296                     	;# 
   668  0298                     	;# 
   669  0298                     	;# 
   670  0299                     	;# 
   671  029A                     	;# 
   672  029B                     	;# 
   673  029C                     	;# 
   674  029D                     	;# 
   675  029E                     	;# 
   676  029E                     	;# 
   677  0311                     	;# 
   678  0311                     	;# 
   679  0312                     	;# 
   680  0313                     	;# 
   681  0318                     	;# 
   682  0318                     	;# 
   683  0319                     	;# 
   684  031A                     	;# 
   685  038C                     	;# 
   686  038D                     	;# 
   687  038E                     	;# 
   688  0391                     	;# 
   689  0392                     	;# 
   690  0393                     	;# 
   691  0394                     	;# 
   692  0395                     	;# 
   693  0396                     	;# 
   694  039A                     	;# 
   695  039C                     	;# 
   696  039D                     	;# 
   697  039E                     	;# 
   698  039F                     	;# 
   699  0415                     	;# 
   700  0416                     	;# 
   701  0417                     	;# 
   702  041C                     	;# 
   703  041D                     	;# 
   704  041E                     	;# 
   705  0FE4                     	;# 
   706  0FE5                     	;# 
   707  0FE6                     	;# 
   708  0FE7                     	;# 
   709  0FE8                     	;# 
   710  0FE9                     	;# 
   711  0FEA                     	;# 
   712  0FEB                     	;# 
   713  0FED                     	;# 
   714  0FEE                     	;# 
   715  0FEF                     	;# 
   716  0000                     	;# 
   717  0001                     	;# 
   718  0002                     	;# 
   719  0003                     	;# 
   720  0004                     	;# 
   721  0005                     	;# 
   722  0006                     	;# 
   723  0007                     	;# 
   724  0008                     	;# 
   725  0009                     	;# 
   726  000A                     	;# 
   727  000B                     	;# 
   728  000C                     	;# 
   729  000D                     	;# 
   730  000E                     	;# 
   731  0011                     	;# 
   732  0012                     	;# 
   733  0013                     	;# 
   734  0015                     	;# 
   735  0016                     	;# 
   736  0016                     	;# 
   737  0017                     	;# 
   738  0018                     	;# 
   739  0019                     	;# 
   740  001A                     	;# 
   741  001B                     	;# 
   742  001C                     	;# 
   743  001E                     	;# 
   744  001F                     	;# 
   745  008C                     	;# 
   746  008D                     	;# 
   747  008E                     	;# 
   748  0091                     	;# 
   749  0092                     	;# 
   750  0093                     	;# 
   751  0095                     	;# 
   752  0096                     	;# 
   753  0097                     	;# 
   754  0098                     	;# 
   755  0099                     	;# 
   756  009A                     	;# 
   757  009B                     	;# 
   758  009B                     	;# 
   759  009C                     	;# 
   760  009D                     	;# 
   761  009E                     	;# 
   762  010C                     	;# 
   763  010D                     	;# 
   764  010E                     	;# 
   765  0111                     	;# 
   766  0112                     	;# 
   767  0113                     	;# 
   768  0114                     	;# 
   769  0115                     	;# 
   770  0116                     	;# 
   771  0117                     	;# 
   772  0118                     	;# 
   773  0119                     	;# 
   774  011A                     	;# 
   775  011B                     	;# 
   776  011D                     	;# 
   777  011E                     	;# 
   778  018C                     	;# 
   779  018D                     	;# 
   780  018E                     	;# 
   781  0191                     	;# 
   782  0191                     	;# 
   783  0192                     	;# 
   784  0193                     	;# 
   785  0193                     	;# 
   786  0193                     	;# 
   787  0194                     	;# 
   788  0195                     	;# 
   789  0196                     	;# 
   790  0199                     	;# 
   791  019A                     	;# 
   792  019B                     	;# 
   793  019B                     	;# 
   794  019B                     	;# 
   795  019B                     	;# 
   796  019C                     	;# 
   797  019C                     	;# 
   798  019D                     	;# 
   799  019E                     	;# 
   800  019F                     	;# 
   801  020C                     	;# 
   802  020D                     	;# 
   803  020E                     	;# 
   804  0211                     	;# 
   805  0211                     	;# 
   806  0212                     	;# 
   807  0212                     	;# 
   808  0213                     	;# 
   809  0213                     	;# 
   810  0214                     	;# 
   811  0214                     	;# 
   812  0215                     	;# 
   813  0215                     	;# 
   814  0215                     	;# 
   815  0215                     	;# 
   816  0216                     	;# 
   817  0216                     	;# 
   818  0217                     	;# 
   819  0217                     	;# 
   820  0291                     	;# 
   821  0291                     	;# 
   822  0292                     	;# 
   823  0293                     	;# 
   824  0294                     	;# 
   825  0295                     	;# 
   826  0295                     	;# 
   827  0296                     	;# 
   828  0298                     	;# 
   829  0298                     	;# 
   830  0299                     	;# 
   831  029A                     	;# 
   832  029B                     	;# 
   833  029C                     	;# 
   834  029D                     	;# 
   835  029E                     	;# 
   836  029E                     	;# 
   837  0311                     	;# 
   838  0311                     	;# 
   839  0312                     	;# 
   840  0313                     	;# 
   841  0318                     	;# 
   842  0318                     	;# 
   843  0319                     	;# 
   844  031A                     	;# 
   845  038C                     	;# 
   846  038D                     	;# 
   847  038E                     	;# 
   848  0391                     	;# 
   849  0392                     	;# 
   850  0393                     	;# 
   851  0394                     	;# 
   852  0395                     	;# 
   853  0396                     	;# 
   854  039A                     	;# 
   855  039C                     	;# 
   856  039D                     	;# 
   857  039E                     	;# 
   858  039F                     	;# 
   859  0415                     	;# 
   860  0416                     	;# 
   861  0417                     	;# 
   862  041C                     	;# 
   863  041D                     	;# 
   864  041E                     	;# 
   865  0FE4                     	;# 
   866  0FE5                     	;# 
   867  0FE6                     	;# 
   868  0FE7                     	;# 
   869  0FE8                     	;# 
   870  0FE9                     	;# 
   871  0FEA                     	;# 
   872  0FEB                     	;# 
   873  0FED                     	;# 
   874  0FEE                     	;# 
   875  0FEF                     	;# 
   876  0000                     	;# 
   877  0001                     	;# 
   878  0002                     	;# 
   879  0003                     	;# 
   880  0004                     	;# 
   881  0005                     	;# 
   882  0006                     	;# 
   883  0007                     	;# 
   884  0008                     	;# 
   885  0009                     	;# 
   886  000A                     	;# 
   887  000B                     	;# 
   888  000C                     	;# 
   889  000D                     	;# 
   890  000E                     	;# 
   891  0011                     	;# 
   892  0012                     	;# 
   893  0013                     	;# 
   894  0015                     	;# 
   895  0016                     	;# 
   896  0016                     	;# 
   897  0017                     	;# 
   898  0018                     	;# 
   899  0019                     	;# 
   900  001A                     	;# 
   901  001B                     	;# 
   902  001C                     	;# 
   903  001E                     	;# 
   904  001F                     	;# 
   905  008C                     	;# 
   906  008D                     	;# 
   907  008E                     	;# 
   908  0091                     	;# 
   909  0092                     	;# 
   910  0093                     	;# 
   911  0095                     	;# 
   912  0096                     	;# 
   913  0097                     	;# 
   914  0098                     	;# 
   915  0099                     	;# 
   916  009A                     	;# 
   917  009B                     	;# 
   918  009B                     	;# 
   919  009C                     	;# 
   920  009D                     	;# 
   921  009E                     	;# 
   922  010C                     	;# 
   923  010D                     	;# 
   924  010E                     	;# 
   925  0111                     	;# 
   926  0112                     	;# 
   927  0113                     	;# 
   928  0114                     	;# 
   929  0115                     	;# 
   930  0116                     	;# 
   931  0117                     	;# 
   932  0118                     	;# 
   933  0119                     	;# 
   934  011A                     	;# 
   935  011B                     	;# 
   936  011D                     	;# 
   937  011E                     	;# 
   938  018C                     	;# 
   939  018D                     	;# 
   940  018E                     	;# 
   941  0191                     	;# 
   942  0191                     	;# 
   943  0192                     	;# 
   944  0193                     	;# 
   945  0193                     	;# 
   946  0193                     	;# 
   947  0194                     	;# 
   948  0195                     	;# 
   949  0196                     	;# 
   950  0199                     	;# 
   951  019A                     	;# 
   952  019B                     	;# 
   953  019B                     	;# 
   954  019B                     	;# 
   955  019B                     	;# 
   956  019C                     	;# 
   957  019C                     	;# 
   958  019D                     	;# 
   959  019E                     	;# 
   960  019F                     	;# 
   961  020C                     	;# 
   962  020D                     	;# 
   963  020E                     	;# 
   964  0211                     	;# 
   965  0211                     	;# 
   966  0212                     	;# 
   967  0212                     	;# 
   968  0213                     	;# 
   969  0213                     	;# 
   970  0214                     	;# 
   971  0214                     	;# 
   972  0215                     	;# 
   973  0215                     	;# 
   974  0215                     	;# 
   975  0215                     	;# 
   976  0216                     	;# 
   977  0216                     	;# 
   978  0217                     	;# 
   979  0217                     	;# 
   980  0291                     	;# 
   981  0291                     	;# 
   982  0292                     	;# 
   983  0293                     	;# 
   984  0294                     	;# 
   985  0295                     	;# 
   986  0295                     	;# 
   987  0296                     	;# 
   988  0298                     	;# 
   989  0298                     	;# 
   990  0299                     	;# 
   991  029A                     	;# 
   992  029B                     	;# 
   993  029C                     	;# 
   994  029D                     	;# 
   995  029E                     	;# 
   996  029E                     	;# 
   997  0311                     	;# 
   998  0311                     	;# 
   999  0312                     	;# 
  1000  0313                     	;# 
  1001  0318                     	;# 
  1002  0318                     	;# 
  1003  0319                     	;# 
  1004  031A                     	;# 
  1005  038C                     	;# 
  1006  038D                     	;# 
  1007  038E                     	;# 
  1008  0391                     	;# 
  1009  0392                     	;# 
  1010  0393                     	;# 
  1011  0394                     	;# 
  1012  0395                     	;# 
  1013  0396                     	;# 
  1014  039A                     	;# 
  1015  039C                     	;# 
  1016  039D                     	;# 
  1017  039E                     	;# 
  1018  039F                     	;# 
  1019  0415                     	;# 
  1020  0416                     	;# 
  1021  0417                     	;# 
  1022  041C                     	;# 
  1023  041D                     	;# 
  1024  041E                     	;# 
  1025  0FE4                     	;# 
  1026  0FE5                     	;# 
  1027  0FE6                     	;# 
  1028  0FE7                     	;# 
  1029  0FE8                     	;# 
  1030  0FE9                     	;# 
  1031  0FEA                     	;# 
  1032  0FEB                     	;# 
  1033  0FED                     	;# 
  1034  0FEE                     	;# 
  1035  0FEF                     	;# 
  1036  0000                     	;# 
  1037  0001                     	;# 
  1038  0002                     	;# 
  1039  0003                     	;# 
  1040  0004                     	;# 
  1041  0005                     	;# 
  1042  0006                     	;# 
  1043  0007                     	;# 
  1044  0008                     	;# 
  1045  0009                     	;# 
  1046  000A                     	;# 
  1047  000B                     	;# 
  1048  000C                     	;# 
  1049  000D                     	;# 
  1050  000E                     	;# 
  1051  0011                     	;# 
  1052  0012                     	;# 
  1053  0013                     	;# 
  1054  0015                     	;# 
  1055  0016                     	;# 
  1056  0016                     	;# 
  1057  0017                     	;# 
  1058  0018                     	;# 
  1059  0019                     	;# 
  1060  001A                     	;# 
  1061  001B                     	;# 
  1062  001C                     	;# 
  1063  001E                     	;# 
  1064  001F                     	;# 
  1065  008C                     	;# 
  1066  008D                     	;# 
  1067  008E                     	;# 
  1068  0091                     	;# 
  1069  0092                     	;# 
  1070  0093                     	;# 
  1071  0095                     	;# 
  1072  0096                     	;# 
  1073  0097                     	;# 
  1074  0098                     	;# 
  1075  0099                     	;# 
  1076  009A                     	;# 
  1077  009B                     	;# 
  1078  009B                     	;# 
  1079  009C                     	;# 
  1080  009D                     	;# 
  1081  009E                     	;# 
  1082  010C                     	;# 
  1083  010D                     	;# 
  1084  010E                     	;# 
  1085  0111                     	;# 
  1086  0112                     	;# 
  1087  0113                     	;# 
  1088  0114                     	;# 
  1089  0115                     	;# 
  1090  0116                     	;# 
  1091  0117                     	;# 
  1092  0118                     	;# 
  1093  0119                     	;# 
  1094  011A                     	;# 
  1095  011B                     	;# 
  1096  011D                     	;# 
  1097  011E                     	;# 
  1098  018C                     	;# 
  1099  018D                     	;# 
  1100  018E                     	;# 
  1101  0191                     	;# 
  1102  0191                     	;# 
  1103  0192                     	;# 
  1104  0193                     	;# 
  1105  0193                     	;# 
  1106  0193                     	;# 
  1107  0194                     	;# 
  1108  0195                     	;# 
  1109  0196                     	;# 
  1110  0199                     	;# 
  1111  019A                     	;# 
  1112  019B                     	;# 
  1113  019B                     	;# 
  1114  019B                     	;# 
  1115  019B                     	;# 
  1116  019C                     	;# 
  1117  019C                     	;# 
  1118  019D                     	;# 
  1119  019E                     	;# 
  1120  019F                     	;# 
  1121  020C                     	;# 
  1122  020D                     	;# 
  1123  020E                     	;# 
  1124  0211                     	;# 
  1125  0211                     	;# 
  1126  0212                     	;# 
  1127  0212                     	;# 
  1128  0213                     	;# 
  1129  0213                     	;# 
  1130  0214                     	;# 
  1131  0214                     	;# 
  1132  0215                     	;# 
  1133  0215                     	;# 
  1134  0215                     	;# 
  1135  0215                     	;# 
  1136  0216                     	;# 
  1137  0216                     	;# 
  1138  0217                     	;# 
  1139  0217                     	;# 
  1140  0291                     	;# 
  1141  0291                     	;# 
  1142  0292                     	;# 
  1143  0293                     	;# 
  1144  0294                     	;# 
  1145  0295                     	;# 
  1146  0295                     	;# 
  1147  0296                     	;# 
  1148  0298                     	;# 
  1149  0298                     	;# 
  1150  0299                     	;# 
  1151  029A                     	;# 
  1152  029B                     	;# 
  1153  029C                     	;# 
  1154  029D                     	;# 
  1155  029E                     	;# 
  1156  029E                     	;# 
  1157  0311                     	;# 
  1158  0311                     	;# 
  1159  0312                     	;# 
  1160  0313                     	;# 
  1161  0318                     	;# 
  1162  0318                     	;# 
  1163  0319                     	;# 
  1164  031A                     	;# 
  1165  038C                     	;# 
  1166  038D                     	;# 
  1167  038E                     	;# 
  1168  0391                     	;# 
  1169  0392                     	;# 
  1170  0393                     	;# 
  1171  0394                     	;# 
  1172  0395                     	;# 
  1173  0396                     	;# 
  1174  039A                     	;# 
  1175  039C                     	;# 
  1176  039D                     	;# 
  1177  039E                     	;# 
  1178  039F                     	;# 
  1179  0415                     	;# 
  1180  0416                     	;# 
  1181  0417                     	;# 
  1182  041C                     	;# 
  1183  041D                     	;# 
  1184  041E                     	;# 
  1185  0FE4                     	;# 
  1186  0FE5                     	;# 
  1187  0FE6                     	;# 
  1188  0FE7                     	;# 
  1189  0FE8                     	;# 
  1190  0FE9                     	;# 
  1191  0FEA                     	;# 
  1192  0FEB                     	;# 
  1193  0FED                     	;# 
  1194  0FEE                     	;# 
  1195  0FEF                     	;# 
  1196                           
  1197                           	psect	idataCOMMON
  1198  03B4                     __pidataCOMMON:	
  1199                           
  1200                           ;initializer for _timeCtrlMode
  1201  03B4  3441               	retlw	65
  1202                           
  1203                           	psect	idataBANK0
  1204  037A                     __pidataBANK0:	
  1205                           
  1206                           ;initializer for _IQRPreSta
  1207  037A  3403               	retlw	3
  1208  037B  3403               	retlw	3
  1209  037C  3403               	retlw	3
  1210  037D  3403               	retlw	3
  1211  037E  3403               	retlw	3
  1212  037F  3403               	retlw	3
  1213  0380  3403               	retlw	3
  1214  0381  3403               	retlw	3
  1215                           
  1216                           	psect	nvBANK0
  1217  005F                     __pnvBANK0:	
  1218  005F                     _TMR0_InterruptHandler:	
  1219  005F                     	ds	2
  1220  0061                     _EUSART_RxDefaultInterruptHandler:	
  1221  0061                     	ds	2
  1222  0063                     _timer0ReloadVal:	
  1223  0063                     	ds	1
  1224  000C                     _PORTAbits	set	12
  1225  0015                     _TMR0	set	21
  1226  0011                     _PIR1bits	set	17
  1227  000B                     _INTCONbits	set	11
  1228  000D                     _PORTBbits	set	13
  1229  0095                     _OPTION_REG	set	149
  1230  0091                     _PIE1bits	set	145
  1231  0095                     _OPTION_REGbits	set	149
  1232  008E                     _TRISC	set	142
  1233  008D                     _TRISB	set	141
  1234  008C                     _TRISA	set	140
  1235  0097                     _WDTCON	set	151
  1236  0098                     _OSCTUNE	set	152
  1237  0099                     _OSCCON	set	153
  1238  010C                     _LATAbits	set	268
  1239  011E                     _APFCON1	set	286
  1240  011D                     _APFCON0	set	285
  1241  010E                     _LATC	set	270
  1242  010D                     _LATB	set	269
  1243  010C                     _LATA	set	268
  1244  0116                     _BORCON	set	278
  1245  0199                     _RCREG	set	409
  1246  019D                     _RCSTAbits	set	413
  1247  019C                     _SPBRGH	set	412
  1248  019B                     _SPBRGL	set	411
  1249  019E                     _TXSTA	set	414
  1250  019D                     _RCSTA	set	413
  1251  019F                     _BAUDCON	set	415
  1252  018C                     _ANSELA	set	396
  1253  018D                     _ANSELB	set	397
  1254  018E                     _ANSELC	set	398
  1255  020E                     _WPUC	set	526
  1256  020C                     _WPUA	set	524
  1257  020D                     _WPUB	set	525
  1258                           
  1259                           ; #config settings
  1260  0000                     
  1261                           	psect	cinit
  1262  0029                     start_initialization:	
  1263  0029                     __initialization:	
  1264                           
  1265                           ; Initialize objects allocated to COMMON
  1266  0029  3183  23B4  3180   	fcall	__pidataCOMMON	;fetch initializer
  1267  002C  00FA               	movwf	__pdataCOMMON& (0+127)
  1268                           
  1269                           ; Initialize objects allocated to BANK0
  1270  002D  307A               	movlw	low __pidataBANK0
  1271  002E  0084               	movwf	4
  1272  002F  3083               	movlw	(high __pidataBANK0)| (0+128)
  1273  0030  0085               	movwf	5
  1274  0031  3057               	movlw	low __pdataBANK0
  1275  0032  0086               	movwf	6
  1276  0033  3000               	movlw	high __pdataBANK0
  1277  0034  0087               	movwf	7
  1278  0035  3008               	movlw	8
  1279  0036  3183  2398  3180   	fcall	init_ram
  1280                           
  1281                           ; Clear objects allocated to COMMON
  1282  0039  01F7               	clrf	__pbssCOMMON& (0+127)
  1283  003A  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
  1284  003B  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
  1285                           
  1286                           ; Clear objects allocated to BANK0
  1287  003C  3020               	movlw	low __pbssBANK0
  1288  003D  0084               	movwf	4
  1289  003E  3000               	movlw	high __pbssBANK0
  1290  003F  0085               	movwf	5
  1291  0040  302A               	movlw	42
  1292  0041  3183  239E  3180   	fcall	clear_ram0
  1293                           
  1294                           ; Clear objects allocated to BANK1
  1295  0044  30A0               	movlw	low __pbssBANK1
  1296  0045  0084               	movwf	4
  1297  0046  3000               	movlw	high __pbssBANK1
  1298  0047  0085               	movwf	5
  1299  0048  3040               	movlw	64
  1300  0049  3183  239E  3180   	fcall	clear_ram0
  1301                           
  1302                           ; Clear objects allocated to BANK2
  1303  004C  3020               	movlw	low __pbssBANK2
  1304  004D  0084               	movwf	4
  1305  004E  3001               	movlw	high __pbssBANK2
  1306  004F  0085               	movwf	5
  1307  0050  304B               	movlw	75
  1308  0051  3183  239E         	fcall	clear_ram0
  1309  0053                     end_of_initialization:	
  1310                           ;End of C runtime variable initialization code
  1311                           
  1312  0053                     __end_of__initialization:	
  1313  0053  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1314  0054  0020               	movlb	0
  1315  0055  3181  29F0         	ljmp	_main	;jump to C main() function
  1316                           
  1317                           	psect	bssCOMMON
  1318  0077                     __pbssCOMMON:	
  1319  0077                     _timeCtrlEnableSignal:	
  1320  0077                     	ds	1
  1321  0078                     _eusartRxCount:	
  1322  0078                     	ds	1
  1323  0079                     _timeCtrlStartFlag:	
  1324  0079                     	ds	1
  1325                           
  1326                           	psect	dataCOMMON
  1327  007A                     __pdataCOMMON:	
  1328  007A                     _timeCtrlMode:	
  1329  007A                     	ds	1
  1330                           
  1331                           	psect	bssBANK0
  1332  0020                     __pbssBANK0:	
  1333  0020                     tempCtrlProcess@timeCnt:	
  1334  0020                     	ds	16
  1335  0030                     _testIQRSta:	
  1336  0030                     	ds	8
  1337  0038                     _IQRSta:	
  1338  0038                     	ds	8
  1339  0040                     _EUSART_TxDefaultInterruptHandler:	
  1340  0040                     	ds	2
  1341  0042                     _readSignalflag:	
  1342  0042                     	ds	1
  1343  0043                     TMR0_CallBack@testTimeCtrlCnt:	
  1344  0043                     	ds	1
  1345  0044                     TMR0_CallBack@preEusartRxCount:	
  1346  0044                     	ds	1
  1347  0045                     TMR0_CallBack@timeCrlCnt:	
  1348  0045                     	ds	1
  1349  0046                     TMR0_CallBack@eusartRXOvertimeCnt:	
  1350  0046                     	ds	1
  1351  0047                     _eusartRxOvertimeMask:	
  1352  0047                     	ds	1
  1353  0048                     _EusartRxLenth:	
  1354  0048                     	ds	1
  1355  0049                     _timeCtrlOvertimeMask:	
  1356  0049                     	ds	1
  1357                           
  1358                           	psect	dataBANK0
  1359  0057                     __pdataBANK0:	
  1360  0057                     _IQRPreSta:	
  1361  0057                     	ds	8
  1362                           
  1363                           	psect	bssBANK1
  1364  00A0                     __pbssBANK1:	
  1365  00A0                     _timeCtrlValue:	
  1366  00A0                     	ds	64
  1367                           
  1368                           	psect	bssBANK2
  1369  0120                     __pbssBANK2:	
  1370  0120                     _eusartRxBuffer:	
  1371  0120                     	ds	75
  1372                           
  1373                           	psect	inittext
  1374  0398                     init_ram:	
  1375  0398  00FE               	movwf	126
  1376  0399                     initloop:	
  1377  0399  0012               	moviw fsr0++
  1378  039A  001E               	movwi fsr1++
  1379  039B  0BFE               	decfsz	126,f
  1380  039C  2B99               	goto	initloop
  1381  039D  3400               	retlw	0
  1382                           
  1383                           	psect	clrtext
  1384  039E                     clear_ram0:	
  1385                           ;	Called with FSR0 containing the base address, and
  1386                           ;	WREG with the size to clear
  1387                           
  1388  039E  0064               	clrwdt	;clear the watchdog before getting into this loop
  1389  039F                     clrloop0:	
  1390  039F  0180               	clrf	0	;clear RAM location pointed to by FSR
  1391  03A0  3101               	addfsr 0,1
  1392  03A1  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1393  03A2  2B9F               	goto	clrloop0	;have we reached the end yet?
  1394  03A3  3400               	retlw	0	;all done for this memory range, return
  1395                           
  1396                           	psect	cstackCOMMON
  1397  0070                     __pcstackCOMMON:	
  1398  0070                     ?_PIN_MANAGER_Initialize:	
  1399  0070                     ?_OSCILLATOR_Initialize:	
  1400                           ; 1 bytes @ 0x0
  1401                           
  1402  0070                     ?_WDT_Initialize:	
  1403                           ; 1 bytes @ 0x0
  1404                           
  1405  0070                     ?_TMR0_Initialize:	
  1406                           ; 1 bytes @ 0x0
  1407                           
  1408  0070                     ?_EUSART_Initialize:	
  1409                           ; 1 bytes @ 0x0
  1410                           
  1411  0070                     ?_TMR0_ISR:	
  1412                           ; 1 bytes @ 0x0
  1413                           
  1414  0070                     ?_TMR0_DefaultInterruptHandler:	
  1415                           ; 1 bytes @ 0x0
  1416                           
  1417  0070                     ??_TMR0_DefaultInterruptHandler:	
  1418                           ; 1 bytes @ 0x0
  1419                           
  1420  0070                     ?_TMR0_CallBack:	
  1421                           ; 1 bytes @ 0x0
  1422                           
  1423  0070                     ??_TMR0_CallBack:	
  1424                           ; 1 bytes @ 0x0
  1425                           
  1426  0070                     ?_EUSART_Receive_ISR:	
  1427                           ; 1 bytes @ 0x0
  1428                           
  1429  0070                     ??_EUSART_Receive_ISR:	
  1430                           ; 1 bytes @ 0x0
  1431                           
  1432  0070                     ?_stopTimeCtrl:	
  1433                           ; 1 bytes @ 0x0
  1434                           
  1435  0070                     ?_startTimeCtrl:	
  1436                           ; 1 bytes @ 0x0
  1437                           
  1438  0070                     ?_testTimeCtrl:	
  1439                           ; 1 bytes @ 0x0
  1440                           
  1441  0070                     ?_workTimeCtrl:	
  1442                           ; 1 bytes @ 0x0
  1443                           
  1444  0070                     ?_SYSTEM_Initialize:	
  1445                           ; 1 bytes @ 0x0
  1446                           
  1447  0070                     ?_Get_Device_Addr:	
  1448                           ; 1 bytes @ 0x0
  1449                           
  1450  0070                     ?_INTERRUPT_InterruptManager:	
  1451                           ; 1 bytes @ 0x0
  1452                           
  1453  0070                     ?_EUSART_Deal:	
  1454                           ; 1 bytes @ 0x0
  1455                           
  1456  0070                     ?_getTimeData:	
  1457                           ; 1 bytes @ 0x0
  1458                           
  1459  0070                     ?_tempCtrlProcess:	
  1460                           ; 1 bytes @ 0x0
  1461                           
  1462  0070                     ?_main:	
  1463                           ; 1 bytes @ 0x0
  1464                           
  1465                           
  1466                           ; 1 bytes @ 0x0
  1467  0070                     	ds	1
  1468  0071                     ??_TMR0_ISR:	
  1469  0071                     ??_INTERRUPT_InterruptManager:	
  1470                           ; 1 bytes @ 0x1
  1471                           
  1472                           
  1473                           ; 1 bytes @ 0x1
  1474  0071                     	ds	1
  1475  0072                     ??_PIN_MANAGER_Initialize:	
  1476  0072                     ??_OSCILLATOR_Initialize:	
  1477                           ; 1 bytes @ 0x2
  1478                           
  1479  0072                     ??_WDT_Initialize:	
  1480                           ; 1 bytes @ 0x2
  1481                           
  1482  0072                     ?_TMR0_SetInterruptHandler:	
  1483                           ; 1 bytes @ 0x2
  1484                           
  1485  0072                     ?_EUSART_SetRxInterruptHandler:	
  1486                           ; 1 bytes @ 0x2
  1487                           
  1488  0072                     ??_stopTimeCtrl:	
  1489                           ; 1 bytes @ 0x2
  1490                           
  1491  0072                     ??_testTimeCtrl:	
  1492                           ; 1 bytes @ 0x2
  1493                           
  1494  0072                     ??_workTimeCtrl:	
  1495                           ; 1 bytes @ 0x2
  1496                           
  1497  0072                     ??_Get_Device_Addr:	
  1498                           ; 1 bytes @ 0x2
  1499                           
  1500  0072                     ??_tempCtrlProcess:	
  1501                           ; 1 bytes @ 0x2
  1502                           
  1503  0072                     getTimeData@cnt:	
  1504                           ; 1 bytes @ 0x2
  1505                           
  1506  0072                     TMR0_SetInterruptHandler@InterruptHandler:	
  1507                           ; 1 bytes @ 0x2
  1508                           
  1509  0072                     EUSART_SetRxInterruptHandler@interruptHandler:	
  1510                           ; 2 bytes @ 0x2
  1511                           
  1512                           
  1513                           ; 2 bytes @ 0x2
  1514  0072                     	ds	1
  1515  0073                     Get_Device_Addr@device_addr:	
  1516  0073                     getTimeData@i:	
  1517                           ; 1 bytes @ 0x3
  1518                           
  1519                           
  1520                           ; 1 bytes @ 0x3
  1521  0073                     	ds	1
  1522  0074                     ??_TMR0_Initialize:	
  1523  0074                     ??_EUSART_Initialize:	
  1524                           ; 1 bytes @ 0x4
  1525                           
  1526  0074                     ??_TMR0_SetInterruptHandler:	
  1527                           ; 1 bytes @ 0x4
  1528                           
  1529  0074                     ??_EUSART_SetRxInterruptHandler:	
  1530                           ; 1 bytes @ 0x4
  1531                           
  1532  0074                     getTimeData@j:	
  1533                           ; 1 bytes @ 0x4
  1534                           
  1535  0074                     workTimeCtrl@i:	
  1536                           ; 1 bytes @ 0x4
  1537                           
  1538  0074                     stopTimeCtrl@i:	
  1539                           ; 1 bytes @ 0x4
  1540                           
  1541  0074                     testTimeCtrl@IQRNum:	
  1542                           ; 1 bytes @ 0x4
  1543                           
  1544  0074                     tempCtrlProcess@i:	
  1545                           ; 1 bytes @ 0x4
  1546                           
  1547                           
  1548                           ; 1 bytes @ 0x4
  1549  0074                     	ds	1
  1550  0075                     ??_startTimeCtrl:	
  1551  0075                     ??_SYSTEM_Initialize:	
  1552                           ; 1 bytes @ 0x5
  1553                           
  1554  0075                     ??_EUSART_Deal:	
  1555                           ; 1 bytes @ 0x5
  1556                           
  1557                           
  1558                           ; 1 bytes @ 0x5
  1559  0075                     	ds	2
  1560  0077                     ??_main:	
  1561                           
  1562                           	psect	cstackBANK0
  1563  004A                     __pcstackBANK0:	
  1564                           ; 1 bytes @ 0x7
  1565                           
  1566  004A                     ??_getTimeData:	
  1567                           
  1568                           ; 1 bytes @ 0x0
  1569  004A                     	ds	13
  1570                           
  1571                           	psect	maintext
  1572  01F0                     __pmaintext:	
  1573 ;;
  1574 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1575 ;;
  1576 ;; *************** function _main *****************
  1577 ;; Defined at:
  1578 ;;		line 49 in file "main.c"
  1579 ;; Parameters:    Size  Location     Type
  1580 ;;		None
  1581 ;; Auto vars:     Size  Location     Type
  1582 ;;		None
  1583 ;; Return value:  Size  Location     Type
  1584 ;;                  1    wreg      void 
  1585 ;; Registers used:
  1586 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1587 ;; Tracked objects:
  1588 ;;		On entry : B1F/0
  1589 ;;		On exit  : 0/0
  1590 ;;		Unchanged: 0/0
  1591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1592 ;;      Params:         0       0       0       0
  1593 ;;      Locals:         0       0       0       0
  1594 ;;      Temps:          0       0       0       0
  1595 ;;      Totals:         0       0       0       0
  1596 ;;Total ram usage:        0 bytes
  1597 ;; Hardware stack levels required when called:    7
  1598 ;; This function calls:
  1599 ;;		_EUSART_Deal
  1600 ;;		_SYSTEM_Initialize
  1601 ;;		_stopTimeCtrl
  1602 ;;		_tempCtrlProcess
  1603 ;; This function is called by:
  1604 ;;		Startup code after reset
  1605 ;; This function uses a non-reentrant model
  1606 ;;
  1607                           
  1608                           
  1609                           ;psect for function _main
  1610  01F0                     _main:	
  1611                           
  1612                           ;main.c: 52: SYSTEM_Initialize();
  1613                           
  1614                           ;incstack = 0
  1615                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1616  01F0  3183  235C  3181   	fcall	_SYSTEM_Initialize
  1617                           
  1618                           ;main.c: 58: (INTCONbits.GIE = 1);
  1619  01F3  178B               	bsf	11,7	;volatile
  1620                           
  1621                           ;main.c: 61: (INTCONbits.PEIE = 1);
  1622  01F4  170B               	bsf	11,6	;volatile
  1623  01F5                     l1411:	
  1624                           ;main.c: 69: while (1)
  1625                           
  1626                           
  1627                           ;main.c: 70: {
  1628                           ;main.c: 73: if(timeCtrlMode == 'A')
  1629  01F5  3041               	movlw	65
  1630  01F6  067A               	xorwf	_timeCtrlMode,w
  1631  01F7  1D03               	btfss	3,2
  1632  01F8  2A02               	goto	l1415
  1633                           
  1634                           ;main.c: 74: {
  1635                           ;main.c: 75: timeCtrlEnableSignal = !PORTAbits.RA0;
  1636  01F9  1003               	clrc
  1637  01FA  0020               	movlb	0	; select bank0
  1638  01FB  1C0C               	btfss	12,0	;volatile
  1639  01FC  1403               	setc
  1640  01FD  3000               	movlw	0
  1641  01FE  1803               	btfsc	3,0
  1642  01FF  3001               	movlw	1
  1643  0200  00F7               	movwf	_timeCtrlEnableSignal
  1644                           
  1645                           ;main.c: 76: }
  1646  0201  2A14               	goto	l1423
  1647  0202                     l1415:	
  1648                           
  1649                           ;main.c: 77: else if(timeCtrlMode == 'B')
  1650  0202  3042               	movlw	66
  1651  0203  067A               	xorwf	_timeCtrlMode,w
  1652  0204  1D03               	btfss	3,2
  1653  0205  2A14               	goto	l1423
  1654                           
  1655                           ;main.c: 78: {
  1656                           ;main.c: 79: if(readSignalflag)
  1657  0206  0020               	movlb	0	; select bank0
  1658  0207  0842               	movf	_readSignalflag,w
  1659  0208  1903               	btfsc	3,2
  1660  0209  2A14               	goto	l1423
  1661                           
  1662                           ;main.c: 80: {
  1663                           ;main.c: 81: if((timeCtrlEnableSignal = !PORTAbits.RA0))
  1664  020A  1003               	clrc
  1665  020B  1C0C               	btfss	12,0	;volatile
  1666  020C  1403               	setc
  1667  020D  3000               	movlw	0
  1668  020E  1803               	btfsc	3,0
  1669  020F  3001               	movlw	1
  1670  0210  00F7               	movwf	_timeCtrlEnableSignal
  1671  0211  0877               	movf	_timeCtrlEnableSignal,w
  1672  0212  1D03               	btfss	3,2
  1673                           
  1674                           ;main.c: 82: {
  1675                           ;main.c: 83: readSignalflag = 0;
  1676  0213  01C2               	clrf	_readSignalflag
  1677  0214                     l1423:	
  1678                           
  1679                           ;main.c: 84: }
  1680                           ;main.c: 85: }
  1681                           ;main.c: 86: }
  1682                           ;main.c: 88: if (eusartRxOvertimeMask)
  1683  0214  0020               	movlb	0	; select bank0
  1684  0215  0847               	movf	_eusartRxOvertimeMask,w
  1685  0216  1903               	btfsc	3,2
  1686  0217  2A1C               	goto	l1429
  1687                           
  1688                           ;main.c: 89: {
  1689                           ;main.c: 90: eusartRxOvertimeMask = 0;
  1690  0218  01C7               	clrf	_eusartRxOvertimeMask
  1691                           
  1692                           ;main.c: 91: EUSART_Deal();
  1693  0219  3181  21A0  3181   	fcall	_EUSART_Deal
  1694  021C                     l1429:	
  1695                           
  1696                           ;main.c: 92: }
  1697                           ;main.c: 94: if(timeCtrlOvertimeMask)
  1698  021C  0020               	movlb	0	; select bank0
  1699  021D  0849               	movf	_timeCtrlOvertimeMask,w
  1700  021E  1903               	btfsc	3,2
  1701  021F  29F5               	goto	l1411
  1702                           
  1703                           ;main.c: 95: {
  1704                           ;main.c: 96: if(timeCtrlEnableSignal && (timeCtrlStartFlag == 1))
  1705  0220  0877               	movf	_timeCtrlEnableSignal,w
  1706  0221  1903               	btfsc	3,2
  1707  0222  2A2E               	goto	l1439
  1708  0223  0379               	decf	_timeCtrlStartFlag,w
  1709  0224  1D03               	btfss	3,2
  1710  0225  2A2E               	goto	l1439
  1711                           
  1712                           ;main.c: 97: {
  1713                           ;main.c: 98: do { LATAbits.LATA2 = 0; } while(0);
  1714  0226  0022               	movlb	2	; select bank2
  1715  0227  110C               	bcf	12,2	;volatile
  1716                           
  1717                           ;main.c: 99: tempCtrlProcess();
  1718  0228  3180  2057  3181   	fcall	_tempCtrlProcess
  1719                           
  1720                           ;main.c: 100: timeCtrlOvertimeMask = 0;
  1721  022B  0020               	movlb	0	; select bank0
  1722  022C  01C9               	clrf	_timeCtrlOvertimeMask
  1723                           
  1724                           ;main.c: 101: }
  1725  022D  29F5               	goto	l1411
  1726  022E                     l1439:	
  1727                           
  1728                           ;main.c: 102: else if(!timeCtrlEnableSignal && (timeCtrlStartFlag == 1))
  1729  022E  0877               	movf	_timeCtrlEnableSignal,w
  1730  022F  1D03               	btfss	3,2
  1731  0230  29F5               	goto	l1411
  1732  0231  0379               	decf	_timeCtrlStartFlag,w
  1733  0232  1D03               	btfss	3,2
  1734  0233  29F5               	goto	l1411
  1735                           
  1736                           ;main.c: 103: {
  1737                           ;main.c: 104: stopTimeCtrl();
  1738  0234  3182  22A6  3181   	fcall	_stopTimeCtrl
  1739                           
  1740                           ;main.c: 105: timeCtrlStartFlag = 1;
  1741  0237  01F9               	clrf	_timeCtrlStartFlag
  1742  0238  0AF9               	incf	_timeCtrlStartFlag,f
  1743                           
  1744                           ;main.c: 106: readSignalflag = 1;
  1745  0239  0020               	movlb	0	; select bank0
  1746  023A  01C2               	clrf	_readSignalflag
  1747  023B  0AC2               	incf	_readSignalflag,f
  1748  023C  29F5               	goto	l1411
  1749  023D                     __end_of_main:	
  1750                           
  1751                           	psect	text1
  1752  0057                     __ptext1:	
  1753 ;; *************** function _tempCtrlProcess *****************
  1754 ;; Defined at:
  1755 ;;		line 127 in file "mcc_generated_files/time_ctrl.c"
  1756 ;; Parameters:    Size  Location     Type
  1757 ;;		None
  1758 ;; Auto vars:     Size  Location     Type
  1759 ;;  i               1    4[COMMON] unsigned char 
  1760 ;; Return value:  Size  Location     Type
  1761 ;;                  1    wreg      void 
  1762 ;; Registers used:
  1763 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  1764 ;; Tracked objects:
  1765 ;;		On entry : 0/0
  1766 ;;		On exit  : 0/0
  1767 ;;		Unchanged: 0/0
  1768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1769 ;;      Params:         0       0       0       0
  1770 ;;      Locals:         1       0       0       0
  1771 ;;      Temps:          2       0       0       0
  1772 ;;      Totals:         3       0       0       0
  1773 ;;Total ram usage:        3 bytes
  1774 ;; Hardware stack levels used:    1
  1775 ;; Hardware stack levels required when called:    4
  1776 ;; This function calls:
  1777 ;;		Nothing
  1778 ;; This function is called by:
  1779 ;;		_main
  1780 ;; This function uses a non-reentrant model
  1781 ;;
  1782                           
  1783                           
  1784                           ;psect for function _tempCtrlProcess
  1785  0057                     _tempCtrlProcess:	
  1786                           
  1787                           ;time_ctrl.c: 129: uint8_t i;
  1788                           ;time_ctrl.c: 130: static uint16_t timeCnt[8] = {0};
  1789                           ;time_ctrl.c: 132: for(i=0; i<8; i++)
  1790                           
  1791                           ;incstack = 0
  1792                           ; Regs used in _tempCtrlProcess: [wreg-fsr1h+status,2+status,0]
  1793  0057  01F4               	clrf	tempCtrlProcess@i
  1794  0058                     L1:	
  1795  0058  3008               	movlw	8
  1796  0059  0274               	subwf	tempCtrlProcess@i,w
  1797  005A  1803               	btfsc	3,0
  1798  005B  0008               	return
  1799                           
  1800                           ;time_ctrl.c: 133: {
  1801                           ;time_ctrl.c: 134: if(IQRPreSta[i] != IQRSta[i])
  1802  005C  0874               	movf	tempCtrlProcess@i,w
  1803  005D  3E38               	addlw	(low (_IQRSta| 0))& (0+255)
  1804  005E  0086               	movwf	6
  1805  005F  0187               	clrf	7
  1806  0060  0874               	movf	tempCtrlProcess@i,w
  1807  0061  3E57               	addlw	(low (_IQRPreSta| 0))& (0+255)
  1808  0062  0084               	movwf	4
  1809  0063  0185               	clrf	5
  1810  0064  0800               	movf	0,w
  1811  0065  0601               	xorwf	1,w
  1812  0066  1D03               	btfss	3,2
  1813  0067  28BC               	goto	l1365
  1814  0068  28DA               	goto	l291
  1815  0069                     l1355:	
  1816                           ;time_ctrl.c: 137: {
  1817                           ;time_ctrl.c: 138: case 0: timeCnt[i] = timeCtrlValue[i][0]; break;
  1818                           
  1819                           ;time_ctrl.c: 135: {
  1820                           ;time_ctrl.c: 136: switch(IQRSta[i])
  1821                           
  1822  0069  0874               	movf	tempCtrlProcess@i,w
  1823  006A  00F2               	movwf	??_tempCtrlProcess
  1824  006B  3002               	movlw	2
  1825  006C                     u895:	
  1826  006C  35F2               	lslf	??_tempCtrlProcess,f
  1827  006D  3EFF               	addlw	-1
  1828  006E  1D03               	skipz
  1829  006F  286C               	goto	u895
  1830  0070  3572               	lslf	??_tempCtrlProcess,w
  1831  0071  3EA0               	addlw	(low (_timeCtrlValue| 0))& (0+255)
  1832  0072  0086               	movwf	6
  1833  0073  0187               	clrf	7
  1834  0074  3574               	lslf	tempCtrlProcess@i,w
  1835  0075  3E20               	addlw	(low (tempCtrlProcess@timeCnt| 0))& (0+255)
  1836  0076  0084               	movwf	4
  1837  0077  0185               	clrf	5
  1838  0078  3F40               	moviw [0]fsr1
  1839  0079  3F80               	movwi [0]fsr0
  1840  007A  3F41               	moviw [1]fsr1
  1841  007B  3F81               	movwi [1]fsr0
  1842  007C  28CE               	goto	l1367
  1843  007D                     l1357:	
  1844                           ;time_ctrl.c: 139: case 1: timeCnt[i] = timeCtrlValue[i][1]; break;
  1845                           
  1846  007D  0874               	movf	tempCtrlProcess@i,w
  1847  007E  00F2               	movwf	??_tempCtrlProcess
  1848  007F  3002               	movlw	2
  1849  0080                     u905:	
  1850  0080  35F2               	lslf	??_tempCtrlProcess,f
  1851  0081  3EFF               	addlw	-1
  1852  0082  1D03               	skipz
  1853  0083  2880               	goto	u905
  1854  0084  3572               	lslf	??_tempCtrlProcess,w
  1855  0085  3E02               	addlw	2
  1856  0086  3EA0               	addlw	(low (_timeCtrlValue| 0))& (0+255)
  1857  0087  0086               	movwf	6
  1858  0088  0187               	clrf	7
  1859  0089  3574               	lslf	tempCtrlProcess@i,w
  1860  008A  3E20               	addlw	(low (tempCtrlProcess@timeCnt| 0))& (0+255)
  1861  008B  0084               	movwf	4
  1862  008C  0185               	clrf	5
  1863  008D  3F40               	moviw [0]fsr1
  1864  008E  3F80               	movwi [0]fsr0
  1865  008F  3F41               	moviw [1]fsr1
  1866  0090  3F81               	movwi [1]fsr0
  1867  0091  28CE               	goto	l1367
  1868  0092                     l1359:	
  1869                           ;time_ctrl.c: 140: case 2: timeCnt[i] = timeCtrlValue[i][2]; break;
  1870                           
  1871  0092  0874               	movf	tempCtrlProcess@i,w
  1872  0093  00F2               	movwf	??_tempCtrlProcess
  1873  0094  3002               	movlw	2
  1874  0095                     u915:	
  1875  0095  35F2               	lslf	??_tempCtrlProcess,f
  1876  0096  3EFF               	addlw	-1
  1877  0097  1D03               	skipz
  1878  0098  2895               	goto	u915
  1879  0099  3572               	lslf	??_tempCtrlProcess,w
  1880  009A  3E04               	addlw	4
  1881  009B  3EA0               	addlw	(low (_timeCtrlValue| 0))& (0+255)
  1882  009C  0086               	movwf	6
  1883  009D  0187               	clrf	7
  1884  009E  3574               	lslf	tempCtrlProcess@i,w
  1885  009F  3E20               	addlw	(low (tempCtrlProcess@timeCnt| 0))& (0+255)
  1886  00A0  0084               	movwf	4
  1887  00A1  0185               	clrf	5
  1888  00A2  3F40               	moviw [0]fsr1
  1889  00A3  3F80               	movwi [0]fsr0
  1890  00A4  3F41               	moviw [1]fsr1
  1891  00A5  3F81               	movwi [1]fsr0
  1892  00A6  28CE               	goto	l1367
  1893  00A7                     l1361:	
  1894                           ;time_ctrl.c: 141: case 3: timeCnt[i] = timeCtrlValue[i][3]; break;
  1895                           
  1896  00A7  0874               	movf	tempCtrlProcess@i,w
  1897  00A8  00F2               	movwf	??_tempCtrlProcess
  1898  00A9  3002               	movlw	2
  1899  00AA                     u925:	
  1900  00AA  35F2               	lslf	??_tempCtrlProcess,f
  1901  00AB  3EFF               	addlw	-1
  1902  00AC  1D03               	skipz
  1903  00AD  28AA               	goto	u925
  1904  00AE  3572               	lslf	??_tempCtrlProcess,w
  1905  00AF  3E06               	addlw	6
  1906  00B0  3EA0               	addlw	(low (_timeCtrlValue| 0))& (0+255)
  1907  00B1  0086               	movwf	6
  1908  00B2  0187               	clrf	7
  1909  00B3  3574               	lslf	tempCtrlProcess@i,w
  1910  00B4  3E20               	addlw	(low (tempCtrlProcess@timeCnt| 0))& (0+255)
  1911  00B5  0084               	movwf	4
  1912  00B6  0185               	clrf	5
  1913  00B7  3F40               	moviw [0]fsr1
  1914  00B8  3F80               	movwi [0]fsr0
  1915  00B9  3F41               	moviw [1]fsr1
  1916  00BA  3F81               	movwi [1]fsr0
  1917                           
  1918                           ;time_ctrl.c: 143: }
  1919                           
  1920                           ;time_ctrl.c: 142: default: break;
  1921  00BB  28CE               	goto	l1367
  1922  00BC                     l1365:	
  1923  00BC  0874               	movf	tempCtrlProcess@i,w
  1924  00BD  3E38               	addlw	(low (_IQRSta| 0))& (0+255)
  1925  00BE  0086               	movwf	6
  1926  00BF  0187               	clrf	7
  1927  00C0  0801               	movf	1,w
  1928                           
  1929                           ; Switch size 1, requested type "space"
  1930                           ; Number of cases is 4, Range of values is 0 to 3
  1931                           ; switch strategies available:
  1932                           ; Name         Instructions Cycles
  1933                           ; simple_byte           13     7 (average)
  1934                           ; direct_byte           14     6 (fixed)
  1935                           ; jumptable            260     6 (fixed)
  1936                           ;	Chosen strategy is simple_byte
  1937  00C1  3A00               	xorlw	0	; case 0
  1938  00C2  1903               	skipnz
  1939  00C3  2869               	goto	l1355
  1940  00C4  3A01               	xorlw	1	; case 1
  1941  00C5  1903               	skipnz
  1942  00C6  287D               	goto	l1357
  1943  00C7  3A03               	xorlw	3	; case 2
  1944  00C8  1903               	skipnz
  1945  00C9  2892               	goto	l1359
  1946  00CA  3A01               	xorlw	1	; case 3
  1947  00CB  1903               	skipnz
  1948  00CC  28A7               	goto	l1361
  1949  00CD  28CE               	goto	l1367
  1950  00CE                     l1367:	
  1951                           
  1952                           ;time_ctrl.c: 145: IQRPreSta[i] = IQRSta[i];
  1953  00CE  0874               	movf	tempCtrlProcess@i,w
  1954  00CF  3E38               	addlw	(low (_IQRSta| 0))& (0+255)
  1955  00D0  0086               	movwf	6
  1956  00D1  0187               	clrf	7
  1957  00D2  0801               	movf	1,w
  1958  00D3  00F2               	movwf	??_tempCtrlProcess
  1959  00D4  0874               	movf	tempCtrlProcess@i,w
  1960  00D5  3E57               	addlw	(low (_IQRPreSta| 0))& (0+255)
  1961  00D6  0086               	movwf	6
  1962  00D7  0187               	clrf	7
  1963  00D8  0872               	movf	??_tempCtrlProcess,w
  1964  00D9  0081               	movwf	1
  1965  00DA                     l291:	
  1966                           
  1967                           ;time_ctrl.c: 146: }
  1968                           ;time_ctrl.c: 148: if(--timeCnt[i] == 0)
  1969  00DA  3574               	lslf	tempCtrlProcess@i,w
  1970  00DB  3E20               	addlw	(low (tempCtrlProcess@timeCnt| 0))& (0+255)
  1971  00DC  0086               	movwf	6
  1972  00DD  0187               	clrf	7
  1973  00DE  3001               	movlw	1
  1974  00DF  0281               	subwf	1,f
  1975  00E0  3141               	addfsr 1,1
  1976  00E1  3000               	movlw	0
  1977  00E2  3B81               	subwfb	1,f
  1978  00E3  317F               	addfsr 1,-1
  1979  00E4  0016               	moviw fsr1++
  1980  00E5  0401               	iorwf	1,w
  1981  00E6  1D03               	btfss	3,2
  1982  00E7  2929               	goto	l1385
  1983                           
  1984                           ;time_ctrl.c: 149: {
  1985                           ;time_ctrl.c: 150: if(IQRSta[i]%2 == 0)
  1986  00E8  0874               	movf	tempCtrlProcess@i,w
  1987  00E9  3E38               	addlw	(low (_IQRSta| 0))& (0+255)
  1988  00EA  0086               	movwf	6
  1989  00EB  0187               	clrf	7
  1990  00EC  1801               	btfsc	1,0
  1991  00ED  28FB               	goto	l1373
  1992                           
  1993                           ;time_ctrl.c: 151: {
  1994                           ;time_ctrl.c: 152: LATC |= 1 << i;
  1995  00EE  3001               	movlw	1
  1996  00EF  00F2               	movwf	??_tempCtrlProcess
  1997  00F0  0A74               	incf	tempCtrlProcess@i,w
  1998  00F1  28F3               	goto	u954
  1999  00F2                     u955:	
  2000  00F2  35F2               	lslf	??_tempCtrlProcess,f
  2001  00F3                     u954:	
  2002  00F3  0B89               	decfsz	9,f
  2003  00F4  28F2               	goto	u955
  2004  00F5  0872               	movf	??_tempCtrlProcess,w
  2005  00F6  00F3               	movwf	??_tempCtrlProcess+1
  2006  00F7  0873               	movf	??_tempCtrlProcess+1,w
  2007  00F8  0022               	movlb	2	; select bank2
  2008  00F9  048E               	iorwf	14,f	;volatile
  2009                           
  2010                           ;time_ctrl.c: 153: }
  2011  00FA  290E               	goto	l1377
  2012  00FB                     l1373:	
  2013                           
  2014                           ;time_ctrl.c: 154: else if(IQRSta[i]%2 == 1)
  2015  00FB  0874               	movf	tempCtrlProcess@i,w
  2016  00FC  3E38               	addlw	(low (_IQRSta| 0))& (0+255)
  2017  00FD  0086               	movwf	6
  2018  00FE  0187               	clrf	7
  2019  00FF  1C01               	btfss	1,0
  2020  0100  290E               	goto	l1377
  2021                           
  2022                           ;time_ctrl.c: 155: {
  2023                           ;time_ctrl.c: 156: LATC &= ~(1<<i);
  2024  0101  3001               	movlw	1
  2025  0102  00F2               	movwf	??_tempCtrlProcess
  2026  0103  0A74               	incf	tempCtrlProcess@i,w
  2027  0104  2906               	goto	u974
  2028  0105                     u975:	
  2029  0105  35F2               	lslf	??_tempCtrlProcess,f
  2030  0106                     u974:	
  2031  0106  0B89               	decfsz	9,f
  2032  0107  2905               	goto	u975
  2033  0108  0872               	movf	??_tempCtrlProcess,w
  2034  0109  3AFF               	xorlw	255
  2035  010A  00F3               	movwf	??_tempCtrlProcess+1
  2036  010B  0873               	movf	??_tempCtrlProcess+1,w
  2037  010C  0022               	movlb	2	; select bank2
  2038  010D  058E               	andwf	14,f	;volatile
  2039  010E                     l1377:	
  2040                           
  2041                           ;time_ctrl.c: 157: }
  2042                           ;time_ctrl.c: 159: if(++IQRSta[i] >= 4)
  2043  010E  3001               	movlw	1
  2044  010F  00F2               	movwf	??_tempCtrlProcess
  2045  0110  0874               	movf	tempCtrlProcess@i,w
  2046  0111  3E38               	addlw	(low (_IQRSta| 0))& (0+255)
  2047  0112  0086               	movwf	6
  2048  0113  0187               	clrf	7
  2049  0114  0872               	movf	??_tempCtrlProcess,w
  2050  0115  0781               	addwf	1,f
  2051  0116  3004               	movlw	4
  2052  0117  0201               	subwf	1,w
  2053  0118  1C03               	skipc
  2054  0119  2929               	goto	l1385
  2055                           
  2056                           ;time_ctrl.c: 160: {
  2057                           ;time_ctrl.c: 161: IQRSta[i] = 3;
  2058  011A  3003               	movlw	3
  2059  011B  00F2               	movwf	??_tempCtrlProcess
  2060  011C  0874               	movf	tempCtrlProcess@i,w
  2061  011D  3E38               	addlw	(low (_IQRSta| 0))& (0+255)
  2062  011E  0086               	movwf	6
  2063  011F  0187               	clrf	7
  2064  0120  0872               	movf	??_tempCtrlProcess,w
  2065  0121  0081               	movwf	1
  2066                           
  2067                           ;time_ctrl.c: 162: if(timeCtrlMode == 'B')
  2068  0122  3042               	movlw	66
  2069  0123  067A               	xorwf	_timeCtrlMode,w
  2070  0124  1D03               	btfss	3,2
  2071  0125  2929               	goto	l1385
  2072                           
  2073                           ;time_ctrl.c: 163: {
  2074                           ;time_ctrl.c: 164: readSignalflag = 1;
  2075  0126  0020               	movlb	0	; select bank0
  2076  0127  01C2               	clrf	_readSignalflag
  2077  0128  0AC2               	incf	_readSignalflag,f
  2078  0129                     l1385:	
  2079  0129  3001               	movlw	1
  2080  012A  00F2               	movwf	??_tempCtrlProcess
  2081  012B  0872               	movf	??_tempCtrlProcess,w
  2082  012C  07F4               	addwf	tempCtrlProcess@i,f
  2083  012D  2858               	goto	L1
  2084  012E                     __end_of_tempCtrlProcess:	
  2085                           
  2086                           	psect	text2
  2087  035C                     __ptext2:	
  2088 ;; *************** function _SYSTEM_Initialize *****************
  2089 ;; Defined at:
  2090 ;;		line 50 in file "mcc_generated_files/mcc.c"
  2091 ;; Parameters:    Size  Location     Type
  2092 ;;		None
  2093 ;; Auto vars:     Size  Location     Type
  2094 ;;		None
  2095 ;; Return value:  Size  Location     Type
  2096 ;;                  1    wreg      void 
  2097 ;; Registers used:
  2098 ;;		wreg, status,2, status,0, pclath, cstack
  2099 ;; Tracked objects:
  2100 ;;		On entry : 0/0
  2101 ;;		On exit  : 0/0
  2102 ;;		Unchanged: 0/0
  2103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2104 ;;      Params:         0       0       0       0
  2105 ;;      Locals:         0       0       0       0
  2106 ;;      Temps:          0       0       0       0
  2107 ;;      Totals:         0       0       0       0
  2108 ;;Total ram usage:        0 bytes
  2109 ;; Hardware stack levels used:    1
  2110 ;; Hardware stack levels required when called:    6
  2111 ;; This function calls:
  2112 ;;		_EUSART_Initialize
  2113 ;;		_OSCILLATOR_Initialize
  2114 ;;		_PIN_MANAGER_Initialize
  2115 ;;		_TMR0_Initialize
  2116 ;;		_WDT_Initialize
  2117 ;; This function is called by:
  2118 ;;		_main
  2119 ;; This function uses a non-reentrant model
  2120 ;;
  2121                           
  2122                           
  2123                           ;psect for function _SYSTEM_Initialize
  2124  035C                     _SYSTEM_Initialize:	
  2125                           
  2126                           ;mcc.c: 52: PIN_MANAGER_Initialize();
  2127                           
  2128                           ;incstack = 0
  2129                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2130  035C  3182  22FF  3183   	fcall	_PIN_MANAGER_Initialize
  2131                           
  2132                           ;mcc.c: 53: OSCILLATOR_Initialize();
  2133  035F  3183  238A  3183   	fcall	_OSCILLATOR_Initialize
  2134                           
  2135                           ;mcc.c: 54: WDT_Initialize();
  2136  0362  3183  23B0  3183   	fcall	_WDT_Initialize
  2137                           
  2138                           ;mcc.c: 55: TMR0_Initialize();
  2139  0365  3183  2334  3183   	fcall	_TMR0_Initialize
  2140                           
  2141                           ;mcc.c: 56: EUSART_Initialize();
  2142  0368  3183  231B         	fcall	_EUSART_Initialize
  2143  036A  0008               	return
  2144  036B                     __end_of_SYSTEM_Initialize:	
  2145                           
  2146                           	psect	text3
  2147  03B0                     __ptext3:	
  2148 ;; *************** function _WDT_Initialize *****************
  2149 ;; Defined at:
  2150 ;;		line 69 in file "mcc_generated_files/mcc.c"
  2151 ;; Parameters:    Size  Location     Type
  2152 ;;		None
  2153 ;; Auto vars:     Size  Location     Type
  2154 ;;		None
  2155 ;; Return value:  Size  Location     Type
  2156 ;;                  1    wreg      void 
  2157 ;; Registers used:
  2158 ;;		wreg
  2159 ;; Tracked objects:
  2160 ;;		On entry : 0/0
  2161 ;;		On exit  : 0/0
  2162 ;;		Unchanged: 0/0
  2163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2164 ;;      Params:         0       0       0       0
  2165 ;;      Locals:         0       0       0       0
  2166 ;;      Temps:          0       0       0       0
  2167 ;;      Totals:         0       0       0       0
  2168 ;;Total ram usage:        0 bytes
  2169 ;; Hardware stack levels used:    1
  2170 ;; Hardware stack levels required when called:    4
  2171 ;; This function calls:
  2172 ;;		Nothing
  2173 ;; This function is called by:
  2174 ;;		_SYSTEM_Initialize
  2175 ;; This function uses a non-reentrant model
  2176 ;;
  2177                           
  2178                           
  2179                           ;psect for function _WDT_Initialize
  2180  03B0                     _WDT_Initialize:	
  2181                           
  2182                           ;mcc.c: 72: WDTCON = 0x16;
  2183                           
  2184                           ;incstack = 0
  2185                           ; Regs used in _WDT_Initialize: [wreg]
  2186  03B0  3016               	movlw	22
  2187  03B1  0021               	movlb	1	; select bank1
  2188  03B2  0097               	movwf	23	;volatile
  2189  03B3  0008               	return
  2190  03B4                     __end_of_WDT_Initialize:	
  2191                           
  2192                           	psect	text4
  2193  0334                     __ptext4:	
  2194 ;; *************** function _TMR0_Initialize *****************
  2195 ;; Defined at:
  2196 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  2197 ;; Parameters:    Size  Location     Type
  2198 ;;		None
  2199 ;; Auto vars:     Size  Location     Type
  2200 ;;		None
  2201 ;; Return value:  Size  Location     Type
  2202 ;;                  1    wreg      void 
  2203 ;; Registers used:
  2204 ;;		wreg, status,2, status,0, pclath, cstack
  2205 ;; Tracked objects:
  2206 ;;		On entry : 0/0
  2207 ;;		On exit  : 0/0
  2208 ;;		Unchanged: 0/0
  2209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2210 ;;      Params:         0       0       0       0
  2211 ;;      Locals:         0       0       0       0
  2212 ;;      Temps:          1       0       0       0
  2213 ;;      Totals:         1       0       0       0
  2214 ;;Total ram usage:        1 bytes
  2215 ;; Hardware stack levels used:    1
  2216 ;; Hardware stack levels required when called:    5
  2217 ;; This function calls:
  2218 ;;		_TMR0_SetInterruptHandler
  2219 ;; This function is called by:
  2220 ;;		_SYSTEM_Initialize
  2221 ;; This function uses a non-reentrant model
  2222 ;;
  2223                           
  2224                           
  2225                           ;psect for function _TMR0_Initialize
  2226  0334                     _TMR0_Initialize:	
  2227                           
  2228                           ;tmr0.c: 69: OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | 0xD4 & 0x3F);
  2229                           
  2230                           ;incstack = 0
  2231                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2232  0334  0021               	movlb	1	; select bank1
  2233  0335  0815               	movf	21,w	;volatile
  2234  0336  39C0               	andlw	192
  2235  0337  3814               	iorlw	20
  2236  0338  0095               	movwf	21	;volatile
  2237                           
  2238                           ;tmr0.c: 72: TMR0 = 0x83;
  2239  0339  3083               	movlw	131
  2240  033A  0020               	movlb	0	; select bank0
  2241  033B  0095               	movwf	21	;volatile
  2242                           
  2243                           ;tmr0.c: 75: timer0ReloadVal= 131;
  2244  033C  3083               	movlw	131
  2245  033D  00F4               	movwf	??_TMR0_Initialize
  2246  033E  0874               	movf	??_TMR0_Initialize,w
  2247  033F  00E3               	movwf	_timer0ReloadVal	;volatile
  2248                           
  2249                           ;tmr0.c: 78: INTCONbits.TMR0IF = 0;
  2250  0340  110B               	bcf	11,2	;volatile
  2251                           
  2252                           ;tmr0.c: 81: INTCONbits.TMR0IE = 1;
  2253  0341  168B               	bsf	11,5	;volatile
  2254                           
  2255                           ;tmr0.c: 84: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  2256  0342  30B5               	movlw	low _TMR0_DefaultInterruptHandler
  2257  0343  00F2               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  2258  0344  3003               	movlw	high _TMR0_DefaultInterruptHandler
  2259  0345  00F3               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  2260  0346  3183  23A4         	fcall	_TMR0_SetInterruptHandler
  2261  0348  0008               	return
  2262  0349                     __end_of_TMR0_Initialize:	
  2263                           
  2264                           	psect	text5
  2265  03A4                     __ptext5:	
  2266 ;; *************** function _TMR0_SetInterruptHandler *****************
  2267 ;; Defined at:
  2268 ;;		line 176 in file "mcc_generated_files/tmr0.c"
  2269 ;; Parameters:    Size  Location     Type
  2270 ;;  InterruptHan    2    2[COMMON] PTR FTN()void 
  2271 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  2272 ;; Auto vars:     Size  Location     Type
  2273 ;;		None
  2274 ;; Return value:  Size  Location     Type
  2275 ;;                  1    wreg      void 
  2276 ;; Registers used:
  2277 ;;		wreg
  2278 ;; Tracked objects:
  2279 ;;		On entry : 0/0
  2280 ;;		On exit  : 0/0
  2281 ;;		Unchanged: 0/0
  2282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2283 ;;      Params:         2       0       0       0
  2284 ;;      Locals:         0       0       0       0
  2285 ;;      Temps:          0       0       0       0
  2286 ;;      Totals:         2       0       0       0
  2287 ;;Total ram usage:        2 bytes
  2288 ;; Hardware stack levels used:    1
  2289 ;; Hardware stack levels required when called:    4
  2290 ;; This function calls:
  2291 ;;		Nothing
  2292 ;; This function is called by:
  2293 ;;		_TMR0_Initialize
  2294 ;; This function uses a non-reentrant model
  2295 ;;
  2296                           
  2297                           
  2298                           ;psect for function _TMR0_SetInterruptHandler
  2299  03A4                     _TMR0_SetInterruptHandler:	
  2300                           
  2301                           ;tmr0.c: 177: TMR0_InterruptHandler = InterruptHandler;
  2302                           
  2303                           ;incstack = 0
  2304                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  2305  03A4  0873               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  2306  03A5  0020               	movlb	0	; select bank0
  2307  03A6  00E0               	movwf	_TMR0_InterruptHandler+1
  2308  03A7  0872               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  2309  03A8  00DF               	movwf	_TMR0_InterruptHandler
  2310  03A9  0008               	return
  2311  03AA                     __end_of_TMR0_SetInterruptHandler:	
  2312                           
  2313                           	psect	text6
  2314  02FF                     __ptext6:	
  2315 ;; *************** function _PIN_MANAGER_Initialize *****************
  2316 ;; Defined at:
  2317 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  2318 ;; Parameters:    Size  Location     Type
  2319 ;;		None
  2320 ;; Auto vars:     Size  Location     Type
  2321 ;;		None
  2322 ;; Return value:  Size  Location     Type
  2323 ;;                  1    wreg      void 
  2324 ;; Registers used:
  2325 ;;		wreg, status,2
  2326 ;; Tracked objects:
  2327 ;;		On entry : 0/0
  2328 ;;		On exit  : 0/0
  2329 ;;		Unchanged: 0/0
  2330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2331 ;;      Params:         0       0       0       0
  2332 ;;      Locals:         0       0       0       0
  2333 ;;      Temps:          0       0       0       0
  2334 ;;      Totals:         0       0       0       0
  2335 ;;Total ram usage:        0 bytes
  2336 ;; Hardware stack levels used:    1
  2337 ;; Hardware stack levels required when called:    4
  2338 ;; This function calls:
  2339 ;;		Nothing
  2340 ;; This function is called by:
  2341 ;;		_SYSTEM_Initialize
  2342 ;; This function uses a non-reentrant model
  2343 ;;
  2344                           
  2345                           
  2346                           ;psect for function _PIN_MANAGER_Initialize
  2347  02FF                     _PIN_MANAGER_Initialize:	
  2348                           
  2349                           ;pin_manager.c: 62: LATA = 0x04;
  2350                           
  2351                           ;incstack = 0
  2352                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  2353  02FF  3004               	movlw	4
  2354  0300  0022               	movlb	2	; select bank2
  2355  0301  008C               	movwf	12	;volatile
  2356                           
  2357                           ;pin_manager.c: 63: LATB = 0x00;
  2358  0302  018D               	clrf	13	;volatile
  2359                           
  2360                           ;pin_manager.c: 64: LATC = 0x00;
  2361  0303  018E               	clrf	14	;volatile
  2362                           
  2363                           ;pin_manager.c: 69: TRISA = 0x3B;
  2364  0304  303B               	movlw	59
  2365  0305  0021               	movlb	1	; select bank1
  2366  0306  008C               	movwf	12	;volatile
  2367                           
  2368                           ;pin_manager.c: 70: TRISB = 0xF0;
  2369  0307  30F0               	movlw	240
  2370  0308  008D               	movwf	13	;volatile
  2371                           
  2372                           ;pin_manager.c: 71: TRISC = 0x00;
  2373  0309  018E               	clrf	14	;volatile
  2374                           
  2375                           ;pin_manager.c: 76: ANSELC = 0x00;
  2376  030A  0023               	movlb	3	; select bank3
  2377  030B  018E               	clrf	14	;volatile
  2378                           
  2379                           ;pin_manager.c: 77: ANSELB = 0x00;
  2380  030C  018D               	clrf	13	;volatile
  2381                           
  2382                           ;pin_manager.c: 78: ANSELA = 0x12;
  2383  030D  3012               	movlw	18
  2384  030E  008C               	movwf	12	;volatile
  2385                           
  2386                           ;pin_manager.c: 83: WPUB = 0x50;
  2387  030F  3050               	movlw	80
  2388  0310  0024               	movlb	4	; select bank4
  2389  0311  008D               	movwf	13	;volatile
  2390                           
  2391                           ;pin_manager.c: 84: WPUA = 0x01;
  2392  0312  3001               	movlw	1
  2393  0313  008C               	movwf	12	;volatile
  2394                           
  2395                           ;pin_manager.c: 85: WPUC = 0x00;
  2396  0314  018E               	clrf	14	;volatile
  2397                           
  2398                           ;pin_manager.c: 86: OPTION_REGbits.nWPUEN = 0;
  2399  0315  0021               	movlb	1	; select bank1
  2400  0316  1395               	bcf	21,7	;volatile
  2401                           
  2402                           ;pin_manager.c: 95: APFCON0 = 0x00;
  2403  0317  0022               	movlb	2	; select bank2
  2404  0318  019D               	clrf	29	;volatile
  2405                           
  2406                           ;pin_manager.c: 96: APFCON1 = 0x00;
  2407  0319  019E               	clrf	30	;volatile
  2408  031A  0008               	return
  2409  031B                     __end_of_PIN_MANAGER_Initialize:	
  2410                           
  2411                           	psect	text7
  2412  038A                     __ptext7:	
  2413 ;; *************** function _OSCILLATOR_Initialize *****************
  2414 ;; Defined at:
  2415 ;;		line 59 in file "mcc_generated_files/mcc.c"
  2416 ;; Parameters:    Size  Location     Type
  2417 ;;		None
  2418 ;; Auto vars:     Size  Location     Type
  2419 ;;		None
  2420 ;; Return value:  Size  Location     Type
  2421 ;;                  1    wreg      void 
  2422 ;; Registers used:
  2423 ;;		wreg, status,2
  2424 ;; Tracked objects:
  2425 ;;		On entry : 0/0
  2426 ;;		On exit  : 0/0
  2427 ;;		Unchanged: 0/0
  2428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2429 ;;      Params:         0       0       0       0
  2430 ;;      Locals:         0       0       0       0
  2431 ;;      Temps:          0       0       0       0
  2432 ;;      Totals:         0       0       0       0
  2433 ;;Total ram usage:        0 bytes
  2434 ;; Hardware stack levels used:    1
  2435 ;; Hardware stack levels required when called:    4
  2436 ;; This function calls:
  2437 ;;		Nothing
  2438 ;; This function is called by:
  2439 ;;		_SYSTEM_Initialize
  2440 ;; This function uses a non-reentrant model
  2441 ;;
  2442                           
  2443                           
  2444                           ;psect for function _OSCILLATOR_Initialize
  2445  038A                     _OSCILLATOR_Initialize:	
  2446                           
  2447                           ;mcc.c: 62: OSCCON = 0x7A;
  2448                           
  2449                           ;incstack = 0
  2450                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  2451  038A  307A               	movlw	122
  2452  038B  0021               	movlb	1	; select bank1
  2453  038C  0099               	movwf	25	;volatile
  2454                           
  2455                           ;mcc.c: 64: OSCTUNE = 0x00;
  2456  038D  0198               	clrf	24	;volatile
  2457                           
  2458                           ;mcc.c: 66: BORCON = 0x00;
  2459  038E  0022               	movlb	2	; select bank2
  2460  038F  0196               	clrf	22	;volatile
  2461  0390  0008               	return
  2462  0391                     __end_of_OSCILLATOR_Initialize:	
  2463                           
  2464                           	psect	text8
  2465  031B                     __ptext8:	
  2466 ;; *************** function _EUSART_Initialize *****************
  2467 ;; Defined at:
  2468 ;;		line 74 in file "mcc_generated_files/eusart.c"
  2469 ;; Parameters:    Size  Location     Type
  2470 ;;		None
  2471 ;; Auto vars:     Size  Location     Type
  2472 ;;		None
  2473 ;; Return value:  Size  Location     Type
  2474 ;;                  1    wreg      void 
  2475 ;; Registers used:
  2476 ;;		wreg, status,2, status,0, pclath, cstack
  2477 ;; Tracked objects:
  2478 ;;		On entry : 0/0
  2479 ;;		On exit  : 0/0
  2480 ;;		Unchanged: 0/0
  2481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2482 ;;      Params:         0       0       0       0
  2483 ;;      Locals:         0       0       0       0
  2484 ;;      Temps:          0       0       0       0
  2485 ;;      Totals:         0       0       0       0
  2486 ;;Total ram usage:        0 bytes
  2487 ;; Hardware stack levels used:    1
  2488 ;; Hardware stack levels required when called:    5
  2489 ;; This function calls:
  2490 ;;		_EUSART_SetRxInterruptHandler
  2491 ;; This function is called by:
  2492 ;;		_SYSTEM_Initialize
  2493 ;; This function uses a non-reentrant model
  2494 ;;
  2495                           
  2496                           
  2497                           ;psect for function _EUSART_Initialize
  2498  031B                     _EUSART_Initialize:	
  2499                           
  2500                           ;eusart.c: 77: PIE1bits.RCIE = 0;
  2501                           
  2502                           ;incstack = 0
  2503                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2504  031B  0021               	movlb	1	; select bank1
  2505  031C  1291               	bcf	17,5	;volatile
  2506                           
  2507                           ;eusart.c: 78: EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  2508  031D  3049               	movlw	low _EUSART_Receive_ISR
  2509  031E  00F2               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  2510  031F  3003               	movlw	high _EUSART_Receive_ISR
  2511  0320  00F3               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  2512  0321  3183  23AA         	fcall	_EUSART_SetRxInterruptHandler
  2513                           
  2514                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  2515  0323  0021               	movlb	1	; select bank1
  2516  0324  1211               	bcf	17,4	;volatile
  2517                           
  2518                           ;eusart.c: 84: BAUDCON = 0x08;
  2519  0325  3008               	movlw	8
  2520  0326  0023               	movlb	3	; select bank3
  2521  0327  009F               	movwf	31	;volatile
  2522                           
  2523                           ;eusart.c: 87: RCSTA = 0x90;
  2524  0328  3090               	movlw	144
  2525  0329  009D               	movwf	29	;volatile
  2526                           
  2527                           ;eusart.c: 90: TXSTA = 0x24;
  2528  032A  3024               	movlw	36
  2529  032B  009E               	movwf	30	;volatile
  2530                           
  2531                           ;eusart.c: 93: SPBRGL = 0xA0;
  2532  032C  30A0               	movlw	160
  2533  032D  009B               	movwf	27	;volatile
  2534                           
  2535                           ;eusart.c: 96: SPBRGH = 0x01;
  2536  032E  3001               	movlw	1
  2537  032F  009C               	movwf	28	;volatile
  2538                           
  2539                           ;eusart.c: 106: eusartRxCount = 0;
  2540  0330  01F8               	clrf	_eusartRxCount
  2541                           
  2542                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  2543  0331  0021               	movlb	1	; select bank1
  2544  0332  1691               	bsf	17,5	;volatile
  2545  0333  0008               	return
  2546  0334                     __end_of_EUSART_Initialize:	
  2547                           
  2548                           	psect	text9
  2549  03AA                     __ptext9:	
  2550 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  2551 ;; Defined at:
  2552 ;;		line 223 in file "mcc_generated_files/eusart.c"
  2553 ;; Parameters:    Size  Location     Type
  2554 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  2555 ;;		 -> EUSART_Receive_ISR(1), 
  2556 ;; Auto vars:     Size  Location     Type
  2557 ;;		None
  2558 ;; Return value:  Size  Location     Type
  2559 ;;                  1    wreg      void 
  2560 ;; Registers used:
  2561 ;;		wreg
  2562 ;; Tracked objects:
  2563 ;;		On entry : 0/0
  2564 ;;		On exit  : 0/0
  2565 ;;		Unchanged: 0/0
  2566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2567 ;;      Params:         2       0       0       0
  2568 ;;      Locals:         0       0       0       0
  2569 ;;      Temps:          0       0       0       0
  2570 ;;      Totals:         2       0       0       0
  2571 ;;Total ram usage:        2 bytes
  2572 ;; Hardware stack levels used:    1
  2573 ;; Hardware stack levels required when called:    4
  2574 ;; This function calls:
  2575 ;;		Nothing
  2576 ;; This function is called by:
  2577 ;;		_EUSART_Initialize
  2578 ;; This function uses a non-reentrant model
  2579 ;;
  2580                           
  2581                           
  2582                           ;psect for function _EUSART_SetRxInterruptHandler
  2583  03AA                     _EUSART_SetRxInterruptHandler:	
  2584                           
  2585                           ;eusart.c: 224: EUSART_RxDefaultInterruptHandler = interruptHandler;
  2586                           
  2587                           ;incstack = 0
  2588                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  2589  03AA  0873               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  2590  03AB  0020               	movlb	0	; select bank0
  2591  03AC  00E2               	movwf	_EUSART_RxDefaultInterruptHandler+1
  2592  03AD  0872               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  2593  03AE  00E1               	movwf	_EUSART_RxDefaultInterruptHandler
  2594  03AF  0008               	return
  2595  03B0                     __end_of_EUSART_SetRxInterruptHandler:	
  2596                           
  2597                           	psect	text10
  2598  01A0                     __ptext10:	
  2599 ;; *************** function _EUSART_Deal *****************
  2600 ;; Defined at:
  2601 ;;		line 228 in file "mcc_generated_files/eusart.c"
  2602 ;; Parameters:    Size  Location     Type
  2603 ;;		None
  2604 ;; Auto vars:     Size  Location     Type
  2605 ;;		None
  2606 ;; Return value:  Size  Location     Type
  2607 ;;                  1    wreg      void 
  2608 ;; Registers used:
  2609 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2610 ;; Tracked objects:
  2611 ;;		On entry : 0/0
  2612 ;;		On exit  : 0/0
  2613 ;;		Unchanged: 0/0
  2614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2615 ;;      Params:         0       0       0       0
  2616 ;;      Locals:         0       0       0       0
  2617 ;;      Temps:          2       0       0       0
  2618 ;;      Totals:         2       0       0       0
  2619 ;;Total ram usage:        2 bytes
  2620 ;; Hardware stack levels used:    1
  2621 ;; Hardware stack levels required when called:    6
  2622 ;; This function calls:
  2623 ;;		_Get_Device_Addr
  2624 ;;		_startTimeCtrl
  2625 ;;		_stopTimeCtrl
  2626 ;;		_testTimeCtrl
  2627 ;;		_workTimeCtrl
  2628 ;; This function is called by:
  2629 ;;		_main
  2630 ;; This function uses a non-reentrant model
  2631 ;;
  2632                           
  2633                           
  2634                           ;psect for function _EUSART_Deal
  2635  01A0                     _EUSART_Deal:	
  2636                           
  2637                           ;eusart.c: 231: if(eusartRxBuffer[0] == 0xA5 && eusartRxBuffer[1] == 0x5A)
  2638                           
  2639                           ;incstack = 0
  2640                           ; Regs used in _EUSART_Deal: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2641  01A0  30A5               	movlw	165
  2642  01A1  0022               	movlb	2	; select bank2
  2643  01A2  0620               	xorwf	_eusartRxBuffer^(0+256),w
  2644  01A3  1D03               	btfss	3,2
  2645  01A4  0008               	return
  2646  01A5  305A               	movlw	90
  2647  01A6  0621               	xorwf	(_eusartRxBuffer^(0+256)+1),w
  2648  01A7  1D03               	btfss	3,2
  2649  01A8  0008               	return
  2650                           
  2651                           ;eusart.c: 232: {
  2652                           ;eusart.c: 234: if(eusartRxBuffer[2] == EusartRxLenth-5)
  2653  01A9  0020               	movlb	0	; select bank0
  2654  01AA  0848               	movf	_EusartRxLenth,w
  2655  01AB  3EFB               	addlw	251
  2656  01AC  00F5               	movwf	??_EUSART_Deal
  2657  01AD  30FF               	movlw	255
  2658  01AE  1803               	skipnc
  2659  01AF  3000               	movlw	0
  2660  01B0  00F6               	movwf	??_EUSART_Deal+1
  2661  01B1  0022               	movlb	2	; select bank2
  2662  01B2  0822               	movf	(_eusartRxBuffer^(0+256)+2),w
  2663  01B3  0675               	xorwf	??_EUSART_Deal,w
  2664  01B4  0476               	iorwf	??_EUSART_Deal+1,w
  2665  01B5  1D03               	skipz
  2666  01B6  0008               	return
  2667                           
  2668                           ;eusart.c: 235: {
  2669                           ;eusart.c: 236: if(eusartRxBuffer[4] == Get_Device_Addr())
  2670  01B7  3183  236B  3181   	fcall	_Get_Device_Addr
  2671  01BA  0022               	movlb	2	; select bank2
  2672  01BB  0624               	xorwf	(_eusartRxBuffer^(0+256)+4),w
  2673  01BC  1D03               	skipz
  2674  01BD  29E6               	goto	l1341
  2675                           
  2676                           ;eusart.c: 237: {
  2677                           ;eusart.c: 238: if(eusartRxBuffer[3] == 0x1C)
  2678  01BE  301C               	movlw	28
  2679  01BF  0623               	xorwf	(_eusartRxBuffer^(0+256)+3),w
  2680  01C0  1D03               	btfss	3,2
  2681  01C1  29C6               	goto	l1327
  2682                           
  2683                           ;eusart.c: 239: {
  2684                           ;eusart.c: 240: stopTimeCtrl();
  2685  01C2  3182  22A6  3181   	fcall	_stopTimeCtrl
  2686                           
  2687                           ;eusart.c: 241: }
  2688  01C5  29E6               	goto	l1341
  2689  01C6                     l1327:	
  2690                           
  2691                           ;eusart.c: 242: else if(eusartRxBuffer[3] == 0x1D)
  2692  01C6  301D               	movlw	29
  2693  01C7  0022               	movlb	2	; select bank2
  2694  01C8  0623               	xorwf	(_eusartRxBuffer^(0+256)+3),w
  2695  01C9  1D03               	btfss	3,2
  2696  01CA  29CF               	goto	l1331
  2697                           
  2698                           ;eusart.c: 243: {
  2699                           ;eusart.c: 244: startTimeCtrl();
  2700  01CB  3183  2382  3181   	fcall	_startTimeCtrl
  2701                           
  2702                           ;eusart.c: 245: }
  2703  01CE  29E6               	goto	l1341
  2704  01CF                     l1331:	
  2705                           
  2706                           ;eusart.c: 246: else if(eusartRxBuffer[3] >= 0x21 && eusartRxBuffer[3] <= 0x28)
  2707  01CF  3021               	movlw	33
  2708  01D0  0022               	movlb	2	; select bank2
  2709  01D1  0223               	subwf	(_eusartRxBuffer^(0+256)+3),w
  2710  01D2  1C03               	skipc
  2711  01D3  29DE               	goto	l1337
  2712  01D4  3029               	movlw	41
  2713  01D5  0223               	subwf	(_eusartRxBuffer^(0+256)+3),w
  2714  01D6  1803               	skipnc
  2715  01D7  29DE               	goto	l1337
  2716                           
  2717                           ;eusart.c: 247: {
  2718                           ;eusart.c: 248: testTimeCtrl(eusartRxBuffer[3] - 0x20);
  2719  01D8  0823               	movf	(_eusartRxBuffer^(0+256)+3),w
  2720  01D9  3EE0               	addlw	224
  2721  01DA  3182  2275  3181   	fcall	_testTimeCtrl
  2722                           
  2723                           ;eusart.c: 249: }
  2724  01DD  29E6               	goto	l1341
  2725  01DE                     l1337:	
  2726                           
  2727                           ;eusart.c: 250: else if(eusartRxBuffer[3] == 0x4E)
  2728  01DE  304E               	movlw	78
  2729  01DF  0022               	movlb	2	; select bank2
  2730  01E0  0623               	xorwf	(_eusartRxBuffer^(0+256)+3),w
  2731  01E1  1D03               	btfss	3,2
  2732  01E2  29E6               	goto	l1341
  2733                           
  2734                           ;eusart.c: 251: {
  2735                           ;eusart.c: 252: workTimeCtrl();
  2736  01E3  3182  22D3  3181   	fcall	_workTimeCtrl
  2737  01E6                     l1341:	
  2738                           
  2739                           ;eusart.c: 253: }
  2740                           ;eusart.c: 254: }
  2741                           ;eusart.c: 255: if(eusartRxBuffer[3] == 0X1F)
  2742  01E6  301F               	movlw	31
  2743  01E7  0022               	movlb	2	; select bank2
  2744  01E8  0623               	xorwf	(_eusartRxBuffer^(0+256)+3),w
  2745  01E9  1D03               	btfss	3,2
  2746  01EA  0008               	return
  2747                           
  2748                           ;eusart.c: 256: {
  2749                           ;eusart.c: 257: timeCtrlMode = eusartRxBuffer[4];
  2750  01EB  0824               	movf	(_eusartRxBuffer^(0+256)+4),w
  2751  01EC  00F5               	movwf	??_EUSART_Deal
  2752  01ED  0875               	movf	??_EUSART_Deal,w
  2753  01EE  00FA               	movwf	_timeCtrlMode
  2754  01EF  0008               	return
  2755  01F0                     __end_of_EUSART_Deal:	
  2756                           
  2757                           	psect	text11
  2758  02D3                     __ptext11:	
  2759 ;; *************** function _workTimeCtrl *****************
  2760 ;; Defined at:
  2761 ;;		line 32 in file "mcc_generated_files/time_ctrl.c"
  2762 ;; Parameters:    Size  Location     Type
  2763 ;;		None
  2764 ;; Auto vars:     Size  Location     Type
  2765 ;;  i               1    4[COMMON] unsigned char 
  2766 ;; Return value:  Size  Location     Type
  2767 ;;                  1    wreg      void 
  2768 ;; Registers used:
  2769 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2770 ;; Tracked objects:
  2771 ;;		On entry : 0/0
  2772 ;;		On exit  : 0/0
  2773 ;;		Unchanged: 0/0
  2774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2775 ;;      Params:         0       0       0       0
  2776 ;;      Locals:         1       0       0       0
  2777 ;;      Temps:          2       0       0       0
  2778 ;;      Totals:         3       0       0       0
  2779 ;;Total ram usage:        3 bytes
  2780 ;; Hardware stack levels used:    1
  2781 ;; Hardware stack levels required when called:    4
  2782 ;; This function calls:
  2783 ;;		Nothing
  2784 ;; This function is called by:
  2785 ;;		_EUSART_Deal
  2786 ;; This function uses a non-reentrant model
  2787 ;;
  2788                           
  2789                           
  2790                           ;psect for function _workTimeCtrl
  2791  02D3                     _workTimeCtrl:	
  2792                           
  2793                           ;time_ctrl.c: 34: uint8_t i;
  2794                           ;time_ctrl.c: 36: timeCtrlStartFlag = 0;
  2795                           
  2796                           ;incstack = 0
  2797                           ; Regs used in _workTimeCtrl: [wreg+fsr1l+fsr1h+status,2+status,0]
  2798  02D3  01F9               	clrf	_timeCtrlStartFlag
  2799                           
  2800                           ;time_ctrl.c: 37: readSignalflag = 0;
  2801  02D4  0020               	movlb	0	; select bank0
  2802  02D5  01C2               	clrf	_readSignalflag
  2803                           
  2804                           ;time_ctrl.c: 38: do { LATAbits.LATA2 = 0; } while(0);
  2805  02D6  0022               	movlb	2	; select bank2
  2806  02D7  110C               	bcf	12,2	;volatile
  2807                           
  2808                           ;time_ctrl.c: 40: for(i=0; i<8; i++)
  2809  02D8  01F4               	clrf	workTimeCtrl@i
  2810  02D9                     L2:	
  2811  02D9  3008               	movlw	8
  2812  02DA  0274               	subwf	workTimeCtrl@i,w
  2813  02DB  1803               	btfsc	3,0
  2814  02DC  0008               	return
  2815                           
  2816                           ;time_ctrl.c: 41: {
  2817                           ;time_ctrl.c: 42: IQRSta[i] = 0;
  2818  02DD  0874               	movf	workTimeCtrl@i,w
  2819  02DE  3E38               	addlw	(low (_IQRSta| 0))& (0+255)
  2820  02DF  0086               	movwf	6
  2821  02E0  0187               	clrf	7
  2822  02E1  0181               	clrf	1
  2823                           
  2824                           ;time_ctrl.c: 43: testIQRSta[i] = 0;
  2825  02E2  0874               	movf	workTimeCtrl@i,w
  2826  02E3  3E30               	addlw	(low (_testIQRSta| 0))& (0+255)
  2827  02E4  0086               	movwf	6
  2828  02E5  0187               	clrf	7
  2829  02E6  0181               	clrf	1
  2830                           
  2831                           ;time_ctrl.c: 44: IQRPreSta[i] = 3;
  2832  02E7  3003               	movlw	3
  2833  02E8  00F2               	movwf	??_workTimeCtrl
  2834  02E9  0874               	movf	workTimeCtrl@i,w
  2835  02EA  3E57               	addlw	(low (_IQRPreSta| 0))& (0+255)
  2836  02EB  0086               	movwf	6
  2837  02EC  0187               	clrf	7
  2838  02ED  0872               	movf	??_workTimeCtrl,w
  2839  02EE  0081               	movwf	1
  2840                           
  2841                           ;time_ctrl.c: 46: LATC |= 1 << i;
  2842  02EF  3001               	movlw	1
  2843  02F0  00F2               	movwf	??_workTimeCtrl
  2844  02F1  0A74               	incf	workTimeCtrl@i,w
  2845  02F2  2AF4               	goto	u744
  2846  02F3                     u745:	
  2847  02F3  35F2               	lslf	??_workTimeCtrl,f
  2848  02F4                     u744:	
  2849  02F4  0B89               	decfsz	9,f
  2850  02F5  2AF3               	goto	u745
  2851  02F6  0872               	movf	??_workTimeCtrl,w
  2852  02F7  00F3               	movwf	??_workTimeCtrl+1
  2853  02F8  0873               	movf	??_workTimeCtrl+1,w
  2854  02F9  048E               	iorwf	14,f	;volatile
  2855  02FA  3001               	movlw	1
  2856  02FB  00F2               	movwf	??_workTimeCtrl
  2857  02FC  0872               	movf	??_workTimeCtrl,w
  2858  02FD  07F4               	addwf	workTimeCtrl@i,f
  2859  02FE  2AD9               	goto	L2
  2860  02FF                     __end_of_workTimeCtrl:	
  2861                           
  2862                           	psect	text12
  2863  0275                     __ptext12:	
  2864 ;; *************** function _testTimeCtrl *****************
  2865 ;; Defined at:
  2866 ;;		line 74 in file "mcc_generated_files/time_ctrl.c"
  2867 ;; Parameters:    Size  Location     Type
  2868 ;;  IQRNum          1    wreg     unsigned char 
  2869 ;; Auto vars:     Size  Location     Type
  2870 ;;  IQRNum          1    4[COMMON] unsigned char 
  2871 ;; Return value:  Size  Location     Type
  2872 ;;                  1    wreg      void 
  2873 ;; Registers used:
  2874 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2875 ;; Tracked objects:
  2876 ;;		On entry : 0/0
  2877 ;;		On exit  : 0/0
  2878 ;;		Unchanged: 0/0
  2879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2880 ;;      Params:         0       0       0       0
  2881 ;;      Locals:         1       0       0       0
  2882 ;;      Temps:          2       0       0       0
  2883 ;;      Totals:         3       0       0       0
  2884 ;;Total ram usage:        3 bytes
  2885 ;; Hardware stack levels used:    1
  2886 ;; Hardware stack levels required when called:    4
  2887 ;; This function calls:
  2888 ;;		Nothing
  2889 ;; This function is called by:
  2890 ;;		_EUSART_Deal
  2891 ;; This function uses a non-reentrant model
  2892 ;;
  2893                           
  2894                           
  2895                           ;psect for function _testTimeCtrl
  2896  0275                     _testTimeCtrl:	
  2897                           
  2898                           ;incstack = 0
  2899                           ; Regs used in _testTimeCtrl: [wreg+fsr1l+fsr1h+status,2+status,0]
  2900                           ;testTimeCtrl@IQRNum stored from wreg
  2901  0275  00F4               	movwf	testTimeCtrl@IQRNum
  2902                           
  2903                           ;time_ctrl.c: 76: testIQRSta[IQRNum - 1] ^= 0x01;
  2904  0276  3001               	movlw	1
  2905  0277  00F2               	movwf	??_testTimeCtrl
  2906  0278  0874               	movf	testTimeCtrl@IQRNum,w
  2907  0279  3EFF               	addlw	255
  2908  027A  3E30               	addlw	(low (_testIQRSta| 0))& (0+255)
  2909  027B  0086               	movwf	6
  2910  027C  0187               	clrf	7
  2911  027D  0872               	movf	??_testTimeCtrl,w
  2912  027E  0681               	xorwf	1,f
  2913                           
  2914                           ;time_ctrl.c: 78: if(testIQRSta[IQRNum - 1])
  2915  027F  0874               	movf	testTimeCtrl@IQRNum,w
  2916  0280  3EFF               	addlw	255
  2917  0281  3E30               	addlw	(low (_testIQRSta| 0))& (0+255)
  2918  0282  0086               	movwf	6
  2919  0283  0187               	clrf	7
  2920  0284  0801               	movf	1,w
  2921  0285  1903               	btfsc	3,2
  2922  0286  2A96               	goto	l1281
  2923                           
  2924                           ;time_ctrl.c: 79: LATC |= 1 << (IQRNum - 1);
  2925  0287  3001               	movlw	1
  2926  0288  00F2               	movwf	??_testTimeCtrl
  2927  0289  0874               	movf	testTimeCtrl@IQRNum,w
  2928  028A  3EFF               	addlw	-1
  2929  028B  0A89               	incf	9,f
  2930  028C  2A8E               	goto	u714
  2931  028D                     u715:	
  2932  028D  35F2               	lslf	??_testTimeCtrl,f
  2933  028E                     u714:	
  2934  028E  0B89               	decfsz	9,f
  2935  028F  2A8D               	goto	u715
  2936  0290  0872               	movf	??_testTimeCtrl,w
  2937  0291  00F3               	movwf	??_testTimeCtrl+1
  2938  0292  0873               	movf	??_testTimeCtrl+1,w
  2939  0293  0022               	movlb	2	; select bank2
  2940  0294  048E               	iorwf	14,f	;volatile
  2941  0295  0008               	return
  2942  0296                     l1281:	
  2943                           
  2944                           ;time_ctrl.c: 80: else
  2945                           ;time_ctrl.c: 81: LATC &= ~(1<<(IQRNum - 1));
  2946  0296  3001               	movlw	1
  2947  0297  00F2               	movwf	??_testTimeCtrl
  2948  0298  0874               	movf	testTimeCtrl@IQRNum,w
  2949  0299  3EFF               	addlw	-1
  2950  029A  0A89               	incf	9,f
  2951  029B  2A9D               	goto	u724
  2952  029C                     u725:	
  2953  029C  35F2               	lslf	??_testTimeCtrl,f
  2954  029D                     u724:	
  2955  029D  0B89               	decfsz	9,f
  2956  029E  2A9C               	goto	u725
  2957  029F  0872               	movf	??_testTimeCtrl,w
  2958  02A0  3AFF               	xorlw	255
  2959  02A1  00F3               	movwf	??_testTimeCtrl+1
  2960  02A2  0873               	movf	??_testTimeCtrl+1,w
  2961  02A3  0022               	movlb	2	; select bank2
  2962  02A4  058E               	andwf	14,f	;volatile
  2963  02A5  0008               	return
  2964  02A6                     __end_of_testTimeCtrl:	
  2965                           
  2966                           	psect	text13
  2967  0382                     __ptext13:	
  2968 ;; *************** function _startTimeCtrl *****************
  2969 ;; Defined at:
  2970 ;;		line 50 in file "mcc_generated_files/time_ctrl.c"
  2971 ;; Parameters:    Size  Location     Type
  2972 ;;		None
  2973 ;; Auto vars:     Size  Location     Type
  2974 ;;		None
  2975 ;; Return value:  Size  Location     Type
  2976 ;;                  1    wreg      void 
  2977 ;; Registers used:
  2978 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2979 ;; Tracked objects:
  2980 ;;		On entry : 0/0
  2981 ;;		On exit  : 0/0
  2982 ;;		Unchanged: 0/0
  2983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2984 ;;      Params:         0       0       0       0
  2985 ;;      Locals:         0       0       0       0
  2986 ;;      Temps:          0       0       0       0
  2987 ;;      Totals:         0       0       0       0
  2988 ;;Total ram usage:        0 bytes
  2989 ;; Hardware stack levels used:    1
  2990 ;; Hardware stack levels required when called:    5
  2991 ;; This function calls:
  2992 ;;		_getTimeData
  2993 ;;		_stopTimeCtrl
  2994 ;; This function is called by:
  2995 ;;		_EUSART_Deal
  2996 ;; This function uses a non-reentrant model
  2997 ;;
  2998                           
  2999                           
  3000                           ;psect for function _startTimeCtrl
  3001  0382                     _startTimeCtrl:	
  3002                           
  3003                           ;time_ctrl.c: 52: getTimeData();
  3004                           
  3005                           ;incstack = 0
  3006                           ; Regs used in _startTimeCtrl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3007  0382  3181  212E  3183   	fcall	_getTimeData
  3008                           
  3009                           ;time_ctrl.c: 53: stopTimeCtrl();
  3010  0385  3182  22A6         	fcall	_stopTimeCtrl
  3011                           
  3012                           ;time_ctrl.c: 54: timeCtrlStartFlag = 1;
  3013  0387  01F9               	clrf	_timeCtrlStartFlag
  3014  0388  0AF9               	incf	_timeCtrlStartFlag,f
  3015  0389  0008               	return
  3016  038A                     __end_of_startTimeCtrl:	
  3017                           
  3018                           	psect	text14
  3019  02A6                     __ptext14:	
  3020 ;; *************** function _stopTimeCtrl *****************
  3021 ;; Defined at:
  3022 ;;		line 57 in file "mcc_generated_files/time_ctrl.c"
  3023 ;; Parameters:    Size  Location     Type
  3024 ;;		None
  3025 ;; Auto vars:     Size  Location     Type
  3026 ;;  i               1    4[COMMON] unsigned char 
  3027 ;; Return value:  Size  Location     Type
  3028 ;;                  1    wreg      void 
  3029 ;; Registers used:
  3030 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3031 ;; Tracked objects:
  3032 ;;		On entry : 0/0
  3033 ;;		On exit  : 0/0
  3034 ;;		Unchanged: 0/0
  3035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3036 ;;      Params:         0       0       0       0
  3037 ;;      Locals:         1       0       0       0
  3038 ;;      Temps:          2       0       0       0
  3039 ;;      Totals:         3       0       0       0
  3040 ;;Total ram usage:        3 bytes
  3041 ;; Hardware stack levels used:    1
  3042 ;; Hardware stack levels required when called:    4
  3043 ;; This function calls:
  3044 ;;		Nothing
  3045 ;; This function is called by:
  3046 ;;		_EUSART_Deal
  3047 ;;		_startTimeCtrl
  3048 ;;		_main
  3049 ;; This function uses a non-reentrant model
  3050 ;;
  3051                           
  3052                           
  3053                           ;psect for function _stopTimeCtrl
  3054  02A6                     _stopTimeCtrl:	
  3055                           
  3056                           ;time_ctrl.c: 59: uint8_t i;
  3057                           ;time_ctrl.c: 60: timeCtrlStartFlag = 0;
  3058                           
  3059                           ;incstack = 0
  3060                           ; Regs used in _stopTimeCtrl: [wreg+fsr1l+fsr1h+status,2+status,0]
  3061  02A6  01F9               	clrf	_timeCtrlStartFlag
  3062                           
  3063                           ;time_ctrl.c: 61: readSignalflag = 0;
  3064  02A7  0020               	movlb	0	; select bank0
  3065  02A8  01C2               	clrf	_readSignalflag
  3066                           
  3067                           ;time_ctrl.c: 63: do { LATAbits.LATA2 = 1; } while(0);
  3068  02A9  0022               	movlb	2	; select bank2
  3069  02AA  150C               	bsf	12,2	;volatile
  3070                           
  3071                           ;time_ctrl.c: 65: for(i=0; i<8; i++)
  3072  02AB  01F4               	clrf	stopTimeCtrl@i
  3073  02AC                     L3:	
  3074  02AC  3008               	movlw	8
  3075  02AD  0274               	subwf	stopTimeCtrl@i,w
  3076  02AE  1803               	btfsc	3,0
  3077  02AF  0008               	return
  3078                           
  3079                           ;time_ctrl.c: 66: {
  3080                           ;time_ctrl.c: 67: IQRSta[i] = 0;
  3081  02B0  0874               	movf	stopTimeCtrl@i,w
  3082  02B1  3E38               	addlw	(low (_IQRSta| 0))& (0+255)
  3083  02B2  0086               	movwf	6
  3084  02B3  0187               	clrf	7
  3085  02B4  0181               	clrf	1
  3086                           
  3087                           ;time_ctrl.c: 68: testIQRSta[i] = 0;
  3088  02B5  0874               	movf	stopTimeCtrl@i,w
  3089  02B6  3E30               	addlw	(low (_testIQRSta| 0))& (0+255)
  3090  02B7  0086               	movwf	6
  3091  02B8  0187               	clrf	7
  3092  02B9  0181               	clrf	1
  3093                           
  3094                           ;time_ctrl.c: 69: IQRPreSta[i] = 3;
  3095  02BA  3003               	movlw	3
  3096  02BB  00F2               	movwf	??_stopTimeCtrl
  3097  02BC  0874               	movf	stopTimeCtrl@i,w
  3098  02BD  3E57               	addlw	(low (_IQRPreSta| 0))& (0+255)
  3099  02BE  0086               	movwf	6
  3100  02BF  0187               	clrf	7
  3101  02C0  0872               	movf	??_stopTimeCtrl,w
  3102  02C1  0081               	movwf	1
  3103                           
  3104                           ;time_ctrl.c: 70: LATC &= ~(1<<i);
  3105  02C2  3001               	movlw	1
  3106  02C3  00F2               	movwf	??_stopTimeCtrl
  3107  02C4  0A74               	incf	stopTimeCtrl@i,w
  3108  02C5  2AC7               	goto	u554
  3109  02C6                     u555:	
  3110  02C6  35F2               	lslf	??_stopTimeCtrl,f
  3111  02C7                     u554:	
  3112  02C7  0B89               	decfsz	9,f
  3113  02C8  2AC6               	goto	u555
  3114  02C9  0872               	movf	??_stopTimeCtrl,w
  3115  02CA  3AFF               	xorlw	255
  3116  02CB  00F3               	movwf	??_stopTimeCtrl+1
  3117  02CC  0873               	movf	??_stopTimeCtrl+1,w
  3118  02CD  058E               	andwf	14,f	;volatile
  3119  02CE  3001               	movlw	1
  3120  02CF  00F2               	movwf	??_stopTimeCtrl
  3121  02D0  0872               	movf	??_stopTimeCtrl,w
  3122  02D1  07F4               	addwf	stopTimeCtrl@i,f
  3123  02D2  2AAC               	goto	L3
  3124  02D3                     __end_of_stopTimeCtrl:	
  3125                           
  3126                           	psect	text15
  3127  012E                     __ptext15:	
  3128 ;; *************** function _getTimeData *****************
  3129 ;; Defined at:
  3130 ;;		line 16 in file "mcc_generated_files/time_ctrl.c"
  3131 ;; Parameters:    Size  Location     Type
  3132 ;;		None
  3133 ;; Auto vars:     Size  Location     Type
  3134 ;;  j               1    4[COMMON] unsigned char 
  3135 ;;  i               1    3[COMMON] unsigned char 
  3136 ;;  cnt             1    2[COMMON] unsigned char 
  3137 ;; Return value:  Size  Location     Type
  3138 ;;                  1    wreg      void 
  3139 ;; Registers used:
  3140 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3141 ;; Tracked objects:
  3142 ;;		On entry : 0/0
  3143 ;;		On exit  : 0/0
  3144 ;;		Unchanged: 0/0
  3145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3146 ;;      Params:         0       0       0       0
  3147 ;;      Locals:         3       0       0       0
  3148 ;;      Temps:          0      13       0       0
  3149 ;;      Totals:         3      13       0       0
  3150 ;;Total ram usage:       16 bytes
  3151 ;; Hardware stack levels used:    1
  3152 ;; Hardware stack levels required when called:    4
  3153 ;; This function calls:
  3154 ;;		Nothing
  3155 ;; This function is called by:
  3156 ;;		_startTimeCtrl
  3157 ;; This function uses a non-reentrant model
  3158 ;;
  3159                           
  3160                           
  3161                           ;psect for function _getTimeData
  3162  012E                     _getTimeData:	
  3163                           
  3164                           ;time_ctrl.c: 18: uint8_t i, j;
  3165                           ;time_ctrl.c: 19: uint8_t cnt = 0;
  3166                           
  3167                           ;incstack = 0
  3168                           ; Regs used in _getTimeData: [wreg+fsr1l+fsr1h+status,2+status,0]
  3169  012E  01F2               	clrf	getTimeData@cnt
  3170                           
  3171                           ;time_ctrl.c: 20: for(i=0; i<8; i++)
  3172  012F  01F3               	clrf	getTimeData@i
  3173  0130                     L4:	
  3174  0130  3008               	movlw	8
  3175  0131  0273               	subwf	getTimeData@i,w
  3176  0132  1803               	btfsc	3,0
  3177  0133  0008               	return
  3178                           
  3179                           ;time_ctrl.c: 21: {
  3180                           ;time_ctrl.c: 22: for(j=0; j<4; j++)
  3181  0134  01F4               	clrf	getTimeData@j
  3182  0135  3004               	movlw	4
  3183  0136  0274               	subwf	getTimeData@j,w
  3184  0137  1803               	btfsc	3,0
  3185  0138  299A               	goto	l1169
  3186  0139                     l1161:	
  3187                           
  3188                           ;time_ctrl.c: 23: {
  3189                           ;time_ctrl.c: 24: timeCtrlValue[i][j] = eusartRxBuffer[cnt+5];
  3190  0139  0872               	movf	getTimeData@cnt,w
  3191  013A  3E05               	addlw	5
  3192  013B  3E20               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  3193  013C  0086               	movwf	6
  3194  013D  3001               	movlw	1	; select bank2/3
  3195  013E  0087               	movwf	7
  3196  013F  0801               	movf	1,w
  3197  0140  0020               	movlb	0	; select bank0
  3198  0141  00CA               	movwf	??_getTimeData
  3199  0142  01CB               	clrf	??_getTimeData+1
  3200  0143  0873               	movf	getTimeData@i,w
  3201  0144  00CC               	movwf	??_getTimeData+2
  3202  0145  3003               	movlw	3
  3203  0146                     u595:	
  3204  0146  35CC               	lslf	??_getTimeData+2,f
  3205  0147  0B89               	decfsz	9,f
  3206  0148  2946               	goto	u595
  3207  0149  30A0               	movlw	(low (_timeCtrlValue| 0))& (0+255)
  3208  014A  074C               	addwf	??_getTimeData+2,w
  3209  014B  00CD               	movwf	??_getTimeData+3
  3210  014C  3574               	lslf	getTimeData@j,w
  3211  014D  074D               	addwf	??_getTimeData+3,w
  3212  014E  00CE               	movwf	??_getTimeData+4
  3213  014F  084E               	movf	??_getTimeData+4,w
  3214  0150  0086               	movwf	6
  3215  0151  0187               	clrf	7
  3216  0152  084A               	movf	??_getTimeData,w
  3217  0153  3FC0               	movwi [0]fsr1
  3218  0154  084B               	movf	??_getTimeData+1,w
  3219  0155  3FC1               	movwi [1]fsr1
  3220                           
  3221                           ;time_ctrl.c: 25: timeCtrlValue[i][j] = (timeCtrlValue[i][j] << 8)
  3222                           ;time_ctrl.c: 26: | eusartRxBuffer[cnt+6];
  3223  0156  0872               	movf	getTimeData@cnt,w
  3224  0157  3E06               	addlw	6
  3225  0158  3E20               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  3226  0159  0086               	movwf	6
  3227  015A  3001               	movlw	1	; select bank2/3
  3228  015B  0087               	movwf	7
  3229  015C  0801               	movf	1,w
  3230  015D  00CA               	movwf	??_getTimeData
  3231  015E  01CB               	clrf	??_getTimeData+1
  3232  015F  0873               	movf	getTimeData@i,w
  3233  0160  00CC               	movwf	??_getTimeData+2
  3234  0161  3003               	movlw	3
  3235  0162                     u605:	
  3236  0162  35CC               	lslf	??_getTimeData+2,f
  3237  0163  0B89               	decfsz	9,f
  3238  0164  2962               	goto	u605
  3239  0165  30A0               	movlw	(low (_timeCtrlValue| 0))& (0+255)
  3240  0166  074C               	addwf	??_getTimeData+2,w
  3241  0167  00CD               	movwf	??_getTimeData+3
  3242  0168  3574               	lslf	getTimeData@j,w
  3243  0169  074D               	addwf	??_getTimeData+3,w
  3244  016A  00CE               	movwf	??_getTimeData+4
  3245  016B  084E               	movf	??_getTimeData+4,w
  3246  016C  0086               	movwf	6
  3247  016D  0187               	clrf	7
  3248  016E  3F40               	moviw [0]fsr1
  3249  016F  00CF               	movwf	??_getTimeData+5
  3250  0170  3F41               	moviw [1]fsr1
  3251  0171  00D0               	movwf	??_getTimeData+6
  3252  0172  084F               	movf	??_getTimeData+5,w
  3253  0173  00D0               	movwf	??_getTimeData+6
  3254  0174  01CF               	clrf	??_getTimeData+5
  3255  0175  084A               	movf	??_getTimeData,w
  3256  0176  044F               	iorwf	??_getTimeData+5,w
  3257  0177  00D2               	movwf	??_getTimeData+8
  3258  0178  084B               	movf	??_getTimeData+1,w
  3259  0179  0450               	iorwf	??_getTimeData+6,w
  3260  017A  00D3               	movwf	??_getTimeData+9
  3261  017B  0873               	movf	getTimeData@i,w
  3262  017C  00D4               	movwf	??_getTimeData+10
  3263  017D  3003               	movlw	3
  3264  017E                     u615:	
  3265  017E  35D4               	lslf	??_getTimeData+10,f
  3266  017F  0B89               	decfsz	9,f
  3267  0180  297E               	goto	u615
  3268  0181  30A0               	movlw	(low (_timeCtrlValue| 0))& (0+255)
  3269  0182  0754               	addwf	??_getTimeData+10,w
  3270  0183  00D5               	movwf	??_getTimeData+11
  3271  0184  3574               	lslf	getTimeData@j,w
  3272  0185  0755               	addwf	??_getTimeData+11,w
  3273  0186  00D6               	movwf	??_getTimeData+12
  3274  0187  0856               	movf	??_getTimeData+12,w
  3275  0188  0086               	movwf	6
  3276  0189  0187               	clrf	7
  3277  018A  0852               	movf	??_getTimeData+8,w
  3278  018B  3FC0               	movwi [0]fsr1
  3279  018C  0853               	movf	??_getTimeData+9,w
  3280  018D  3FC1               	movwi [1]fsr1
  3281                           
  3282                           ;time_ctrl.c: 27: cnt += 2;
  3283  018E  3002               	movlw	2
  3284  018F  00CA               	movwf	??_getTimeData
  3285  0190  084A               	movf	??_getTimeData,w
  3286  0191  07F2               	addwf	getTimeData@cnt,f
  3287  0192  3001               	movlw	1
  3288  0193  00CA               	movwf	??_getTimeData
  3289  0194  084A               	movf	??_getTimeData,w
  3290  0195  07F4               	addwf	getTimeData@j,f
  3291  0196  3004               	movlw	4
  3292  0197  0274               	subwf	getTimeData@j,w
  3293  0198  1C03               	skipc
  3294  0199  2939               	goto	l1161
  3295  019A                     l1169:	
  3296  019A  3001               	movlw	1
  3297  019B  0020               	movlb	0	; select bank0
  3298  019C  00CA               	movwf	??_getTimeData
  3299  019D  084A               	movf	??_getTimeData,w
  3300  019E  07F3               	addwf	getTimeData@i,f
  3301  019F  2930               	goto	L4
  3302  01A0                     __end_of_getTimeData:	
  3303                           
  3304                           	psect	text16
  3305  036B                     __ptext16:	
  3306 ;; *************** function _Get_Device_Addr *****************
  3307 ;; Defined at:
  3308 ;;		line 75 in file "mcc_generated_files/mcc.c"
  3309 ;; Parameters:    Size  Location     Type
  3310 ;;		None
  3311 ;; Auto vars:     Size  Location     Type
  3312 ;;  device_addr     1    3[COMMON] unsigned char 
  3313 ;; Return value:  Size  Location     Type
  3314 ;;                  1    wreg      unsigned char 
  3315 ;; Registers used:
  3316 ;;		wreg, status,2, status,0
  3317 ;; Tracked objects:
  3318 ;;		On entry : 0/0
  3319 ;;		On exit  : 0/0
  3320 ;;		Unchanged: 0/0
  3321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3322 ;;      Params:         0       0       0       0
  3323 ;;      Locals:         1       0       0       0
  3324 ;;      Temps:          1       0       0       0
  3325 ;;      Totals:         2       0       0       0
  3326 ;;Total ram usage:        2 bytes
  3327 ;; Hardware stack levels used:    1
  3328 ;; Hardware stack levels required when called:    4
  3329 ;; This function calls:
  3330 ;;		Nothing
  3331 ;; This function is called by:
  3332 ;;		_EUSART_Deal
  3333 ;; This function uses a non-reentrant model
  3334 ;;
  3335                           
  3336                           
  3337                           ;psect for function _Get_Device_Addr
  3338  036B                     _Get_Device_Addr:	
  3339                           
  3340                           ;mcc.c: 77: unsigned char device_addr;
  3341                           ;mcc.c: 79: device_addr = PORTBbits.RB4;
  3342                           
  3343                           ;incstack = 0
  3344                           ; Regs used in _Get_Device_Addr: [wreg+status,2+status,0]
  3345  036B  3000               	movlw	0
  3346  036C  0020               	movlb	0	; select bank0
  3347  036D  1A0D               	btfsc	13,4	;volatile
  3348  036E  3001               	movlw	1
  3349  036F  00F3               	movwf	Get_Device_Addr@device_addr
  3350                           
  3351                           ;mcc.c: 80: device_addr |= PORTBbits.RB6 << 1;
  3352  0370  0E0D               	swapf	13,w	;volatile
  3353  0371  0C89               	rrf	9,f
  3354  0372  0C89               	rrf	9,f
  3355  0373  3901               	andlw	1
  3356  0374  0709               	addwf	9,w
  3357  0375  00F2               	movwf	??_Get_Device_Addr
  3358  0376  0872               	movf	??_Get_Device_Addr,w
  3359  0377  04F3               	iorwf	Get_Device_Addr@device_addr,f
  3360                           
  3361                           ;mcc.c: 82: return device_addr;
  3362  0378  0873               	movf	Get_Device_Addr@device_addr,w
  3363  0379  0008               	return
  3364  037A                     __end_of_Get_Device_Addr:	
  3365                           
  3366                           	psect	intentry
  3367  0004                     __pintentry:	
  3368 ;; *************** function _INTERRUPT_InterruptManager *****************
  3369 ;; Defined at:
  3370 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  3371 ;; Parameters:    Size  Location     Type
  3372 ;;		None
  3373 ;; Auto vars:     Size  Location     Type
  3374 ;;		None
  3375 ;; Return value:  Size  Location     Type
  3376 ;;                  1    wreg      void 
  3377 ;; Registers used:
  3378 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3379 ;; Tracked objects:
  3380 ;;		On entry : 0/0
  3381 ;;		On exit  : 0/0
  3382 ;;		Unchanged: 0/0
  3383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3384 ;;      Params:         0       0       0       0
  3385 ;;      Locals:         0       0       0       0
  3386 ;;      Temps:          1       0       0       0
  3387 ;;      Totals:         1       0       0       0
  3388 ;;Total ram usage:        1 bytes
  3389 ;; Hardware stack levels used:    1
  3390 ;; Hardware stack levels required when called:    3
  3391 ;; This function calls:
  3392 ;;		Absolute function
  3393 ;;		_EUSART_Receive_ISR
  3394 ;;		_TMR0_ISR
  3395 ;; This function is called by:
  3396 ;;		Interrupt level 1
  3397 ;; This function uses a non-reentrant model
  3398 ;;
  3399                           
  3400  0004                     _INTERRUPT_InterruptManager:	
  3401                           
  3402                           ;incstack = 0
  3403  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  3404                           
  3405                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  3406  0005  3180               	pagesel	$
  3407  0006  0020               	movlb	0	; select bank0
  3408  0007  087F               	movf	127,w
  3409  0008  00F1               	movwf	??_INTERRUPT_InterruptManager
  3410                           
  3411                           ;interrupt_manager.c: 55: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  3412  0009  1A8B               	btfsc	11,5	;volatile
  3413  000A  1D0B               	btfss	11,2	;volatile
  3414  000B  2810               	goto	i1l89
  3415                           
  3416                           ;interrupt_manager.c: 56: {
  3417                           ;interrupt_manager.c: 57: TMR0_ISR();
  3418  000C  3183  2391  3180   	fcall	_TMR0_ISR
  3419                           
  3420                           ;interrupt_manager.c: 58: }
  3421  000F  2822               	goto	i1l97
  3422  0010                     i1l89:	
  3423                           
  3424                           ;interrupt_manager.c: 59: else if(INTCONbits.PEIE == 1)
  3425  0010  1F0B               	btfss	11,6	;volatile
  3426  0011  2822               	goto	i1l97
  3427                           
  3428                           ;interrupt_manager.c: 60: {
  3429                           ;interrupt_manager.c: 61: if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
  3430  0012  0021               	movlb	1	; select bank1
  3431  0013  1A11               	btfsc	17,4	;volatile
  3432  0014  0020               	movlb	0	; select bank0
  3433  0015  1A11               	btfsc	17,4	;volatile
  3434  0016  2822               	goto	i1l97
  3435                           
  3436                           ;interrupt_manager.c: 65: else if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
  3437                           
  3438                           ;interrupt_manager.c: 62: {
  3439                           ;interrupt_manager.c: 64: }
  3440  0017  0021               	movlb	1	; select bank1
  3441  0018  1E91               	btfss	17,5	;volatile
  3442  0019  2822               	goto	i1l97
  3443  001A  0020               	movlb	0	; select bank0
  3444  001B  1E91               	btfss	17,5	;volatile
  3445  001C  2822               	goto	i1l97
  3446                           
  3447                           ;interrupt_manager.c: 66: {
  3448                           ;interrupt_manager.c: 67: EUSART_RxDefaultInterruptHandler();
  3449  001D  0862               	movf	_EUSART_RxDefaultInterruptHandler+1,w
  3450  001E  008A               	movwf	10
  3451  001F  0861               	movf	_EUSART_RxDefaultInterruptHandler,w
  3452  0020  000A               	callw
  3453  0021  3180               	pagesel	$
  3454  0022                     i1l97:	
  3455                           ;interrupt_manager.c: 74: else
  3456                           ;interrupt_manager.c: 75: {
  3457                           
  3458                           ;interrupt_manager.c: 72: }
  3459                           ;interrupt_manager.c: 73: }
  3460                           
  3461                           ;interrupt_manager.c: 69: else
  3462                           ;interrupt_manager.c: 70: {
  3463                           
  3464                           ;interrupt_manager.c: 68: }
  3465                           
  3466  0022  0871               	movf	??_INTERRUPT_InterruptManager,w
  3467  0023  0020               	movlb	0	; select bank0
  3468  0024  00FF               	movwf	127
  3469  0025  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  3470  0026  0009               	retfie
  3471  0027                     __end_of_INTERRUPT_InterruptManager:	
  3472                           
  3473                           	psect	text18
  3474  0391                     __ptext18:	
  3475 ;; *************** function _TMR0_ISR *****************
  3476 ;; Defined at:
  3477 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  3478 ;; Parameters:    Size  Location     Type
  3479 ;;		None
  3480 ;; Auto vars:     Size  Location     Type
  3481 ;;		None
  3482 ;; Return value:  Size  Location     Type
  3483 ;;                  1    wreg      void 
  3484 ;; Registers used:
  3485 ;;		wreg, status,2, status,0, pclath, cstack
  3486 ;; Tracked objects:
  3487 ;;		On entry : 0/0
  3488 ;;		On exit  : 0/0
  3489 ;;		Unchanged: 0/0
  3490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3491 ;;      Params:         0       0       0       0
  3492 ;;      Locals:         0       0       0       0
  3493 ;;      Temps:          0       0       0       0
  3494 ;;      Totals:         0       0       0       0
  3495 ;;Total ram usage:        0 bytes
  3496 ;; Hardware stack levels used:    1
  3497 ;; Hardware stack levels required when called:    2
  3498 ;; This function calls:
  3499 ;;		_TMR0_CallBack
  3500 ;; This function is called by:
  3501 ;;		_INTERRUPT_InterruptManager
  3502 ;; This function uses a non-reentrant model
  3503 ;;
  3504                           
  3505                           
  3506                           ;psect for function _TMR0_ISR
  3507  0391                     _TMR0_ISR:	
  3508                           
  3509                           ;tmr0.c: 112: INTCONbits.TMR0IF = 0;
  3510                           
  3511                           ;incstack = 0
  3512                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  3513  0391  110B               	bcf	11,2	;volatile
  3514                           
  3515                           ;tmr0.c: 114: TMR0 = timer0ReloadVal;
  3516  0392  0020               	movlb	0	; select bank0
  3517  0393  0863               	movf	_timer0ReloadVal,w	;volatile
  3518  0394  0095               	movwf	21	;volatile
  3519                           
  3520                           ;tmr0.c: 118: TMR0_CallBack();
  3521  0395  3182  223D         	fcall	_TMR0_CallBack
  3522  0397  0008               	return
  3523  0398                     __end_of_TMR0_ISR:	
  3524                           
  3525                           	psect	text19
  3526  023D                     __ptext19:	
  3527 ;; *************** function _TMR0_CallBack *****************
  3528 ;; Defined at:
  3529 ;;		line 123 in file "mcc_generated_files/tmr0.c"
  3530 ;; Parameters:    Size  Location     Type
  3531 ;;		None
  3532 ;; Auto vars:     Size  Location     Type
  3533 ;;		None
  3534 ;; Return value:  Size  Location     Type
  3535 ;;                  1    wreg      void 
  3536 ;; Registers used:
  3537 ;;		wreg, status,2, status,0, pclath, cstack
  3538 ;; Tracked objects:
  3539 ;;		On entry : 0/0
  3540 ;;		On exit  : 0/0
  3541 ;;		Unchanged: 0/0
  3542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3543 ;;      Params:         0       0       0       0
  3544 ;;      Locals:         0       0       0       0
  3545 ;;      Temps:          1       0       0       0
  3546 ;;      Totals:         1       0       0       0
  3547 ;;Total ram usage:        1 bytes
  3548 ;; Hardware stack levels used:    1
  3549 ;; Hardware stack levels required when called:    1
  3550 ;; This function calls:
  3551 ;;		Absolute function
  3552 ;;		_TMR0_DefaultInterruptHandler
  3553 ;; This function is called by:
  3554 ;;		_TMR0_ISR
  3555 ;; This function uses a non-reentrant model
  3556 ;;
  3557                           
  3558                           
  3559                           ;psect for function _TMR0_CallBack
  3560  023D                     _TMR0_CallBack:	
  3561                           
  3562                           ;tmr0.c: 126: static uint8_t eusartRXOvertimeCnt = 0;
  3563                           ;tmr0.c: 127: static uint8_t timeCrlCnt = 0;
  3564                           ;tmr0.c: 128: static uint8_t preEusartRxCount = 0;
  3565                           ;tmr0.c: 129: static uint8_t testTimeCtrlCnt = 0;
  3566                           ;tmr0.c: 131: if(timeCtrlStartFlag)
  3567                           
  3568                           ;incstack = 0
  3569                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
  3570  023D  0879               	movf	_timeCtrlStartFlag,w
  3571  023E  1903               	btfsc	3,2
  3572  023F  2A4C               	goto	i1l1249
  3573                           
  3574                           ;tmr0.c: 132: {
  3575                           ;tmr0.c: 133: if(++timeCrlCnt >= 10)
  3576  0240  3001               	movlw	1
  3577  0241  00F0               	movwf	??_TMR0_CallBack
  3578  0242  0870               	movf	??_TMR0_CallBack,w
  3579  0243  0020               	movlb	0	; select bank0
  3580  0244  07C5               	addwf	TMR0_CallBack@timeCrlCnt,f
  3581  0245  300A               	movlw	10
  3582  0246  0245               	subwf	TMR0_CallBack@timeCrlCnt,w
  3583  0247  1C03               	skipc
  3584  0248  2A4C               	goto	i1l1249
  3585                           
  3586                           ;tmr0.c: 134: {
  3587                           ;tmr0.c: 135: timeCrlCnt = 0;
  3588  0249  01C5               	clrf	TMR0_CallBack@timeCrlCnt
  3589                           
  3590                           ;tmr0.c: 136: timeCtrlOvertimeMask = 1;
  3591  024A  01C9               	clrf	_timeCtrlOvertimeMask
  3592  024B  0AC9               	incf	_timeCtrlOvertimeMask,f
  3593  024C                     i1l1249:	
  3594                           
  3595                           ;tmr0.c: 137: }
  3596                           ;tmr0.c: 138: }
  3597                           ;tmr0.c: 150: if(eusartRxCount != preEusartRxCount)
  3598  024C  0878               	movf	_eusartRxCount,w
  3599  024D  0020               	movlb	0	; select bank0
  3600  024E  0644               	xorwf	TMR0_CallBack@preEusartRxCount,w
  3601  024F  1903               	skipnz
  3602  0250  2A57               	goto	i1l1255
  3603                           
  3604                           ;tmr0.c: 151: {
  3605                           ;tmr0.c: 152: preEusartRxCount = eusartRxCount;
  3606  0251  0878               	movf	_eusartRxCount,w
  3607  0252  00F0               	movwf	??_TMR0_CallBack
  3608  0253  0870               	movf	??_TMR0_CallBack,w
  3609  0254  00C4               	movwf	TMR0_CallBack@preEusartRxCount
  3610                           
  3611                           ;tmr0.c: 153: eusartRXOvertimeCnt = 0;
  3612  0255  01C6               	clrf	TMR0_CallBack@eusartRXOvertimeCnt
  3613                           
  3614                           ;tmr0.c: 154: }
  3615  0256  2A6B               	goto	i1l1269
  3616  0257                     i1l1255:	
  3617                           
  3618                           ;tmr0.c: 155: else
  3619                           ;tmr0.c: 156: {
  3620                           ;tmr0.c: 157: if(eusartRxCount != 0)
  3621  0257  0878               	movf	_eusartRxCount,w
  3622  0258  1903               	btfsc	3,2
  3623  0259  2A6B               	goto	i1l1269
  3624                           
  3625                           ;tmr0.c: 158: {
  3626                           ;tmr0.c: 159: if(++eusartRXOvertimeCnt >= 2)
  3627  025A  3001               	movlw	1
  3628  025B  00F0               	movwf	??_TMR0_CallBack
  3629  025C  0870               	movf	??_TMR0_CallBack,w
  3630  025D  07C6               	addwf	TMR0_CallBack@eusartRXOvertimeCnt,f
  3631  025E  3002               	movlw	2
  3632  025F  0246               	subwf	TMR0_CallBack@eusartRXOvertimeCnt,w
  3633  0260  1C03               	skipc
  3634  0261  2A6B               	goto	i1l1269
  3635                           
  3636                           ;tmr0.c: 160: {
  3637                           ;tmr0.c: 161: eusartRXOvertimeCnt = 0;
  3638  0262  01C6               	clrf	TMR0_CallBack@eusartRXOvertimeCnt
  3639                           
  3640                           ;tmr0.c: 162: EusartRxLenth = eusartRxCount;
  3641  0263  0878               	movf	_eusartRxCount,w
  3642  0264  00F0               	movwf	??_TMR0_CallBack
  3643  0265  0870               	movf	??_TMR0_CallBack,w
  3644  0266  00C8               	movwf	_EusartRxLenth
  3645                           
  3646                           ;tmr0.c: 163: preEusartRxCount = 0;
  3647  0267  01C4               	clrf	TMR0_CallBack@preEusartRxCount
  3648                           
  3649                           ;tmr0.c: 164: eusartRxCount = 0;
  3650  0268  01F8               	clrf	_eusartRxCount
  3651                           
  3652                           ;tmr0.c: 165: eusartRxOvertimeMask = 1;
  3653  0269  01C7               	clrf	_eusartRxOvertimeMask
  3654  026A  0AC7               	incf	_eusartRxOvertimeMask,f
  3655  026B                     i1l1269:	
  3656                           
  3657                           ;tmr0.c: 166: }
  3658                           ;tmr0.c: 167: }
  3659                           ;tmr0.c: 168: }
  3660                           ;tmr0.c: 170: if(TMR0_InterruptHandler)
  3661  026B  085F               	movf	_TMR0_InterruptHandler,w
  3662  026C  0460               	iorwf	_TMR0_InterruptHandler+1,w
  3663  026D  1903               	btfsc	3,2
  3664  026E  0008               	return
  3665                           
  3666                           ;tmr0.c: 171: {
  3667                           ;tmr0.c: 172: TMR0_InterruptHandler();
  3668  026F  0860               	movf	_TMR0_InterruptHandler+1,w
  3669  0270  008A               	movwf	10
  3670  0271  085F               	movf	_TMR0_InterruptHandler,w
  3671  0272  000A               	callw
  3672  0273  3182               	pagesel	$
  3673  0274  0008               	return
  3674  0275                     __end_of_TMR0_CallBack:	
  3675                           
  3676                           	psect	text20
  3677  03B5                     __ptext20:	
  3678 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  3679 ;; Defined at:
  3680 ;;		line 180 in file "mcc_generated_files/tmr0.c"
  3681 ;; Parameters:    Size  Location     Type
  3682 ;;		None
  3683 ;; Auto vars:     Size  Location     Type
  3684 ;;		None
  3685 ;; Return value:  Size  Location     Type
  3686 ;;                  1    wreg      void 
  3687 ;; Registers used:
  3688 ;;		None
  3689 ;; Tracked objects:
  3690 ;;		On entry : 0/0
  3691 ;;		On exit  : 0/0
  3692 ;;		Unchanged: 0/0
  3693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3694 ;;      Params:         0       0       0       0
  3695 ;;      Locals:         0       0       0       0
  3696 ;;      Temps:          0       0       0       0
  3697 ;;      Totals:         0       0       0       0
  3698 ;;Total ram usage:        0 bytes
  3699 ;; Hardware stack levels used:    1
  3700 ;; This function calls:
  3701 ;;		Nothing
  3702 ;; This function is called by:
  3703 ;;		_TMR0_Initialize
  3704 ;;		_TMR0_CallBack
  3705 ;; This function uses a non-reentrant model
  3706 ;;
  3707                           
  3708                           
  3709                           ;psect for function _TMR0_DefaultInterruptHandler
  3710  03B5                     _TMR0_DefaultInterruptHandler:	
  3711                           
  3712                           ;incstack = 0
  3713                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  3714  03B5  0008               	return
  3715  03B6                     __end_of_TMR0_DefaultInterruptHandler:	
  3716                           
  3717                           	psect	text21
  3718  0349                     __ptext21:	
  3719 ;; *************** function _EUSART_Receive_ISR *****************
  3720 ;; Defined at:
  3721 ;;		line 199 in file "mcc_generated_files/eusart.c"
  3722 ;; Parameters:    Size  Location     Type
  3723 ;;		None
  3724 ;; Auto vars:     Size  Location     Type
  3725 ;;		None
  3726 ;; Return value:  Size  Location     Type
  3727 ;;                  1    wreg      void 
  3728 ;; Registers used:
  3729 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3730 ;; Tracked objects:
  3731 ;;		On entry : 0/0
  3732 ;;		On exit  : 0/0
  3733 ;;		Unchanged: 0/0
  3734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3735 ;;      Params:         0       0       0       0
  3736 ;;      Locals:         0       0       0       0
  3737 ;;      Temps:          1       0       0       0
  3738 ;;      Totals:         1       0       0       0
  3739 ;;Total ram usage:        1 bytes
  3740 ;; Hardware stack levels used:    1
  3741 ;; This function calls:
  3742 ;;		Nothing
  3743 ;; This function is called by:
  3744 ;;		_EUSART_Initialize
  3745 ;;		_INTERRUPT_InterruptManager
  3746 ;; This function uses a non-reentrant model
  3747 ;;
  3748                           
  3749                           
  3750                           ;psect for function _EUSART_Receive_ISR
  3751  0349                     _EUSART_Receive_ISR:	
  3752                           
  3753                           ;eusart.c: 201: if(1 == RCSTAbits.OERR)
  3754                           
  3755                           ;incstack = 0
  3756                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  3757  0349  0023               	movlb	3	; select bank3
  3758  034A  1C9D               	btfss	29,1	;volatile
  3759  034B  2B4E               	goto	i1l1311
  3760                           
  3761                           ;eusart.c: 202: {
  3762                           ;eusart.c: 205: RCSTAbits.CREN = 0;
  3763  034C  121D               	bcf	29,4	;volatile
  3764                           
  3765                           ;eusart.c: 206: RCSTAbits.CREN = 1;
  3766  034D  161D               	bsf	29,4	;volatile
  3767  034E                     i1l1311:	
  3768                           
  3769                           ;eusart.c: 207: }
  3770                           ;eusart.c: 216: eusartRxBuffer[eusartRxCount++] = RCREG;
  3771  034E  0819               	movf	25,w	;volatile
  3772  034F  00F0               	movwf	??_EUSART_Receive_ISR
  3773  0350  0878               	movf	_eusartRxCount,w
  3774  0351  3E20               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  3775  0352  0086               	movwf	6
  3776  0353  3001               	movlw	1	; select bank2/3
  3777  0354  0087               	movwf	7
  3778  0355  0870               	movf	??_EUSART_Receive_ISR,w
  3779  0356  0081               	movwf	1
  3780  0357  3001               	movlw	1
  3781  0358  00F0               	movwf	??_EUSART_Receive_ISR
  3782  0359  0870               	movf	??_EUSART_Receive_ISR,w
  3783  035A  07F8               	addwf	_eusartRxCount,f
  3784  035B  0008               	return
  3785  035C                     __end_of_EUSART_Receive_ISR:	
  3786  007E                     btemp	set	126	;btemp
  3787  007E                     int$flags	set	126
  3788  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        9
    BSS         184
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80     13      68
    BANK1            80      0      64
    BANK2            80      0      75

Pointer List with Targets:

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), Absolute function(), 


Critical Paths under _main in COMMON

    _main->_EUSART_Deal
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Deal->_stopTimeCtrl
    _EUSART_Deal->_testTimeCtrl
    _EUSART_Deal->_workTimeCtrl
    _startTimeCtrl->_getTimeData
    _startTimeCtrl->_stopTimeCtrl

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART_Receive_ISR
    _TMR0_ISR->_TMR0_CallBack

Critical Paths under _main in BANK0

    _startTimeCtrl->_getTimeData

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1554
                        _EUSART_Deal
                  _SYSTEM_Initialize
                       _stopTimeCtrl
                    _tempCtrlProcess
 ---------------------------------------------------------------------------------
 (1) _tempCtrlProcess                                      3     3      0     486
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     150
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0      75
                                              4 COMMON     1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2      75
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0      75
       _EUSART_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      75
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _EUSART_Deal                                          2     2      0     784
                                              5 COMMON     2     2      0
                    _Get_Device_Addr
                      _startTimeCtrl
                       _stopTimeCtrl
                       _testTimeCtrl
                       _workTimeCtrl
 ---------------------------------------------------------------------------------
 (2) _workTimeCtrl                                         3     3      0     134
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _testTimeCtrl                                         3     3      0      88
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _startTimeCtrl                                        0     0      0     404
                        _getTimeData
                       _stopTimeCtrl
 ---------------------------------------------------------------------------------
 (1) _stopTimeCtrl                                         3     3      0     134
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _getTimeData                                         16    16      0     270
                                              2 COMMON     3     3      0
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (2) _Get_Device_Addr                                      2     2      0      24
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           1     1      0       0
                                              1 COMMON     1     1      0
                   Absolute function *
                 _EUSART_Receive_ISR *
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR0_ISR                                             0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (6) _TMR0_CallBack                                        1     1      0       0
                                              0 COMMON     1     1      0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Deal
     _Get_Device_Addr
     _startTimeCtrl
       _getTimeData
       _stopTimeCtrl
     _stopTimeCtrl
     _testTimeCtrl
     _workTimeCtrl
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetRxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _WDT_Initialize
   _stopTimeCtrl
   _tempCtrlProcess

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
   _TMR0_ISR *
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      DA       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      D      44       6       85.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      40       8       80.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      4B      10       93.8%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      DA      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Aug 06 17:58:01 2018

               ?_EUSART_SetRxInterruptHandler 0072                              ?_tempCtrlProcess 0070  
                                 __CFG_CP$OFF 0000                          _timeCtrlEnableSignal 0077  
                             _timer0ReloadVal 0063                                   __CFG_LVP$ON 0000  
                                         l291 00DA                                  __CFG_CPD$OFF 0000  
                                         u605 0162                                           u615 017E  
                                         u554 02C7                                           u714 028E  
                                         u555 02C6                                           u715 028D  
                                         u724 029D                                           u725 029C  
                                         u744 02F4                                           u745 02F3  
                                         u905 0080                                           u595 0146  
                                         u915 0095                                           u925 00AA  
                                         u954 00F3                                           u955 00F2  
                                         u974 0106                                           u975 0105  
                                         u895 006C                                  __CFG_BORV$LO 0000  
                                         wreg 0009                                  __CFG_IESO$ON 0000  
                                ?_EUSART_Deal 0070                                          l1161 0139  
                                        l1331 01CF                                          l1411 01F5  
                                        l1341 01E6                                          l1327 01C6  
                                        l1423 0214                                          l1415 0202  
                                        l1169 019A                                          l1281 0296  
                                        l1337 01DE                                          l1361 00A7  
                                        l1355 0069                                          l1373 00FB  
                                        l1357 007D                                          l1365 00BC  
                                        l1429 021C                                          l1359 0092  
                                        l1367 00CE                                          l1439 022E  
                                        l1377 010E                                          l1385 0129  
                                        _LATA 010C                                          _LATB 010D  
                                        _LATC 010E                                          i1l97 0022  
                                        i1l89 0010                                          _TMR0 0015  
                                        _WPUA 020C                                          _WPUB 020D  
                                        _WPUC 020E                                  __CFG_WRT$OFF 0000  
                               __CFG_FCMEN$ON 0000                         __size_of_stopTimeCtrl 002D  
                                        _main 01F0                                          fsr0h 0005  
                                        fsr1h 0007                                          indf0 0000  
                                        fsr0l 0004                                          indf1 0001  
                                        fsr1l 0006                                          btemp 007E  
                               __CFG_BOREN$ON 0000                                          start 0027  
                               __CFG_MCLRE$ON 0000                                 _startTimeCtrl 0382  
                     __end_of_TMR0_Initialize 0349                                 __CFG_PLLEN$ON 0000  
              ??_TMR0_DefaultInterruptHandler 0070                    Get_Device_Addr@device_addr 0073  
              __size_of_OSCILLATOR_Initialize 0007                 __end_of_OSCILLATOR_Initialize 0391  
                                       ?_main 0070                                 __CFG_WDTE$OFF 0000  
                                       _RCREG 0199                                         _RCSTA 019D  
                                       _TRISA 008C                                         _TRISB 008D  
                                       _TRISC 008E                                         _TXSTA 019E  
           __size_of_TMR0_SetInterruptHandler 0006                     ?_TMR0_SetInterruptHandler 0072  
                                _stopTimeCtrl 02A6                              __end_of_TMR0_ISR 0398  
                       __size_of_workTimeCtrl 002C                                _WDT_Initialize 03B0  
                                       pclath 000A                                         status 0003  
                                       wtemp0 007E                             ??_Get_Device_Addr 0072  
                             __initialization 0029                                ?_startTimeCtrl 0070  
                                __end_of_main 023D                   ?_INTERRUPT_InterruptManager 0070  
              ??_EUSART_SetRxInterruptHandler 0074                                        ??_main 0077  
                                _workTimeCtrl 02D3                        __end_of_WDT_Initialize 03B4  
                                      _ANSELA 018C                                        _ANSELB 018D  
                                      _ANSELC 018E                          __size_of_getTimeData 0072  
                                      _BORCON 0116                                        i1l1311 034E  
                                      i1l1255 0257                                        i1l1249 024C  
                                      i1l1269 026B                              tempCtrlProcess@i 0074  
                                      _OSCCON 0099                                        _IQRSta 0038  
                                      _SPBRGH 019C                                        _SPBRGL 019B  
                                      _WDTCON 0097                                 _EusartRxLenth 0048  
                              __CFG_PWRTE$OFF 0000                                __CFG_STVREN$ON 0000  
                            ?_TMR0_Initialize 0070                          _eusartRxOvertimeMask 0047  
                                __pdataCOMMON 007A                               ?_WDT_Initialize 0070  
                       __end_of_TMR0_CallBack 0275      TMR0_SetInterruptHandler@InterruptHandler 0072  
                        __size_of_EUSART_Deal 0050                             _SYSTEM_Initialize 035C  
                     __end_of__initialization 0053                            ?_SYSTEM_Initialize 0070  
                             ??_startTimeCtrl 0075                                __pcstackCOMMON 0070  
                                __pidataBANK0 037A                           ??_SYSTEM_Initialize 0075  
                                   ?_TMR0_ISR 0070                                _OPTION_REGbits 0095  
                   __end_of_SYSTEM_Initialize 036B                                    __pbssBANK0 0020  
                                  __pbssBANK1 00A0                                    __pbssBANK2 0120  
                 __size_of_EUSART_Receive_ISR 0013                                    __pmaintext 01F0  
            _EUSART_TxDefaultInterruptHandler 0040              __end_of_TMR0_SetInterruptHandler 03AA  
                                  ??_TMR0_ISR 0071                                    __pintentry 0004  
                                     _BAUDCON 019F                                       _APFCON0 011D  
                                     _APFCON1 011E                                 _eusartRxCount 0078  
                    __size_of_tempCtrlProcess 00D7                                       _OSCTUNE 0098  
                             _Get_Device_Addr 036B                 TMR0_CallBack@preEusartRxCount 0044  
                TMR0_CallBack@testTimeCtrlCnt 0043                                       __ptext1 0057  
                                     __ptext2 035C                                       __ptext3 03B0  
                                     __ptext4 0334                                       __ptext5 03A4  
                                     __ptext6 02FF                                       __ptext7 038A  
                                     __ptext8 031B                                       __ptext9 03AA  
                       _OSCILLATOR_Initialize 038A                      ??_PIN_MANAGER_Initialize 0072  
                  __size_of_SYSTEM_Initialize 000F                                       clrloop0 039F  
                        end_of_initialization 0053                                       init_ram 0398  
                                     initloop 0399                             _EUSART_Initialize 031B  
                               ?_testTimeCtrl 0070                                    _testIQRSta 0030  
                          ?_EUSART_Initialize 0070                                     _IQRPreSta 0057  
                                   _RCSTAbits 019D                           ??_EUSART_Initialize 0074  
                            ??_WDT_Initialize 0072                      _TMR0_SetInterruptHandler 03A4  
                                   _PORTAbits 000C                                     _PORTBbits 000D  
                     __end_of_Get_Device_Addr 037A                              __CFG_FOSC$INTOSC 0000  
                               ??_getTimeData 004A                             ??_tempCtrlProcess 0072  
                   __end_of_EUSART_Initialize 0334                                ??_testTimeCtrl 0072  
                               __pidataCOMMON 03B4                             __size_of_TMR0_ISR 0007  
                      ?_OSCILLATOR_Initialize 0070                           start_initialization 0029  
                    __size_of_TMR0_Initialize 0015               __size_of_PIN_MANAGER_Initialize 001C  
                               ??_EUSART_Deal 0075                                _readSignalflag 0042  
EUSART_SetRxInterruptHandler@interruptHandler 0072              TMR0_CallBack@eusartRXOvertimeCnt 0046  
                         __end_of_getTimeData 01A0                       TMR0_CallBack@timeCrlCnt 0045  
                       __end_of_startTimeCtrl 038A                        __size_of_TMR0_CallBack 0038  
                                 __pdataBANK0 0057                        tempCtrlProcess@timeCnt 0020  
                        _timeCtrlOvertimeMask 0049                              ?_Get_Device_Addr 0070  
                                 __pbssCOMMON 0077                                     ___latbits 0001  
                               ?_stopTimeCtrl 0070                                 __pcstackBANK0 004A  
                  __end_of_EUSART_Receive_ISR 035C                    __size_of_EUSART_Initialize 0019  
                         __end_of_EUSART_Deal 01F0              _EUSART_RxDefaultInterruptHandler 0061  
                       _TMR0_InterruptHandler 005F                                     __pnvBANK0 005F  
                      _PIN_MANAGER_Initialize 02FF                                 stopTimeCtrl@i 0074  
                ??_INTERRUPT_InterruptManager 0071                                 ?_workTimeCtrl 0070  
                          testTimeCtrl@IQRNum 0074                                ??_stopTimeCtrl 0072  
                        __end_of_testTimeCtrl 02A6                                   _getTimeData 012E  
                           _timeCtrlStartFlag 0079                                 _TMR0_CallBack 023D  
                              _eusartRxBuffer 0120                             ??_TMR0_Initialize 0074  
                                    _LATAbits 010C                                     clear_ram0 039E  
                                    _PIE1bits 0091                                 _timeCtrlValue 00A0  
         __size_of_INTERRUPT_InterruptManager 0023                    ??_TMR0_SetInterruptHandler 0074  
                                    _PIR1bits 0011                                      _TMR0_ISR 0391  
                              ??_workTimeCtrl 0072                               _tempCtrlProcess 0057  
                              getTimeData@cnt 0072                                ?_TMR0_CallBack 0070  
                                 _EUSART_Deal 01A0                       ??_OSCILLATOR_Initialize 0072  
                                    __ptext10 01A0                                      __ptext11 02D3  
                                    __ptext20 03B5                                      __ptext12 0275  
                                    __ptext21 0349                                      __ptext13 0382  
                                    __ptext14 02A6                                      __ptext15 012E  
                                    __ptext16 036B                                      __ptext18 0391  
                                    __ptext19 023D                                 __size_of_main 004D  
        __end_of_TMR0_DefaultInterruptHandler 03B6         __size_of_TMR0_DefaultInterruptHandler 0001  
                _TMR0_DefaultInterruptHandler 03B5                          __end_of_stopTimeCtrl 02D3  
                                _timeCtrlMode 007A                       __end_of_tempCtrlProcess 012E  
                                    int$flags 007E            __end_of_INTERRUPT_InterruptManager 0027  
                  _INTERRUPT_InterruptManager 0004                         __size_of_testTimeCtrl 0031  
                               workTimeCtrl@i 0074                                    _INTCONbits 000B  
                             ??_TMR0_CallBack 0070                       __size_of_WDT_Initialize 0004  
                                    intlevel1 0000                          __end_of_workTimeCtrl 02FF  
                     ?_PIN_MANAGER_Initialize 0070                             __CFG_CLKOUTEN$OFF 0000  
        __end_of_EUSART_SetRxInterruptHandler 03B0         __size_of_EUSART_SetRxInterruptHandler 0006  
                _EUSART_SetRxInterruptHandler 03AA                                  _testTimeCtrl 0275  
               ?_TMR0_DefaultInterruptHandler 0070                                  getTimeData@i 0073  
                                getTimeData@j 0074                            _EUSART_Receive_ISR 0349  
                                  _OPTION_REG 0095                           ?_EUSART_Receive_ISR 0070  
                             _TMR0_Initialize 0334                                  ?_getTimeData 0070  
                      __size_of_startTimeCtrl 0008                      __size_of_Get_Device_Addr 000F  
              __end_of_PIN_MANAGER_Initialize 031B                          ??_EUSART_Receive_ISR 0070  
