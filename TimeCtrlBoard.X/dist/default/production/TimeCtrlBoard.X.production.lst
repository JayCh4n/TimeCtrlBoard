

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Jun 26 11:38:52 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1828
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	intentry,global,class=CODE,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	dabs	1,0x7E,2
    39  0000                     
    40                           ; Version 1.45
    41                           ; Generated 16/11/2017 GMT
    42                           ; 
    43                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC16F1828 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     	;# 
    75  0001                     	;# 
    76  0002                     	;# 
    77  0003                     	;# 
    78  0004                     	;# 
    79  0005                     	;# 
    80  0006                     	;# 
    81  0007                     	;# 
    82  0008                     	;# 
    83  0009                     	;# 
    84  000A                     	;# 
    85  000B                     	;# 
    86  000C                     	;# 
    87  000D                     	;# 
    88  000E                     	;# 
    89  0011                     	;# 
    90  0012                     	;# 
    91  0013                     	;# 
    92  0015                     	;# 
    93  0016                     	;# 
    94  0016                     	;# 
    95  0017                     	;# 
    96  0018                     	;# 
    97  0019                     	;# 
    98  001A                     	;# 
    99  001B                     	;# 
   100  001C                     	;# 
   101  001E                     	;# 
   102  001F                     	;# 
   103  008C                     	;# 
   104  008D                     	;# 
   105  008E                     	;# 
   106  0091                     	;# 
   107  0092                     	;# 
   108  0093                     	;# 
   109  0095                     	;# 
   110  0096                     	;# 
   111  0097                     	;# 
   112  0098                     	;# 
   113  0099                     	;# 
   114  009A                     	;# 
   115  009B                     	;# 
   116  009B                     	;# 
   117  009C                     	;# 
   118  009D                     	;# 
   119  009E                     	;# 
   120  010C                     	;# 
   121  010D                     	;# 
   122  010E                     	;# 
   123  0111                     	;# 
   124  0112                     	;# 
   125  0113                     	;# 
   126  0114                     	;# 
   127  0115                     	;# 
   128  0116                     	;# 
   129  0117                     	;# 
   130  0118                     	;# 
   131  0119                     	;# 
   132  011A                     	;# 
   133  011B                     	;# 
   134  011D                     	;# 
   135  011E                     	;# 
   136  018C                     	;# 
   137  018D                     	;# 
   138  018E                     	;# 
   139  0191                     	;# 
   140  0191                     	;# 
   141  0192                     	;# 
   142  0193                     	;# 
   143  0193                     	;# 
   144  0193                     	;# 
   145  0194                     	;# 
   146  0195                     	;# 
   147  0196                     	;# 
   148  0199                     	;# 
   149  019A                     	;# 
   150  019B                     	;# 
   151  019B                     	;# 
   152  019B                     	;# 
   153  019B                     	;# 
   154  019C                     	;# 
   155  019C                     	;# 
   156  019D                     	;# 
   157  019E                     	;# 
   158  019F                     	;# 
   159  020C                     	;# 
   160  020D                     	;# 
   161  020E                     	;# 
   162  0211                     	;# 
   163  0211                     	;# 
   164  0212                     	;# 
   165  0212                     	;# 
   166  0213                     	;# 
   167  0213                     	;# 
   168  0214                     	;# 
   169  0214                     	;# 
   170  0215                     	;# 
   171  0215                     	;# 
   172  0215                     	;# 
   173  0215                     	;# 
   174  0216                     	;# 
   175  0216                     	;# 
   176  0217                     	;# 
   177  0217                     	;# 
   178  0291                     	;# 
   179  0291                     	;# 
   180  0292                     	;# 
   181  0293                     	;# 
   182  0294                     	;# 
   183  0295                     	;# 
   184  0295                     	;# 
   185  0296                     	;# 
   186  0298                     	;# 
   187  0298                     	;# 
   188  0299                     	;# 
   189  029A                     	;# 
   190  029B                     	;# 
   191  029C                     	;# 
   192  029D                     	;# 
   193  029E                     	;# 
   194  029E                     	;# 
   195  0311                     	;# 
   196  0311                     	;# 
   197  0312                     	;# 
   198  0313                     	;# 
   199  0318                     	;# 
   200  0318                     	;# 
   201  0319                     	;# 
   202  031A                     	;# 
   203  038C                     	;# 
   204  038D                     	;# 
   205  038E                     	;# 
   206  0391                     	;# 
   207  0392                     	;# 
   208  0393                     	;# 
   209  0394                     	;# 
   210  0395                     	;# 
   211  0396                     	;# 
   212  039A                     	;# 
   213  039C                     	;# 
   214  039D                     	;# 
   215  039E                     	;# 
   216  039F                     	;# 
   217  0415                     	;# 
   218  0416                     	;# 
   219  0417                     	;# 
   220  041C                     	;# 
   221  041D                     	;# 
   222  041E                     	;# 
   223  0FE4                     	;# 
   224  0FE5                     	;# 
   225  0FE6                     	;# 
   226  0FE7                     	;# 
   227  0FE8                     	;# 
   228  0FE9                     	;# 
   229  0FEA                     	;# 
   230  0FEB                     	;# 
   231  0FED                     	;# 
   232  0FEE                     	;# 
   233  0FEF                     	;# 
   234  0000                     	;# 
   235  0001                     	;# 
   236  0002                     	;# 
   237  0003                     	;# 
   238  0004                     	;# 
   239  0005                     	;# 
   240  0006                     	;# 
   241  0007                     	;# 
   242  0008                     	;# 
   243  0009                     	;# 
   244  000A                     	;# 
   245  000B                     	;# 
   246  000C                     	;# 
   247  000D                     	;# 
   248  000E                     	;# 
   249  0011                     	;# 
   250  0012                     	;# 
   251  0013                     	;# 
   252  0015                     	;# 
   253  0016                     	;# 
   254  0016                     	;# 
   255  0017                     	;# 
   256  0018                     	;# 
   257  0019                     	;# 
   258  001A                     	;# 
   259  001B                     	;# 
   260  001C                     	;# 
   261  001E                     	;# 
   262  001F                     	;# 
   263  008C                     	;# 
   264  008D                     	;# 
   265  008E                     	;# 
   266  0091                     	;# 
   267  0092                     	;# 
   268  0093                     	;# 
   269  0095                     	;# 
   270  0096                     	;# 
   271  0097                     	;# 
   272  0098                     	;# 
   273  0099                     	;# 
   274  009A                     	;# 
   275  009B                     	;# 
   276  009B                     	;# 
   277  009C                     	;# 
   278  009D                     	;# 
   279  009E                     	;# 
   280  010C                     	;# 
   281  010D                     	;# 
   282  010E                     	;# 
   283  0111                     	;# 
   284  0112                     	;# 
   285  0113                     	;# 
   286  0114                     	;# 
   287  0115                     	;# 
   288  0116                     	;# 
   289  0117                     	;# 
   290  0118                     	;# 
   291  0119                     	;# 
   292  011A                     	;# 
   293  011B                     	;# 
   294  011D                     	;# 
   295  011E                     	;# 
   296  018C                     	;# 
   297  018D                     	;# 
   298  018E                     	;# 
   299  0191                     	;# 
   300  0191                     	;# 
   301  0192                     	;# 
   302  0193                     	;# 
   303  0193                     	;# 
   304  0193                     	;# 
   305  0194                     	;# 
   306  0195                     	;# 
   307  0196                     	;# 
   308  0199                     	;# 
   309  019A                     	;# 
   310  019B                     	;# 
   311  019B                     	;# 
   312  019B                     	;# 
   313  019B                     	;# 
   314  019C                     	;# 
   315  019C                     	;# 
   316  019D                     	;# 
   317  019E                     	;# 
   318  019F                     	;# 
   319  020C                     	;# 
   320  020D                     	;# 
   321  020E                     	;# 
   322  0211                     	;# 
   323  0211                     	;# 
   324  0212                     	;# 
   325  0212                     	;# 
   326  0213                     	;# 
   327  0213                     	;# 
   328  0214                     	;# 
   329  0214                     	;# 
   330  0215                     	;# 
   331  0215                     	;# 
   332  0215                     	;# 
   333  0215                     	;# 
   334  0216                     	;# 
   335  0216                     	;# 
   336  0217                     	;# 
   337  0217                     	;# 
   338  0291                     	;# 
   339  0291                     	;# 
   340  0292                     	;# 
   341  0293                     	;# 
   342  0294                     	;# 
   343  0295                     	;# 
   344  0295                     	;# 
   345  0296                     	;# 
   346  0298                     	;# 
   347  0298                     	;# 
   348  0299                     	;# 
   349  029A                     	;# 
   350  029B                     	;# 
   351  029C                     	;# 
   352  029D                     	;# 
   353  029E                     	;# 
   354  029E                     	;# 
   355  0311                     	;# 
   356  0311                     	;# 
   357  0312                     	;# 
   358  0313                     	;# 
   359  0318                     	;# 
   360  0318                     	;# 
   361  0319                     	;# 
   362  031A                     	;# 
   363  038C                     	;# 
   364  038D                     	;# 
   365  038E                     	;# 
   366  0391                     	;# 
   367  0392                     	;# 
   368  0393                     	;# 
   369  0394                     	;# 
   370  0395                     	;# 
   371  0396                     	;# 
   372  039A                     	;# 
   373  039C                     	;# 
   374  039D                     	;# 
   375  039E                     	;# 
   376  039F                     	;# 
   377  0415                     	;# 
   378  0416                     	;# 
   379  0417                     	;# 
   380  041C                     	;# 
   381  041D                     	;# 
   382  041E                     	;# 
   383  0FE4                     	;# 
   384  0FE5                     	;# 
   385  0FE6                     	;# 
   386  0FE7                     	;# 
   387  0FE8                     	;# 
   388  0FE9                     	;# 
   389  0FEA                     	;# 
   390  0FEB                     	;# 
   391  0FED                     	;# 
   392  0FEE                     	;# 
   393  0FEF                     	;# 
   394  0000                     	;# 
   395  0001                     	;# 
   396  0002                     	;# 
   397  0003                     	;# 
   398  0004                     	;# 
   399  0005                     	;# 
   400  0006                     	;# 
   401  0007                     	;# 
   402  0008                     	;# 
   403  0009                     	;# 
   404  000A                     	;# 
   405  000B                     	;# 
   406  000C                     	;# 
   407  000D                     	;# 
   408  000E                     	;# 
   409  0011                     	;# 
   410  0012                     	;# 
   411  0013                     	;# 
   412  0015                     	;# 
   413  0016                     	;# 
   414  0016                     	;# 
   415  0017                     	;# 
   416  0018                     	;# 
   417  0019                     	;# 
   418  001A                     	;# 
   419  001B                     	;# 
   420  001C                     	;# 
   421  001E                     	;# 
   422  001F                     	;# 
   423  008C                     	;# 
   424  008D                     	;# 
   425  008E                     	;# 
   426  0091                     	;# 
   427  0092                     	;# 
   428  0093                     	;# 
   429  0095                     	;# 
   430  0096                     	;# 
   431  0097                     	;# 
   432  0098                     	;# 
   433  0099                     	;# 
   434  009A                     	;# 
   435  009B                     	;# 
   436  009B                     	;# 
   437  009C                     	;# 
   438  009D                     	;# 
   439  009E                     	;# 
   440  010C                     	;# 
   441  010D                     	;# 
   442  010E                     	;# 
   443  0111                     	;# 
   444  0112                     	;# 
   445  0113                     	;# 
   446  0114                     	;# 
   447  0115                     	;# 
   448  0116                     	;# 
   449  0117                     	;# 
   450  0118                     	;# 
   451  0119                     	;# 
   452  011A                     	;# 
   453  011B                     	;# 
   454  011D                     	;# 
   455  011E                     	;# 
   456  018C                     	;# 
   457  018D                     	;# 
   458  018E                     	;# 
   459  0191                     	;# 
   460  0191                     	;# 
   461  0192                     	;# 
   462  0193                     	;# 
   463  0193                     	;# 
   464  0193                     	;# 
   465  0194                     	;# 
   466  0195                     	;# 
   467  0196                     	;# 
   468  0199                     	;# 
   469  019A                     	;# 
   470  019B                     	;# 
   471  019B                     	;# 
   472  019B                     	;# 
   473  019B                     	;# 
   474  019C                     	;# 
   475  019C                     	;# 
   476  019D                     	;# 
   477  019E                     	;# 
   478  019F                     	;# 
   479  020C                     	;# 
   480  020D                     	;# 
   481  020E                     	;# 
   482  0211                     	;# 
   483  0211                     	;# 
   484  0212                     	;# 
   485  0212                     	;# 
   486  0213                     	;# 
   487  0213                     	;# 
   488  0214                     	;# 
   489  0214                     	;# 
   490  0215                     	;# 
   491  0215                     	;# 
   492  0215                     	;# 
   493  0215                     	;# 
   494  0216                     	;# 
   495  0216                     	;# 
   496  0217                     	;# 
   497  0217                     	;# 
   498  0291                     	;# 
   499  0291                     	;# 
   500  0292                     	;# 
   501  0293                     	;# 
   502  0294                     	;# 
   503  0295                     	;# 
   504  0295                     	;# 
   505  0296                     	;# 
   506  0298                     	;# 
   507  0298                     	;# 
   508  0299                     	;# 
   509  029A                     	;# 
   510  029B                     	;# 
   511  029C                     	;# 
   512  029D                     	;# 
   513  029E                     	;# 
   514  029E                     	;# 
   515  0311                     	;# 
   516  0311                     	;# 
   517  0312                     	;# 
   518  0313                     	;# 
   519  0318                     	;# 
   520  0318                     	;# 
   521  0319                     	;# 
   522  031A                     	;# 
   523  038C                     	;# 
   524  038D                     	;# 
   525  038E                     	;# 
   526  0391                     	;# 
   527  0392                     	;# 
   528  0393                     	;# 
   529  0394                     	;# 
   530  0395                     	;# 
   531  0396                     	;# 
   532  039A                     	;# 
   533  039C                     	;# 
   534  039D                     	;# 
   535  039E                     	;# 
   536  039F                     	;# 
   537  0415                     	;# 
   538  0416                     	;# 
   539  0417                     	;# 
   540  041C                     	;# 
   541  041D                     	;# 
   542  041E                     	;# 
   543  0FE4                     	;# 
   544  0FE5                     	;# 
   545  0FE6                     	;# 
   546  0FE7                     	;# 
   547  0FE8                     	;# 
   548  0FE9                     	;# 
   549  0FEA                     	;# 
   550  0FEB                     	;# 
   551  0FED                     	;# 
   552  0FEE                     	;# 
   553  0FEF                     	;# 
   554  0000                     	;# 
   555  0001                     	;# 
   556  0002                     	;# 
   557  0003                     	;# 
   558  0004                     	;# 
   559  0005                     	;# 
   560  0006                     	;# 
   561  0007                     	;# 
   562  0008                     	;# 
   563  0009                     	;# 
   564  000A                     	;# 
   565  000B                     	;# 
   566  000C                     	;# 
   567  000D                     	;# 
   568  000E                     	;# 
   569  0011                     	;# 
   570  0012                     	;# 
   571  0013                     	;# 
   572  0015                     	;# 
   573  0016                     	;# 
   574  0016                     	;# 
   575  0017                     	;# 
   576  0018                     	;# 
   577  0019                     	;# 
   578  001A                     	;# 
   579  001B                     	;# 
   580  001C                     	;# 
   581  001E                     	;# 
   582  001F                     	;# 
   583  008C                     	;# 
   584  008D                     	;# 
   585  008E                     	;# 
   586  0091                     	;# 
   587  0092                     	;# 
   588  0093                     	;# 
   589  0095                     	;# 
   590  0096                     	;# 
   591  0097                     	;# 
   592  0098                     	;# 
   593  0099                     	;# 
   594  009A                     	;# 
   595  009B                     	;# 
   596  009B                     	;# 
   597  009C                     	;# 
   598  009D                     	;# 
   599  009E                     	;# 
   600  010C                     	;# 
   601  010D                     	;# 
   602  010E                     	;# 
   603  0111                     	;# 
   604  0112                     	;# 
   605  0113                     	;# 
   606  0114                     	;# 
   607  0115                     	;# 
   608  0116                     	;# 
   609  0117                     	;# 
   610  0118                     	;# 
   611  0119                     	;# 
   612  011A                     	;# 
   613  011B                     	;# 
   614  011D                     	;# 
   615  011E                     	;# 
   616  018C                     	;# 
   617  018D                     	;# 
   618  018E                     	;# 
   619  0191                     	;# 
   620  0191                     	;# 
   621  0192                     	;# 
   622  0193                     	;# 
   623  0193                     	;# 
   624  0193                     	;# 
   625  0194                     	;# 
   626  0195                     	;# 
   627  0196                     	;# 
   628  0199                     	;# 
   629  019A                     	;# 
   630  019B                     	;# 
   631  019B                     	;# 
   632  019B                     	;# 
   633  019B                     	;# 
   634  019C                     	;# 
   635  019C                     	;# 
   636  019D                     	;# 
   637  019E                     	;# 
   638  019F                     	;# 
   639  020C                     	;# 
   640  020D                     	;# 
   641  020E                     	;# 
   642  0211                     	;# 
   643  0211                     	;# 
   644  0212                     	;# 
   645  0212                     	;# 
   646  0213                     	;# 
   647  0213                     	;# 
   648  0214                     	;# 
   649  0214                     	;# 
   650  0215                     	;# 
   651  0215                     	;# 
   652  0215                     	;# 
   653  0215                     	;# 
   654  0216                     	;# 
   655  0216                     	;# 
   656  0217                     	;# 
   657  0217                     	;# 
   658  0291                     	;# 
   659  0291                     	;# 
   660  0292                     	;# 
   661  0293                     	;# 
   662  0294                     	;# 
   663  0295                     	;# 
   664  0295                     	;# 
   665  0296                     	;# 
   666  0298                     	;# 
   667  0298                     	;# 
   668  0299                     	;# 
   669  029A                     	;# 
   670  029B                     	;# 
   671  029C                     	;# 
   672  029D                     	;# 
   673  029E                     	;# 
   674  029E                     	;# 
   675  0311                     	;# 
   676  0311                     	;# 
   677  0312                     	;# 
   678  0313                     	;# 
   679  0318                     	;# 
   680  0318                     	;# 
   681  0319                     	;# 
   682  031A                     	;# 
   683  038C                     	;# 
   684  038D                     	;# 
   685  038E                     	;# 
   686  0391                     	;# 
   687  0392                     	;# 
   688  0393                     	;# 
   689  0394                     	;# 
   690  0395                     	;# 
   691  0396                     	;# 
   692  039A                     	;# 
   693  039C                     	;# 
   694  039D                     	;# 
   695  039E                     	;# 
   696  039F                     	;# 
   697  0415                     	;# 
   698  0416                     	;# 
   699  0417                     	;# 
   700  041C                     	;# 
   701  041D                     	;# 
   702  041E                     	;# 
   703  0FE4                     	;# 
   704  0FE5                     	;# 
   705  0FE6                     	;# 
   706  0FE7                     	;# 
   707  0FE8                     	;# 
   708  0FE9                     	;# 
   709  0FEA                     	;# 
   710  0FEB                     	;# 
   711  0FED                     	;# 
   712  0FEE                     	;# 
   713  0FEF                     	;# 
   714  0000                     	;# 
   715  0001                     	;# 
   716  0002                     	;# 
   717  0003                     	;# 
   718  0004                     	;# 
   719  0005                     	;# 
   720  0006                     	;# 
   721  0007                     	;# 
   722  0008                     	;# 
   723  0009                     	;# 
   724  000A                     	;# 
   725  000B                     	;# 
   726  000C                     	;# 
   727  000D                     	;# 
   728  000E                     	;# 
   729  0011                     	;# 
   730  0012                     	;# 
   731  0013                     	;# 
   732  0015                     	;# 
   733  0016                     	;# 
   734  0016                     	;# 
   735  0017                     	;# 
   736  0018                     	;# 
   737  0019                     	;# 
   738  001A                     	;# 
   739  001B                     	;# 
   740  001C                     	;# 
   741  001E                     	;# 
   742  001F                     	;# 
   743  008C                     	;# 
   744  008D                     	;# 
   745  008E                     	;# 
   746  0091                     	;# 
   747  0092                     	;# 
   748  0093                     	;# 
   749  0095                     	;# 
   750  0096                     	;# 
   751  0097                     	;# 
   752  0098                     	;# 
   753  0099                     	;# 
   754  009A                     	;# 
   755  009B                     	;# 
   756  009B                     	;# 
   757  009C                     	;# 
   758  009D                     	;# 
   759  009E                     	;# 
   760  010C                     	;# 
   761  010D                     	;# 
   762  010E                     	;# 
   763  0111                     	;# 
   764  0112                     	;# 
   765  0113                     	;# 
   766  0114                     	;# 
   767  0115                     	;# 
   768  0116                     	;# 
   769  0117                     	;# 
   770  0118                     	;# 
   771  0119                     	;# 
   772  011A                     	;# 
   773  011B                     	;# 
   774  011D                     	;# 
   775  011E                     	;# 
   776  018C                     	;# 
   777  018D                     	;# 
   778  018E                     	;# 
   779  0191                     	;# 
   780  0191                     	;# 
   781  0192                     	;# 
   782  0193                     	;# 
   783  0193                     	;# 
   784  0193                     	;# 
   785  0194                     	;# 
   786  0195                     	;# 
   787  0196                     	;# 
   788  0199                     	;# 
   789  019A                     	;# 
   790  019B                     	;# 
   791  019B                     	;# 
   792  019B                     	;# 
   793  019B                     	;# 
   794  019C                     	;# 
   795  019C                     	;# 
   796  019D                     	;# 
   797  019E                     	;# 
   798  019F                     	;# 
   799  020C                     	;# 
   800  020D                     	;# 
   801  020E                     	;# 
   802  0211                     	;# 
   803  0211                     	;# 
   804  0212                     	;# 
   805  0212                     	;# 
   806  0213                     	;# 
   807  0213                     	;# 
   808  0214                     	;# 
   809  0214                     	;# 
   810  0215                     	;# 
   811  0215                     	;# 
   812  0215                     	;# 
   813  0215                     	;# 
   814  0216                     	;# 
   815  0216                     	;# 
   816  0217                     	;# 
   817  0217                     	;# 
   818  0291                     	;# 
   819  0291                     	;# 
   820  0292                     	;# 
   821  0293                     	;# 
   822  0294                     	;# 
   823  0295                     	;# 
   824  0295                     	;# 
   825  0296                     	;# 
   826  0298                     	;# 
   827  0298                     	;# 
   828  0299                     	;# 
   829  029A                     	;# 
   830  029B                     	;# 
   831  029C                     	;# 
   832  029D                     	;# 
   833  029E                     	;# 
   834  029E                     	;# 
   835  0311                     	;# 
   836  0311                     	;# 
   837  0312                     	;# 
   838  0313                     	;# 
   839  0318                     	;# 
   840  0318                     	;# 
   841  0319                     	;# 
   842  031A                     	;# 
   843  038C                     	;# 
   844  038D                     	;# 
   845  038E                     	;# 
   846  0391                     	;# 
   847  0392                     	;# 
   848  0393                     	;# 
   849  0394                     	;# 
   850  0395                     	;# 
   851  0396                     	;# 
   852  039A                     	;# 
   853  039C                     	;# 
   854  039D                     	;# 
   855  039E                     	;# 
   856  039F                     	;# 
   857  0415                     	;# 
   858  0416                     	;# 
   859  0417                     	;# 
   860  041C                     	;# 
   861  041D                     	;# 
   862  041E                     	;# 
   863  0FE4                     	;# 
   864  0FE5                     	;# 
   865  0FE6                     	;# 
   866  0FE7                     	;# 
   867  0FE8                     	;# 
   868  0FE9                     	;# 
   869  0FEA                     	;# 
   870  0FEB                     	;# 
   871  0FED                     	;# 
   872  0FEE                     	;# 
   873  0FEF                     	;# 
   874  0000                     	;# 
   875  0001                     	;# 
   876  0002                     	;# 
   877  0003                     	;# 
   878  0004                     	;# 
   879  0005                     	;# 
   880  0006                     	;# 
   881  0007                     	;# 
   882  0008                     	;# 
   883  0009                     	;# 
   884  000A                     	;# 
   885  000B                     	;# 
   886  000C                     	;# 
   887  000D                     	;# 
   888  000E                     	;# 
   889  0011                     	;# 
   890  0012                     	;# 
   891  0013                     	;# 
   892  0015                     	;# 
   893  0016                     	;# 
   894  0016                     	;# 
   895  0017                     	;# 
   896  0018                     	;# 
   897  0019                     	;# 
   898  001A                     	;# 
   899  001B                     	;# 
   900  001C                     	;# 
   901  001E                     	;# 
   902  001F                     	;# 
   903  008C                     	;# 
   904  008D                     	;# 
   905  008E                     	;# 
   906  0091                     	;# 
   907  0092                     	;# 
   908  0093                     	;# 
   909  0095                     	;# 
   910  0096                     	;# 
   911  0097                     	;# 
   912  0098                     	;# 
   913  0099                     	;# 
   914  009A                     	;# 
   915  009B                     	;# 
   916  009B                     	;# 
   917  009C                     	;# 
   918  009D                     	;# 
   919  009E                     	;# 
   920  010C                     	;# 
   921  010D                     	;# 
   922  010E                     	;# 
   923  0111                     	;# 
   924  0112                     	;# 
   925  0113                     	;# 
   926  0114                     	;# 
   927  0115                     	;# 
   928  0116                     	;# 
   929  0117                     	;# 
   930  0118                     	;# 
   931  0119                     	;# 
   932  011A                     	;# 
   933  011B                     	;# 
   934  011D                     	;# 
   935  011E                     	;# 
   936  018C                     	;# 
   937  018D                     	;# 
   938  018E                     	;# 
   939  0191                     	;# 
   940  0191                     	;# 
   941  0192                     	;# 
   942  0193                     	;# 
   943  0193                     	;# 
   944  0193                     	;# 
   945  0194                     	;# 
   946  0195                     	;# 
   947  0196                     	;# 
   948  0199                     	;# 
   949  019A                     	;# 
   950  019B                     	;# 
   951  019B                     	;# 
   952  019B                     	;# 
   953  019B                     	;# 
   954  019C                     	;# 
   955  019C                     	;# 
   956  019D                     	;# 
   957  019E                     	;# 
   958  019F                     	;# 
   959  020C                     	;# 
   960  020D                     	;# 
   961  020E                     	;# 
   962  0211                     	;# 
   963  0211                     	;# 
   964  0212                     	;# 
   965  0212                     	;# 
   966  0213                     	;# 
   967  0213                     	;# 
   968  0214                     	;# 
   969  0214                     	;# 
   970  0215                     	;# 
   971  0215                     	;# 
   972  0215                     	;# 
   973  0215                     	;# 
   974  0216                     	;# 
   975  0216                     	;# 
   976  0217                     	;# 
   977  0217                     	;# 
   978  0291                     	;# 
   979  0291                     	;# 
   980  0292                     	;# 
   981  0293                     	;# 
   982  0294                     	;# 
   983  0295                     	;# 
   984  0295                     	;# 
   985  0296                     	;# 
   986  0298                     	;# 
   987  0298                     	;# 
   988  0299                     	;# 
   989  029A                     	;# 
   990  029B                     	;# 
   991  029C                     	;# 
   992  029D                     	;# 
   993  029E                     	;# 
   994  029E                     	;# 
   995  0311                     	;# 
   996  0311                     	;# 
   997  0312                     	;# 
   998  0313                     	;# 
   999  0318                     	;# 
  1000  0318                     	;# 
  1001  0319                     	;# 
  1002  031A                     	;# 
  1003  038C                     	;# 
  1004  038D                     	;# 
  1005  038E                     	;# 
  1006  0391                     	;# 
  1007  0392                     	;# 
  1008  0393                     	;# 
  1009  0394                     	;# 
  1010  0395                     	;# 
  1011  0396                     	;# 
  1012  039A                     	;# 
  1013  039C                     	;# 
  1014  039D                     	;# 
  1015  039E                     	;# 
  1016  039F                     	;# 
  1017  0415                     	;# 
  1018  0416                     	;# 
  1019  0417                     	;# 
  1020  041C                     	;# 
  1021  041D                     	;# 
  1022  041E                     	;# 
  1023  0FE4                     	;# 
  1024  0FE5                     	;# 
  1025  0FE6                     	;# 
  1026  0FE7                     	;# 
  1027  0FE8                     	;# 
  1028  0FE9                     	;# 
  1029  0FEA                     	;# 
  1030  0FEB                     	;# 
  1031  0FED                     	;# 
  1032  0FEE                     	;# 
  1033  0FEF                     	;# 
  1034  0000                     	;# 
  1035  0001                     	;# 
  1036  0002                     	;# 
  1037  0003                     	;# 
  1038  0004                     	;# 
  1039  0005                     	;# 
  1040  0006                     	;# 
  1041  0007                     	;# 
  1042  0008                     	;# 
  1043  0009                     	;# 
  1044  000A                     	;# 
  1045  000B                     	;# 
  1046  000C                     	;# 
  1047  000D                     	;# 
  1048  000E                     	;# 
  1049  0011                     	;# 
  1050  0012                     	;# 
  1051  0013                     	;# 
  1052  0015                     	;# 
  1053  0016                     	;# 
  1054  0016                     	;# 
  1055  0017                     	;# 
  1056  0018                     	;# 
  1057  0019                     	;# 
  1058  001A                     	;# 
  1059  001B                     	;# 
  1060  001C                     	;# 
  1061  001E                     	;# 
  1062  001F                     	;# 
  1063  008C                     	;# 
  1064  008D                     	;# 
  1065  008E                     	;# 
  1066  0091                     	;# 
  1067  0092                     	;# 
  1068  0093                     	;# 
  1069  0095                     	;# 
  1070  0096                     	;# 
  1071  0097                     	;# 
  1072  0098                     	;# 
  1073  0099                     	;# 
  1074  009A                     	;# 
  1075  009B                     	;# 
  1076  009B                     	;# 
  1077  009C                     	;# 
  1078  009D                     	;# 
  1079  009E                     	;# 
  1080  010C                     	;# 
  1081  010D                     	;# 
  1082  010E                     	;# 
  1083  0111                     	;# 
  1084  0112                     	;# 
  1085  0113                     	;# 
  1086  0114                     	;# 
  1087  0115                     	;# 
  1088  0116                     	;# 
  1089  0117                     	;# 
  1090  0118                     	;# 
  1091  0119                     	;# 
  1092  011A                     	;# 
  1093  011B                     	;# 
  1094  011D                     	;# 
  1095  011E                     	;# 
  1096  018C                     	;# 
  1097  018D                     	;# 
  1098  018E                     	;# 
  1099  0191                     	;# 
  1100  0191                     	;# 
  1101  0192                     	;# 
  1102  0193                     	;# 
  1103  0193                     	;# 
  1104  0193                     	;# 
  1105  0194                     	;# 
  1106  0195                     	;# 
  1107  0196                     	;# 
  1108  0199                     	;# 
  1109  019A                     	;# 
  1110  019B                     	;# 
  1111  019B                     	;# 
  1112  019B                     	;# 
  1113  019B                     	;# 
  1114  019C                     	;# 
  1115  019C                     	;# 
  1116  019D                     	;# 
  1117  019E                     	;# 
  1118  019F                     	;# 
  1119  020C                     	;# 
  1120  020D                     	;# 
  1121  020E                     	;# 
  1122  0211                     	;# 
  1123  0211                     	;# 
  1124  0212                     	;# 
  1125  0212                     	;# 
  1126  0213                     	;# 
  1127  0213                     	;# 
  1128  0214                     	;# 
  1129  0214                     	;# 
  1130  0215                     	;# 
  1131  0215                     	;# 
  1132  0215                     	;# 
  1133  0215                     	;# 
  1134  0216                     	;# 
  1135  0216                     	;# 
  1136  0217                     	;# 
  1137  0217                     	;# 
  1138  0291                     	;# 
  1139  0291                     	;# 
  1140  0292                     	;# 
  1141  0293                     	;# 
  1142  0294                     	;# 
  1143  0295                     	;# 
  1144  0295                     	;# 
  1145  0296                     	;# 
  1146  0298                     	;# 
  1147  0298                     	;# 
  1148  0299                     	;# 
  1149  029A                     	;# 
  1150  029B                     	;# 
  1151  029C                     	;# 
  1152  029D                     	;# 
  1153  029E                     	;# 
  1154  029E                     	;# 
  1155  0311                     	;# 
  1156  0311                     	;# 
  1157  0312                     	;# 
  1158  0313                     	;# 
  1159  0318                     	;# 
  1160  0318                     	;# 
  1161  0319                     	;# 
  1162  031A                     	;# 
  1163  038C                     	;# 
  1164  038D                     	;# 
  1165  038E                     	;# 
  1166  0391                     	;# 
  1167  0392                     	;# 
  1168  0393                     	;# 
  1169  0394                     	;# 
  1170  0395                     	;# 
  1171  0396                     	;# 
  1172  039A                     	;# 
  1173  039C                     	;# 
  1174  039D                     	;# 
  1175  039E                     	;# 
  1176  039F                     	;# 
  1177  0415                     	;# 
  1178  0416                     	;# 
  1179  0417                     	;# 
  1180  041C                     	;# 
  1181  041D                     	;# 
  1182  041E                     	;# 
  1183  0FE4                     	;# 
  1184  0FE5                     	;# 
  1185  0FE6                     	;# 
  1186  0FE7                     	;# 
  1187  0FE8                     	;# 
  1188  0FE9                     	;# 
  1189  0FEA                     	;# 
  1190  0FEB                     	;# 
  1191  0FED                     	;# 
  1192  0FEE                     	;# 
  1193  0FEF                     	;# 
  1194                           
  1195                           	psect	idataBANK0
  1196  039C                     __pidataBANK0:	
  1197                           
  1198                           ;initializer for _IQRPreSta
  1199  039C  3403               	retlw	3
  1200  039D  3403               	retlw	3
  1201  039E  3403               	retlw	3
  1202  039F  3403               	retlw	3
  1203  03A0  3403               	retlw	3
  1204  03A1  3403               	retlw	3
  1205  03A2  3403               	retlw	3
  1206  03A3  3403               	retlw	3
  1207                           
  1208                           ;initializer for testTimeCtrlProcess@PreIQRSta
  1209  03A4  3403               	retlw	3
  1210                           
  1211                           	psect	nvBANK0
  1212  005D                     __pnvBANK0:	
  1213  005D                     _TMR0_InterruptHandler:	
  1214  005D                     	ds	2
  1215  005F                     _EUSART_RxDefaultInterruptHandler:	
  1216  005F                     	ds	2
  1217  0061                     _timer0ReloadVal:	
  1218  0061                     	ds	1
  1219  0015                     _TMR0	set	21
  1220  0011                     _PIR1bits	set	17
  1221  000B                     _INTCONbits	set	11
  1222  000D                     _PORTBbits	set	13
  1223  0095                     _OPTION_REG	set	149
  1224  0091                     _PIE1bits	set	145
  1225  0095                     _OPTION_REGbits	set	149
  1226  008E                     _TRISC	set	142
  1227  008D                     _TRISB	set	141
  1228  008C                     _TRISA	set	140
  1229  0097                     _WDTCON	set	151
  1230  0098                     _OSCTUNE	set	152
  1231  0099                     _OSCCON	set	153
  1232  010C                     _LATAbits	set	268
  1233  011E                     _APFCON1	set	286
  1234  011D                     _APFCON0	set	285
  1235  010E                     _LATC	set	270
  1236  010D                     _LATB	set	269
  1237  010C                     _LATA	set	268
  1238  0116                     _BORCON	set	278
  1239  0199                     _RCREG	set	409
  1240  019D                     _RCSTAbits	set	413
  1241  019C                     _SPBRGH	set	412
  1242  019B                     _SPBRGL	set	411
  1243  019E                     _TXSTA	set	414
  1244  019D                     _RCSTA	set	413
  1245  019F                     _BAUDCON	set	415
  1246  018C                     _ANSELA	set	396
  1247  018D                     _ANSELB	set	397
  1248  018E                     _ANSELC	set	398
  1249  020E                     _WPUC	set	526
  1250  020C                     _WPUA	set	524
  1251  020D                     _WPUB	set	525
  1252                           
  1253                           ; #config settings
  1254  0000                     
  1255                           	psect	cinit
  1256  0029                     start_initialization:	
  1257  0029                     __initialization:	
  1258                           
  1259                           ; Initialize objects allocated to BANK0
  1260  0029  309C               	movlw	low __pidataBANK0
  1261  002A  0084               	movwf	4
  1262  002B  3083               	movlw	(high __pidataBANK0)| (0+128)
  1263  002C  0085               	movwf	5
  1264  002D  3054               	movlw	low __pdataBANK0
  1265  002E  0086               	movwf	6
  1266  002F  3000               	movlw	high __pdataBANK0
  1267  0030  0087               	movwf	7
  1268  0031  3009               	movlw	9
  1269  0032  3183  23BA  3180   	fcall	init_ram
  1270                           
  1271                           ; Clear objects allocated to COMMON
  1272  0035  01F7               	clrf	__pbssCOMMON& (0+127)
  1273  0036  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
  1274  0037  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
  1275  0038  01FA               	clrf	(__pbssCOMMON+3)& (0+127)
  1276                           
  1277                           ; Clear objects allocated to BANK0
  1278  0039  3020               	movlw	low __pbssBANK0
  1279  003A  0084               	movwf	4
  1280  003B  3000               	movlw	high __pbssBANK0
  1281  003C  0085               	movwf	5
  1282  003D  3025               	movlw	37
  1283  003E  3183  23C0  3180   	fcall	clear_ram0
  1284                           
  1285                           ; Clear objects allocated to BANK1
  1286  0041  30A0               	movlw	low __pbssBANK1
  1287  0042  0084               	movwf	4
  1288  0043  3000               	movlw	high __pbssBANK1
  1289  0044  0085               	movwf	5
  1290  0045  3040               	movlw	64
  1291  0046  3183  23C0  3180   	fcall	clear_ram0
  1292                           
  1293                           ; Clear objects allocated to BANK2
  1294  0049  3020               	movlw	low __pbssBANK2
  1295  004A  0084               	movwf	4
  1296  004B  3001               	movlw	high __pbssBANK2
  1297  004C  0085               	movwf	5
  1298  004D  304B               	movlw	75
  1299  004E  3183  23C0         	fcall	clear_ram0
  1300  0050                     end_of_initialization:	
  1301                           ;End of C runtime variable initialization code
  1302                           
  1303  0050                     __end_of__initialization:	
  1304  0050  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1305  0051  0020               	movlb	0
  1306  0052  3183  2B03         	ljmp	_main	;jump to C main() function
  1307                           
  1308                           	psect	bssCOMMON
  1309  0077                     __pbssCOMMON:	
  1310  0077                     testTimeCtrlProcess@IQRSta:	
  1311  0077                     	ds	1
  1312  0078                     _eusartRxCount:	
  1313  0078                     	ds	1
  1314  0079                     _timeCtrlOvertimeMask:	
  1315  0079                     	ds	1
  1316  007A                     _timeCtrlStartFlag:	
  1317  007A                     	ds	1
  1318                           
  1319                           	psect	bssBANK0
  1320  0020                     __pbssBANK0:	
  1321  0020                     tempCtrlProcess@timeCnt:	
  1322  0020                     	ds	16
  1323  0030                     _IQRSta:	
  1324  0030                     	ds	8
  1325  0038                     testTimeCtrlProcess@timeCnt:	
  1326  0038                     	ds	2
  1327  003A                     _EUSART_TxDefaultInterruptHandler:	
  1328  003A                     	ds	2
  1329  003C                     _testIQRNum:	
  1330  003C                     	ds	1
  1331  003D                     TMR0_CallBack@testTimeCtrlCnt:	
  1332  003D                     	ds	1
  1333  003E                     TMR0_CallBack@preEusartRxCount:	
  1334  003E                     	ds	1
  1335  003F                     TMR0_CallBack@timeCrlCnt:	
  1336  003F                     	ds	1
  1337  0040                     TMR0_CallBack@eusartRXOvertimeCnt:	
  1338  0040                     	ds	1
  1339  0041                     _eusartRxOvertimeMask:	
  1340  0041                     	ds	1
  1341  0042                     _EusartRxLenth:	
  1342  0042                     	ds	1
  1343  0043                     _testTimeCtrlOvertimeMask:	
  1344  0043                     	ds	1
  1345  0044                     _testTimeCtrlFlag:	
  1346  0044                     	ds	1
  1347                           
  1348                           	psect	dataBANK0
  1349  0054                     __pdataBANK0:	
  1350  0054                     _IQRPreSta:	
  1351  0054                     	ds	8
  1352  005C                     testTimeCtrlProcess@PreIQRSta:	
  1353  005C                     	ds	1
  1354                           
  1355                           	psect	bssBANK1
  1356  00A0                     __pbssBANK1:	
  1357  00A0                     _timeCtrlValue:	
  1358  00A0                     	ds	64
  1359                           
  1360                           	psect	bssBANK2
  1361  0120                     __pbssBANK2:	
  1362  0120                     _eusartRxBuffer:	
  1363  0120                     	ds	75
  1364                           
  1365                           	psect	inittext
  1366  03BA                     init_ram:	
  1367  03BA  00FE               	movwf	126
  1368  03BB                     initloop:	
  1369  03BB  0012               	moviw fsr0++
  1370  03BC  001E               	movwi fsr1++
  1371  03BD  0BFE               	decfsz	126,f
  1372  03BE  2BBB               	goto	initloop
  1373  03BF  3400               	retlw	0
  1374                           
  1375                           	psect	clrtext
  1376  03C0                     clear_ram0:	
  1377                           ;	Called with FSR0 containing the base address, and
  1378                           ;	WREG with the size to clear
  1379                           
  1380  03C0  0064               	clrwdt	;clear the watchdog before getting into this loop
  1381  03C1                     clrloop0:	
  1382  03C1  0180               	clrf	0	;clear RAM location pointed to by FSR
  1383  03C2  3101               	addfsr 0,1
  1384  03C3  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1385  03C4  2BC1               	goto	clrloop0	;have we reached the end yet?
  1386  03C5  3400               	retlw	0	;all done for this memory range, return
  1387                           
  1388                           	psect	cstackCOMMON
  1389  0070                     __pcstackCOMMON:	
  1390  0070                     ?_PIN_MANAGER_Initialize:	
  1391  0070                     ?_OSCILLATOR_Initialize:	
  1392                           ; 1 bytes @ 0x0
  1393                           
  1394  0070                     ?_WDT_Initialize:	
  1395                           ; 1 bytes @ 0x0
  1396                           
  1397  0070                     ?_TMR0_Initialize:	
  1398                           ; 1 bytes @ 0x0
  1399                           
  1400  0070                     ?_EUSART_Initialize:	
  1401                           ; 1 bytes @ 0x0
  1402                           
  1403  0070                     ?_TMR0_ISR:	
  1404                           ; 1 bytes @ 0x0
  1405                           
  1406  0070                     ?_TMR0_DefaultInterruptHandler:	
  1407                           ; 1 bytes @ 0x0
  1408                           
  1409  0070                     ??_TMR0_DefaultInterruptHandler:	
  1410                           ; 1 bytes @ 0x0
  1411                           
  1412  0070                     ?_TMR0_CallBack:	
  1413                           ; 1 bytes @ 0x0
  1414                           
  1415  0070                     ??_TMR0_CallBack:	
  1416                           ; 1 bytes @ 0x0
  1417                           
  1418  0070                     ?_EUSART_Receive_ISR:	
  1419                           ; 1 bytes @ 0x0
  1420                           
  1421  0070                     ??_EUSART_Receive_ISR:	
  1422                           ; 1 bytes @ 0x0
  1423                           
  1424  0070                     ?_stopTimeCtrl:	
  1425                           ; 1 bytes @ 0x0
  1426                           
  1427  0070                     ?_startTimeCtrl:	
  1428                           ; 1 bytes @ 0x0
  1429                           
  1430  0070                     ?_testTimeCtrl:	
  1431                           ; 1 bytes @ 0x0
  1432                           
  1433  0070                     ?_SYSTEM_Initialize:	
  1434                           ; 1 bytes @ 0x0
  1435                           
  1436  0070                     ?_Get_Device_Addr:	
  1437                           ; 1 bytes @ 0x0
  1438                           
  1439  0070                     ?_INTERRUPT_InterruptManager:	
  1440                           ; 1 bytes @ 0x0
  1441                           
  1442  0070                     ?_EUSART_Deal:	
  1443                           ; 1 bytes @ 0x0
  1444                           
  1445  0070                     ?_getTimeData:	
  1446                           ; 1 bytes @ 0x0
  1447                           
  1448  0070                     ?_testTimeCtrlProcess:	
  1449                           ; 1 bytes @ 0x0
  1450                           
  1451  0070                     ?_tempCtrlProcess:	
  1452                           ; 1 bytes @ 0x0
  1453                           
  1454  0070                     ?_main:	
  1455                           ; 1 bytes @ 0x0
  1456                           
  1457                           
  1458                           ; 1 bytes @ 0x0
  1459  0070                     	ds	1
  1460  0071                     ??_TMR0_ISR:	
  1461  0071                     ??_INTERRUPT_InterruptManager:	
  1462                           ; 1 bytes @ 0x1
  1463                           
  1464                           
  1465                           ; 1 bytes @ 0x1
  1466  0071                     	ds	1
  1467  0072                     ??_PIN_MANAGER_Initialize:	
  1468  0072                     ??_OSCILLATOR_Initialize:	
  1469                           ; 1 bytes @ 0x2
  1470                           
  1471  0072                     ??_WDT_Initialize:	
  1472                           ; 1 bytes @ 0x2
  1473                           
  1474  0072                     ?_TMR0_SetInterruptHandler:	
  1475                           ; 1 bytes @ 0x2
  1476                           
  1477  0072                     ?_EUSART_SetRxInterruptHandler:	
  1478                           ; 1 bytes @ 0x2
  1479                           
  1480  0072                     ??_stopTimeCtrl:	
  1481                           ; 1 bytes @ 0x2
  1482                           
  1483  0072                     ??_Get_Device_Addr:	
  1484                           ; 1 bytes @ 0x2
  1485                           
  1486  0072                     ??_testTimeCtrlProcess:	
  1487                           ; 1 bytes @ 0x2
  1488                           
  1489  0072                     ??_tempCtrlProcess:	
  1490                           ; 1 bytes @ 0x2
  1491                           
  1492  0072                     getTimeData@cnt:	
  1493                           ; 1 bytes @ 0x2
  1494                           
  1495  0072                     testTimeCtrl@IQRNum:	
  1496                           ; 1 bytes @ 0x2
  1497                           
  1498  0072                     TMR0_SetInterruptHandler@InterruptHandler:	
  1499                           ; 1 bytes @ 0x2
  1500                           
  1501  0072                     EUSART_SetRxInterruptHandler@interruptHandler:	
  1502                           ; 2 bytes @ 0x2
  1503                           
  1504                           
  1505                           ; 2 bytes @ 0x2
  1506  0072                     	ds	1
  1507  0073                     Get_Device_Addr@device_addr:	
  1508  0073                     getTimeData@i:	
  1509                           ; 1 bytes @ 0x3
  1510                           
  1511  0073                     testTimeCtrl@i:	
  1512                           ; 1 bytes @ 0x3
  1513                           
  1514                           
  1515                           ; 1 bytes @ 0x3
  1516  0073                     	ds	1
  1517  0074                     ??_TMR0_Initialize:	
  1518  0074                     ??_EUSART_Initialize:	
  1519                           ; 1 bytes @ 0x4
  1520                           
  1521  0074                     ??_TMR0_SetInterruptHandler:	
  1522                           ; 1 bytes @ 0x4
  1523                           
  1524  0074                     ??_EUSART_SetRxInterruptHandler:	
  1525                           ; 1 bytes @ 0x4
  1526                           
  1527  0074                     getTimeData@j:	
  1528                           ; 1 bytes @ 0x4
  1529                           
  1530  0074                     stopTimeCtrl@i:	
  1531                           ; 1 bytes @ 0x4
  1532                           
  1533  0074                     tempCtrlProcess@i:	
  1534                           ; 1 bytes @ 0x4
  1535                           
  1536                           
  1537                           ; 1 bytes @ 0x4
  1538  0074                     	ds	1
  1539  0075                     ??_startTimeCtrl:	
  1540  0075                     ??_SYSTEM_Initialize:	
  1541                           ; 1 bytes @ 0x5
  1542                           
  1543  0075                     ??_EUSART_Deal:	
  1544                           ; 1 bytes @ 0x5
  1545                           
  1546                           
  1547                           ; 1 bytes @ 0x5
  1548  0075                     	ds	1
  1549  0076                     testTimeCtrlProcess@IQRNum:	
  1550                           
  1551                           ; 1 bytes @ 0x6
  1552  0076                     	ds	1
  1553  0077                     ??_main:	
  1554                           
  1555                           	psect	cstackBANK0
  1556  0045                     __pcstackBANK0:	
  1557                           ; 1 bytes @ 0x7
  1558                           
  1559  0045                     ??_testTimeCtrl:	
  1560  0045                     ??_getTimeData:	
  1561                           ; 1 bytes @ 0x0
  1562                           
  1563                           
  1564                           ; 1 bytes @ 0x0
  1565  0045                     	ds	15
  1566                           
  1567                           	psect	maintext
  1568  0303                     __pmaintext:	
  1569 ;;
  1570 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1571 ;;
  1572 ;; *************** function _main *****************
  1573 ;; Defined at:
  1574 ;;		line 49 in file "main.c"
  1575 ;; Parameters:    Size  Location     Type
  1576 ;;		None
  1577 ;; Auto vars:     Size  Location     Type
  1578 ;;		None
  1579 ;; Return value:  Size  Location     Type
  1580 ;;                  1    wreg      void 
  1581 ;; Registers used:
  1582 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1583 ;; Tracked objects:
  1584 ;;		On entry : B1F/0
  1585 ;;		On exit  : 0/0
  1586 ;;		Unchanged: 0/0
  1587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1588 ;;      Params:         0       0       0       0
  1589 ;;      Locals:         0       0       0       0
  1590 ;;      Temps:          0       0       0       0
  1591 ;;      Totals:         0       0       0       0
  1592 ;;Total ram usage:        0 bytes
  1593 ;; Hardware stack levels required when called:    7
  1594 ;; This function calls:
  1595 ;;		_EUSART_Deal
  1596 ;;		_SYSTEM_Initialize
  1597 ;;		_tempCtrlProcess
  1598 ;;		_testTimeCtrlProcess
  1599 ;; This function is called by:
  1600 ;;		Startup code after reset
  1601 ;; This function uses a non-reentrant model
  1602 ;;
  1603                           
  1604                           
  1605                           ;psect for function _main
  1606  0303                     _main:	
  1607                           
  1608                           ;main.c: 52: SYSTEM_Initialize();
  1609                           
  1610                           ;incstack = 0
  1611                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1612  0303  3183  237E  3183   	fcall	_SYSTEM_Initialize
  1613                           
  1614                           ;main.c: 58: (INTCONbits.GIE = 1);
  1615  0306  178B               	bsf	11,7	;volatile
  1616                           
  1617                           ;main.c: 61: (INTCONbits.PEIE = 1);
  1618  0307  170B               	bsf	11,6	;volatile
  1619  0308                     l1398:	
  1620                           ;main.c: 69: while (1)
  1621                           
  1622                           
  1623                           ;main.c: 70: {
  1624                           ;main.c: 72: if (eusartRxOvertimeMask)
  1625  0308  0020               	movlb	0	; select bank0
  1626  0309  0841               	movf	_eusartRxOvertimeMask,w
  1627  030A  1903               	btfsc	3,2
  1628  030B  2B10               	goto	l1404
  1629                           
  1630                           ;main.c: 73: {
  1631                           ;main.c: 74: eusartRxOvertimeMask = 0;
  1632  030C  01C1               	clrf	_eusartRxOvertimeMask
  1633                           
  1634                           ;main.c: 75: EUSART_Deal();
  1635  030D  3182  22A2  3183   	fcall	_EUSART_Deal
  1636  0310                     l1404:	
  1637                           
  1638                           ;main.c: 76: }
  1639                           ;main.c: 78: if(timeCtrlOvertimeMask)
  1640  0310  0879               	movf	_timeCtrlOvertimeMask,w
  1641  0311  1903               	btfsc	3,2
  1642  0312  2B17               	goto	l1410
  1643                           
  1644                           ;main.c: 79: {
  1645                           ;main.c: 80: tempCtrlProcess();
  1646  0313  3180  2054  3183   	fcall	_tempCtrlProcess
  1647                           
  1648                           ;main.c: 81: timeCtrlOvertimeMask = 0;
  1649  0316  01F9               	clrf	_timeCtrlOvertimeMask
  1650  0317                     l1410:	
  1651                           
  1652                           ;main.c: 82: }
  1653                           ;main.c: 84: if(testTimeCtrlOvertimeMask)
  1654  0317  0020               	movlb	0	; select bank0
  1655  0318  0843               	movf	_testTimeCtrlOvertimeMask,w
  1656  0319  1903               	btfsc	3,2
  1657  031A  2B08               	goto	l1398
  1658                           
  1659                           ;main.c: 85: {
  1660                           ;main.c: 86: testTimeCtrlProcess(testIQRNum);
  1661  031B  083C               	movf	_testIQRNum,w
  1662  031C  3182  2206  3183   	fcall	_testTimeCtrlProcess
  1663                           
  1664                           ;main.c: 87: testTimeCtrlOvertimeMask = 0;
  1665  031F  0020               	movlb	0	; select bank0
  1666  0320  01C3               	clrf	_testTimeCtrlOvertimeMask
  1667  0321  2B08               	goto	l1398
  1668  0322                     __end_of_main:	
  1669                           
  1670                           	psect	text1
  1671  0206                     __ptext1:	
  1672 ;; *************** function _testTimeCtrlProcess *****************
  1673 ;; Defined at:
  1674 ;;		line 63 in file "mcc_generated_files/time_ctrl.c"
  1675 ;; Parameters:    Size  Location     Type
  1676 ;;  IQRNum          1    wreg     unsigned char 
  1677 ;; Auto vars:     Size  Location     Type
  1678 ;;  IQRNum          1    6[COMMON] unsigned char 
  1679 ;; Return value:  Size  Location     Type
  1680 ;;                  1    wreg      void 
  1681 ;; Registers used:
  1682 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  1683 ;; Tracked objects:
  1684 ;;		On entry : 0/0
  1685 ;;		On exit  : 0/0
  1686 ;;		Unchanged: 0/0
  1687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1688 ;;      Params:         0       0       0       0
  1689 ;;      Locals:         1       0       0       0
  1690 ;;      Temps:          4       0       0       0
  1691 ;;      Totals:         5       0       0       0
  1692 ;;Total ram usage:        5 bytes
  1693 ;; Hardware stack levels used:    1
  1694 ;; Hardware stack levels required when called:    4
  1695 ;; This function calls:
  1696 ;;		Nothing
  1697 ;; This function is called by:
  1698 ;;		_main
  1699 ;; This function uses a non-reentrant model
  1700 ;;
  1701                           
  1702                           
  1703                           ;psect for function _testTimeCtrlProcess
  1704  0206                     _testTimeCtrlProcess:	
  1705                           
  1706                           ;incstack = 0
  1707                           ; Regs used in _testTimeCtrlProcess: [wreg+fsr1l+fsr1h+status,2+status,0]
  1708                           ;testTimeCtrlProcess@IQRNum stored from wreg
  1709  0206  00F6               	movwf	testTimeCtrlProcess@IQRNum
  1710                           
  1711                           ;time_ctrl.c: 65: static uint16_t timeCnt = 0;
  1712                           ;time_ctrl.c: 66: static uint8_t IQRSta = 0;
  1713                           ;time_ctrl.c: 67: static uint8_t PreIQRSta = 3;
  1714                           ;time_ctrl.c: 69: if(IQRSta != PreIQRSta)
  1715  0207  0877               	movf	testTimeCtrlProcess@IQRSta,w
  1716  0208  0020               	movlb	0	; select bank0
  1717  0209  065C               	xorwf	testTimeCtrlProcess@PreIQRSta,w
  1718  020A  1903               	skipnz
  1719  020B  2A26               	goto	l1326
  1720                           
  1721                           ;time_ctrl.c: 70: {
  1722                           ;time_ctrl.c: 71: timeCnt = timeCtrlValue[IQRNum - 1][IQRSta];
  1723  020C  0876               	movf	testTimeCtrlProcess@IQRNum,w
  1724  020D  00F2               	movwf	??_testTimeCtrlProcess
  1725  020E  3003               	movlw	3
  1726  020F                     u895:	
  1727  020F  35F2               	lslf	??_testTimeCtrlProcess,f
  1728  0210  0B89               	decfsz	9,f
  1729  0211  2A0F               	goto	u895
  1730  0212  30F8               	movlw	248
  1731  0213  0772               	addwf	??_testTimeCtrlProcess,w
  1732  0214  00F3               	movwf	??_testTimeCtrlProcess+1
  1733  0215  30A0               	movlw	(low (_timeCtrlValue| 0))& (0+255)
  1734  0216  0773               	addwf	??_testTimeCtrlProcess+1,w
  1735  0217  00F4               	movwf	??_testTimeCtrlProcess+2
  1736  0218  3577               	lslf	testTimeCtrlProcess@IQRSta,w
  1737  0219  0774               	addwf	??_testTimeCtrlProcess+2,w
  1738  021A  00F5               	movwf	??_testTimeCtrlProcess+3
  1739  021B  0875               	movf	??_testTimeCtrlProcess+3,w
  1740  021C  0086               	movwf	6
  1741  021D  0187               	clrf	7
  1742  021E  3F40               	moviw [0]fsr1
  1743  021F  00B8               	movwf	testTimeCtrlProcess@timeCnt
  1744  0220  3F41               	moviw [1]fsr1
  1745  0221  00B9               	movwf	testTimeCtrlProcess@timeCnt+1
  1746                           
  1747                           ;time_ctrl.c: 72: PreIQRSta = IQRSta;
  1748  0222  0877               	movf	testTimeCtrlProcess@IQRSta,w
  1749  0223  00F2               	movwf	??_testTimeCtrlProcess
  1750  0224  0872               	movf	??_testTimeCtrlProcess,w
  1751  0225  00DC               	movwf	testTimeCtrlProcess@PreIQRSta
  1752  0226                     l1326:	
  1753                           
  1754                           ;time_ctrl.c: 73: }
  1755                           ;time_ctrl.c: 75: if(--timeCnt == 0)
  1756  0226  3001               	movlw	1
  1757  0227  02B8               	subwf	testTimeCtrlProcess@timeCnt,f
  1758  0228  3000               	movlw	0
  1759  0229  3BB9               	subwfb	testTimeCtrlProcess@timeCnt+1,f
  1760  022A  0838               	movf	testTimeCtrlProcess@timeCnt,w
  1761  022B  0439               	iorwf	testTimeCtrlProcess@timeCnt+1,w
  1762  022C  1D03               	btfss	3,2
  1763  022D  0008               	return
  1764                           
  1765                           ;time_ctrl.c: 76: {
  1766                           ;time_ctrl.c: 77: if(IQRSta%2 == 0)
  1767  022E  1877               	btfsc	testTimeCtrlProcess@IQRSta,0
  1768  022F  2A3F               	goto	l285
  1769                           
  1770                           ;time_ctrl.c: 78: {
  1771                           ;time_ctrl.c: 79: LATC |= 1 << (IQRNum - 1);
  1772  0230  3001               	movlw	1
  1773  0231  00F2               	movwf	??_testTimeCtrlProcess
  1774  0232  0876               	movf	testTimeCtrlProcess@IQRNum,w
  1775  0233  3EFF               	addlw	-1
  1776  0234  0A89               	incf	9,f
  1777  0235  2A37               	goto	u924
  1778  0236                     u925:	
  1779  0236  35F2               	lslf	??_testTimeCtrlProcess,f
  1780  0237                     u924:	
  1781  0237  0B89               	decfsz	9,f
  1782  0238  2A36               	goto	u925
  1783  0239  0872               	movf	??_testTimeCtrlProcess,w
  1784  023A  00F3               	movwf	??_testTimeCtrlProcess+1
  1785  023B  0873               	movf	??_testTimeCtrlProcess+1,w
  1786  023C  0022               	movlb	2	; select bank2
  1787  023D  048E               	iorwf	14,f	;volatile
  1788                           
  1789                           ;time_ctrl.c: 80: }
  1790  023E  2A50               	goto	l286
  1791  023F                     l285:	
  1792                           
  1793                           ;time_ctrl.c: 81: else if(IQRSta%2 == 1)
  1794  023F  1C77               	btfss	testTimeCtrlProcess@IQRSta,0
  1795  0240  2A50               	goto	l286
  1796                           
  1797                           ;time_ctrl.c: 82: {
  1798                           ;time_ctrl.c: 83: LATC &= ~(1 << (IQRNum - 1));
  1799  0241  3001               	movlw	1
  1800  0242  00F2               	movwf	??_testTimeCtrlProcess
  1801  0243  0876               	movf	testTimeCtrlProcess@IQRNum,w
  1802  0244  3EFF               	addlw	-1
  1803  0245  0A89               	incf	9,f
  1804  0246  2A48               	goto	u944
  1805  0247                     u945:	
  1806  0247  35F2               	lslf	??_testTimeCtrlProcess,f
  1807  0248                     u944:	
  1808  0248  0B89               	decfsz	9,f
  1809  0249  2A47               	goto	u945
  1810  024A  0872               	movf	??_testTimeCtrlProcess,w
  1811  024B  3AFF               	xorlw	255
  1812  024C  00F3               	movwf	??_testTimeCtrlProcess+1
  1813  024D  0873               	movf	??_testTimeCtrlProcess+1,w
  1814  024E  0022               	movlb	2	; select bank2
  1815  024F  058E               	andwf	14,f	;volatile
  1816  0250                     l286:	
  1817                           
  1818                           ;time_ctrl.c: 84: }
  1819                           ;time_ctrl.c: 86: if(++IQRSta >= 4)
  1820  0250  3001               	movlw	1
  1821  0251  00F2               	movwf	??_testTimeCtrlProcess
  1822  0252  0872               	movf	??_testTimeCtrlProcess,w
  1823  0253  07F7               	addwf	testTimeCtrlProcess@IQRSta,f
  1824  0254  3004               	movlw	4
  1825  0255  0277               	subwf	testTimeCtrlProcess@IQRSta,w
  1826  0256  1C03               	skipc
  1827  0257  0008               	return
  1828                           
  1829                           ;time_ctrl.c: 87: {
  1830                           ;time_ctrl.c: 88: IQRSta = 0;
  1831  0258  01F7               	clrf	testTimeCtrlProcess@IQRSta
  1832                           
  1833                           ;time_ctrl.c: 89: testTimeCtrlFlag = 0;
  1834  0259  0020               	movlb	0	; select bank0
  1835  025A  01C4               	clrf	_testTimeCtrlFlag
  1836  025B  0008               	return
  1837  025C                     __end_of_testTimeCtrlProcess:	
  1838                           
  1839                           	psect	text2
  1840  0054                     __ptext2:	
  1841 ;; *************** function _tempCtrlProcess *****************
  1842 ;; Defined at:
  1843 ;;		line 94 in file "mcc_generated_files/time_ctrl.c"
  1844 ;; Parameters:    Size  Location     Type
  1845 ;;		None
  1846 ;; Auto vars:     Size  Location     Type
  1847 ;;  i               1    4[COMMON] unsigned char 
  1848 ;; Return value:  Size  Location     Type
  1849 ;;                  1    wreg      void 
  1850 ;; Registers used:
  1851 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  1852 ;; Tracked objects:
  1853 ;;		On entry : 0/0
  1854 ;;		On exit  : 0/0
  1855 ;;		Unchanged: 0/0
  1856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1857 ;;      Params:         0       0       0       0
  1858 ;;      Locals:         1       0       0       0
  1859 ;;      Temps:          2       0       0       0
  1860 ;;      Totals:         3       0       0       0
  1861 ;;Total ram usage:        3 bytes
  1862 ;; Hardware stack levels used:    1
  1863 ;; Hardware stack levels required when called:    4
  1864 ;; This function calls:
  1865 ;;		Nothing
  1866 ;; This function is called by:
  1867 ;;		_main
  1868 ;; This function uses a non-reentrant model
  1869 ;;
  1870                           
  1871                           
  1872                           ;psect for function _tempCtrlProcess
  1873  0054                     _tempCtrlProcess:	
  1874                           
  1875                           ;time_ctrl.c: 96: uint8_t i;
  1876                           ;time_ctrl.c: 97: static uint16_t timeCnt[8] = {0};
  1877                           ;time_ctrl.c: 99: for(i=0; i<8; i++)
  1878                           
  1879                           ;incstack = 0
  1880                           ; Regs used in _tempCtrlProcess: [wreg-fsr1h+status,2+status,0]
  1881  0054  01F4               	clrf	tempCtrlProcess@i
  1882  0055                     L1:	
  1883  0055  3008               	movlw	8
  1884  0056  0274               	subwf	tempCtrlProcess@i,w
  1885  0057  1803               	btfsc	3,0
  1886  0058  0008               	return
  1887                           
  1888                           ;time_ctrl.c: 100: {
  1889                           ;time_ctrl.c: 101: if(IQRPreSta[i] != IQRSta[i])
  1890  0059  0874               	movf	tempCtrlProcess@i,w
  1891  005A  3E30               	addlw	(low (_IQRSta| 0))& (0+255)
  1892  005B  0086               	movwf	6
  1893  005C  0187               	clrf	7
  1894  005D  0874               	movf	tempCtrlProcess@i,w
  1895  005E  3E54               	addlw	(low (_IQRPreSta| 0))& (0+255)
  1896  005F  0084               	movwf	4
  1897  0060  0185               	clrf	5
  1898  0061  0800               	movf	0,w
  1899  0062  0601               	xorwf	1,w
  1900  0063  1D03               	btfss	3,2
  1901  0064  28B9               	goto	l1356
  1902  0065  28D7               	goto	l296
  1903  0066                     l1346:	
  1904                           ;time_ctrl.c: 104: {
  1905                           ;time_ctrl.c: 105: case 0: timeCnt[i] = timeCtrlValue[i][0]; break;
  1906                           
  1907                           ;time_ctrl.c: 102: {
  1908                           ;time_ctrl.c: 103: switch(IQRSta[i])
  1909                           
  1910  0066  0874               	movf	tempCtrlProcess@i,w
  1911  0067  00F2               	movwf	??_tempCtrlProcess
  1912  0068  3002               	movlw	2
  1913  0069                     u985:	
  1914  0069  35F2               	lslf	??_tempCtrlProcess,f
  1915  006A  3EFF               	addlw	-1
  1916  006B  1D03               	skipz
  1917  006C  2869               	goto	u985
  1918  006D  3572               	lslf	??_tempCtrlProcess,w
  1919  006E  3EA0               	addlw	(low (_timeCtrlValue| 0))& (0+255)
  1920  006F  0086               	movwf	6
  1921  0070  0187               	clrf	7
  1922  0071  3574               	lslf	tempCtrlProcess@i,w
  1923  0072  3E20               	addlw	(low (tempCtrlProcess@timeCnt| 0))& (0+255)
  1924  0073  0084               	movwf	4
  1925  0074  0185               	clrf	5
  1926  0075  3F40               	moviw [0]fsr1
  1927  0076  3F80               	movwi [0]fsr0
  1928  0077  3F41               	moviw [1]fsr1
  1929  0078  3F81               	movwi [1]fsr0
  1930  0079  28CB               	goto	l1358
  1931  007A                     l1348:	
  1932                           ;time_ctrl.c: 106: case 1: timeCnt[i] = timeCtrlValue[i][1]; break;
  1933                           
  1934  007A  0874               	movf	tempCtrlProcess@i,w
  1935  007B  00F2               	movwf	??_tempCtrlProcess
  1936  007C  3002               	movlw	2
  1937  007D                     u995:	
  1938  007D  35F2               	lslf	??_tempCtrlProcess,f
  1939  007E  3EFF               	addlw	-1
  1940  007F  1D03               	skipz
  1941  0080  287D               	goto	u995
  1942  0081  3572               	lslf	??_tempCtrlProcess,w
  1943  0082  3E02               	addlw	2
  1944  0083  3EA0               	addlw	(low (_timeCtrlValue| 0))& (0+255)
  1945  0084  0086               	movwf	6
  1946  0085  0187               	clrf	7
  1947  0086  3574               	lslf	tempCtrlProcess@i,w
  1948  0087  3E20               	addlw	(low (tempCtrlProcess@timeCnt| 0))& (0+255)
  1949  0088  0084               	movwf	4
  1950  0089  0185               	clrf	5
  1951  008A  3F40               	moviw [0]fsr1
  1952  008B  3F80               	movwi [0]fsr0
  1953  008C  3F41               	moviw [1]fsr1
  1954  008D  3F81               	movwi [1]fsr0
  1955  008E  28CB               	goto	l1358
  1956  008F                     l1350:	
  1957                           ;time_ctrl.c: 107: case 2: timeCnt[i] = timeCtrlValue[i][2]; break;
  1958                           
  1959  008F  0874               	movf	tempCtrlProcess@i,w
  1960  0090  00F2               	movwf	??_tempCtrlProcess
  1961  0091  3002               	movlw	2
  1962  0092                     u1005:	
  1963  0092  35F2               	lslf	??_tempCtrlProcess,f
  1964  0093  3EFF               	addlw	-1
  1965  0094  1D03               	skipz
  1966  0095  2892               	goto	u1005
  1967  0096  3572               	lslf	??_tempCtrlProcess,w
  1968  0097  3E04               	addlw	4
  1969  0098  3EA0               	addlw	(low (_timeCtrlValue| 0))& (0+255)
  1970  0099  0086               	movwf	6
  1971  009A  0187               	clrf	7
  1972  009B  3574               	lslf	tempCtrlProcess@i,w
  1973  009C  3E20               	addlw	(low (tempCtrlProcess@timeCnt| 0))& (0+255)
  1974  009D  0084               	movwf	4
  1975  009E  0185               	clrf	5
  1976  009F  3F40               	moviw [0]fsr1
  1977  00A0  3F80               	movwi [0]fsr0
  1978  00A1  3F41               	moviw [1]fsr1
  1979  00A2  3F81               	movwi [1]fsr0
  1980  00A3  28CB               	goto	l1358
  1981  00A4                     l1352:	
  1982                           ;time_ctrl.c: 108: case 3: timeCnt[i] = timeCtrlValue[i][3]; break;
  1983                           
  1984  00A4  0874               	movf	tempCtrlProcess@i,w
  1985  00A5  00F2               	movwf	??_tempCtrlProcess
  1986  00A6  3002               	movlw	2
  1987  00A7                     u1015:	
  1988  00A7  35F2               	lslf	??_tempCtrlProcess,f
  1989  00A8  3EFF               	addlw	-1
  1990  00A9  1D03               	skipz
  1991  00AA  28A7               	goto	u1015
  1992  00AB  3572               	lslf	??_tempCtrlProcess,w
  1993  00AC  3E06               	addlw	6
  1994  00AD  3EA0               	addlw	(low (_timeCtrlValue| 0))& (0+255)
  1995  00AE  0086               	movwf	6
  1996  00AF  0187               	clrf	7
  1997  00B0  3574               	lslf	tempCtrlProcess@i,w
  1998  00B1  3E20               	addlw	(low (tempCtrlProcess@timeCnt| 0))& (0+255)
  1999  00B2  0084               	movwf	4
  2000  00B3  0185               	clrf	5
  2001  00B4  3F40               	moviw [0]fsr1
  2002  00B5  3F80               	movwi [0]fsr0
  2003  00B6  3F41               	moviw [1]fsr1
  2004  00B7  3F81               	movwi [1]fsr0
  2005                           
  2006                           ;time_ctrl.c: 110: }
  2007                           
  2008                           ;time_ctrl.c: 109: default: break;
  2009  00B8  28CB               	goto	l1358
  2010  00B9                     l1356:	
  2011  00B9  0874               	movf	tempCtrlProcess@i,w
  2012  00BA  3E30               	addlw	(low (_IQRSta| 0))& (0+255)
  2013  00BB  0086               	movwf	6
  2014  00BC  0187               	clrf	7
  2015  00BD  0801               	movf	1,w
  2016                           
  2017                           ; Switch size 1, requested type "space"
  2018                           ; Number of cases is 4, Range of values is 0 to 3
  2019                           ; switch strategies available:
  2020                           ; Name         Instructions Cycles
  2021                           ; simple_byte           13     7 (average)
  2022                           ; direct_byte           14     6 (fixed)
  2023                           ; jumptable            260     6 (fixed)
  2024                           ;	Chosen strategy is simple_byte
  2025  00BE  3A00               	xorlw	0	; case 0
  2026  00BF  1903               	skipnz
  2027  00C0  2866               	goto	l1346
  2028  00C1  3A01               	xorlw	1	; case 1
  2029  00C2  1903               	skipnz
  2030  00C3  287A               	goto	l1348
  2031  00C4  3A03               	xorlw	3	; case 2
  2032  00C5  1903               	skipnz
  2033  00C6  288F               	goto	l1350
  2034  00C7  3A01               	xorlw	1	; case 3
  2035  00C8  1903               	skipnz
  2036  00C9  28A4               	goto	l1352
  2037  00CA  28CB               	goto	l1358
  2038  00CB                     l1358:	
  2039                           
  2040                           ;time_ctrl.c: 112: IQRPreSta[i] = IQRSta[i];
  2041  00CB  0874               	movf	tempCtrlProcess@i,w
  2042  00CC  3E30               	addlw	(low (_IQRSta| 0))& (0+255)
  2043  00CD  0086               	movwf	6
  2044  00CE  0187               	clrf	7
  2045  00CF  0801               	movf	1,w
  2046  00D0  00F2               	movwf	??_tempCtrlProcess
  2047  00D1  0874               	movf	tempCtrlProcess@i,w
  2048  00D2  3E54               	addlw	(low (_IQRPreSta| 0))& (0+255)
  2049  00D3  0086               	movwf	6
  2050  00D4  0187               	clrf	7
  2051  00D5  0872               	movf	??_tempCtrlProcess,w
  2052  00D6  0081               	movwf	1
  2053  00D7                     l296:	
  2054                           
  2055                           ;time_ctrl.c: 113: }
  2056                           ;time_ctrl.c: 115: if(--timeCnt[i] == 0)
  2057  00D7  3574               	lslf	tempCtrlProcess@i,w
  2058  00D8  3E20               	addlw	(low (tempCtrlProcess@timeCnt| 0))& (0+255)
  2059  00D9  0086               	movwf	6
  2060  00DA  0187               	clrf	7
  2061  00DB  3001               	movlw	1
  2062  00DC  0281               	subwf	1,f
  2063  00DD  3141               	addfsr 1,1
  2064  00DE  3000               	movlw	0
  2065  00DF  3B81               	subwfb	1,f
  2066  00E0  317F               	addfsr 1,-1
  2067  00E1  0016               	moviw fsr1++
  2068  00E2  0401               	iorwf	1,w
  2069  00E3  1D03               	btfss	3,2
  2070  00E4  291C               	goto	l1372
  2071                           
  2072                           ;time_ctrl.c: 116: {
  2073                           ;time_ctrl.c: 117: if(IQRSta[i]%2 == 0)
  2074  00E5  0874               	movf	tempCtrlProcess@i,w
  2075  00E6  3E30               	addlw	(low (_IQRSta| 0))& (0+255)
  2076  00E7  0086               	movwf	6
  2077  00E8  0187               	clrf	7
  2078  00E9  1801               	btfsc	1,0
  2079  00EA  28F8               	goto	l1364
  2080                           
  2081                           ;time_ctrl.c: 118: {
  2082                           ;time_ctrl.c: 119: LATC |= 1 << i;
  2083  00EB  3001               	movlw	1
  2084  00EC  00F2               	movwf	??_tempCtrlProcess
  2085  00ED  0A74               	incf	tempCtrlProcess@i,w
  2086  00EE  28F0               	goto	u1044
  2087  00EF                     u1045:	
  2088  00EF  35F2               	lslf	??_tempCtrlProcess,f
  2089  00F0                     u1044:	
  2090  00F0  0B89               	decfsz	9,f
  2091  00F1  28EF               	goto	u1045
  2092  00F2  0872               	movf	??_tempCtrlProcess,w
  2093  00F3  00F3               	movwf	??_tempCtrlProcess+1
  2094  00F4  0873               	movf	??_tempCtrlProcess+1,w
  2095  00F5  0022               	movlb	2	; select bank2
  2096  00F6  048E               	iorwf	14,f	;volatile
  2097                           
  2098                           ;time_ctrl.c: 120: }
  2099  00F7  290B               	goto	l1368
  2100  00F8                     l1364:	
  2101                           
  2102                           ;time_ctrl.c: 121: else if(IQRSta[i]%2 == 1)
  2103  00F8  0874               	movf	tempCtrlProcess@i,w
  2104  00F9  3E30               	addlw	(low (_IQRSta| 0))& (0+255)
  2105  00FA  0086               	movwf	6
  2106  00FB  0187               	clrf	7
  2107  00FC  1C01               	btfss	1,0
  2108  00FD  290B               	goto	l1368
  2109                           
  2110                           ;time_ctrl.c: 122: {
  2111                           ;time_ctrl.c: 123: LATC &= ~(1<<i);
  2112  00FE  3001               	movlw	1
  2113  00FF  00F2               	movwf	??_tempCtrlProcess
  2114  0100  0A74               	incf	tempCtrlProcess@i,w
  2115  0101  2903               	goto	u1064
  2116  0102                     u1065:	
  2117  0102  35F2               	lslf	??_tempCtrlProcess,f
  2118  0103                     u1064:	
  2119  0103  0B89               	decfsz	9,f
  2120  0104  2902               	goto	u1065
  2121  0105  0872               	movf	??_tempCtrlProcess,w
  2122  0106  3AFF               	xorlw	255
  2123  0107  00F3               	movwf	??_tempCtrlProcess+1
  2124  0108  0873               	movf	??_tempCtrlProcess+1,w
  2125  0109  0022               	movlb	2	; select bank2
  2126  010A  058E               	andwf	14,f	;volatile
  2127  010B                     l1368:	
  2128                           
  2129                           ;time_ctrl.c: 124: }
  2130                           ;time_ctrl.c: 126: if(++IQRSta[i] >= 4)
  2131  010B  3001               	movlw	1
  2132  010C  00F2               	movwf	??_tempCtrlProcess
  2133  010D  0874               	movf	tempCtrlProcess@i,w
  2134  010E  3E30               	addlw	(low (_IQRSta| 0))& (0+255)
  2135  010F  0086               	movwf	6
  2136  0110  0187               	clrf	7
  2137  0111  0872               	movf	??_tempCtrlProcess,w
  2138  0112  0781               	addwf	1,f
  2139  0113  3004               	movlw	4
  2140  0114  0201               	subwf	1,w
  2141  0115  1C03               	skipc
  2142  0116  291C               	goto	l1372
  2143                           
  2144                           ;time_ctrl.c: 127: {
  2145                           ;time_ctrl.c: 128: IQRSta[i] = 0;
  2146  0117  0874               	movf	tempCtrlProcess@i,w
  2147  0118  3E30               	addlw	(low (_IQRSta| 0))& (0+255)
  2148  0119  0086               	movwf	6
  2149  011A  0187               	clrf	7
  2150  011B  0181               	clrf	1
  2151  011C                     l1372:	
  2152  011C  3001               	movlw	1
  2153  011D  00F2               	movwf	??_tempCtrlProcess
  2154  011E  0872               	movf	??_tempCtrlProcess,w
  2155  011F  07F4               	addwf	tempCtrlProcess@i,f
  2156  0120  2855               	goto	L1
  2157  0121                     __end_of_tempCtrlProcess:	
  2158                           
  2159                           	psect	text3
  2160  037E                     __ptext3:	
  2161 ;; *************** function _SYSTEM_Initialize *****************
  2162 ;; Defined at:
  2163 ;;		line 50 in file "mcc_generated_files/mcc.c"
  2164 ;; Parameters:    Size  Location     Type
  2165 ;;		None
  2166 ;; Auto vars:     Size  Location     Type
  2167 ;;		None
  2168 ;; Return value:  Size  Location     Type
  2169 ;;                  1    wreg      void 
  2170 ;; Registers used:
  2171 ;;		wreg, status,2, status,0, pclath, cstack
  2172 ;; Tracked objects:
  2173 ;;		On entry : 0/0
  2174 ;;		On exit  : 0/0
  2175 ;;		Unchanged: 0/0
  2176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2177 ;;      Params:         0       0       0       0
  2178 ;;      Locals:         0       0       0       0
  2179 ;;      Temps:          0       0       0       0
  2180 ;;      Totals:         0       0       0       0
  2181 ;;Total ram usage:        0 bytes
  2182 ;; Hardware stack levels used:    1
  2183 ;; Hardware stack levels required when called:    6
  2184 ;; This function calls:
  2185 ;;		_EUSART_Initialize
  2186 ;;		_OSCILLATOR_Initialize
  2187 ;;		_PIN_MANAGER_Initialize
  2188 ;;		_TMR0_Initialize
  2189 ;;		_WDT_Initialize
  2190 ;; This function is called by:
  2191 ;;		_main
  2192 ;; This function uses a non-reentrant model
  2193 ;;
  2194                           
  2195                           
  2196                           ;psect for function _SYSTEM_Initialize
  2197  037E                     _SYSTEM_Initialize:	
  2198                           
  2199                           ;mcc.c: 52: PIN_MANAGER_Initialize();
  2200                           
  2201                           ;incstack = 0
  2202                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2203  037E  3183  2322  3183   	fcall	_PIN_MANAGER_Initialize
  2204                           
  2205                           ;mcc.c: 53: OSCILLATOR_Initialize();
  2206  0381  3183  23A5  3183   	fcall	_OSCILLATOR_Initialize
  2207                           
  2208                           ;mcc.c: 54: WDT_Initialize();
  2209  0384  3183  23D2  3183   	fcall	_WDT_Initialize
  2210                           
  2211                           ;mcc.c: 55: TMR0_Initialize();
  2212  0387  3183  2356  3183   	fcall	_TMR0_Initialize
  2213                           
  2214                           ;mcc.c: 56: EUSART_Initialize();
  2215  038A  3183  233D         	fcall	_EUSART_Initialize
  2216  038C  0008               	return
  2217  038D                     __end_of_SYSTEM_Initialize:	
  2218                           
  2219                           	psect	text4
  2220  03D2                     __ptext4:	
  2221 ;; *************** function _WDT_Initialize *****************
  2222 ;; Defined at:
  2223 ;;		line 69 in file "mcc_generated_files/mcc.c"
  2224 ;; Parameters:    Size  Location     Type
  2225 ;;		None
  2226 ;; Auto vars:     Size  Location     Type
  2227 ;;		None
  2228 ;; Return value:  Size  Location     Type
  2229 ;;                  1    wreg      void 
  2230 ;; Registers used:
  2231 ;;		wreg
  2232 ;; Tracked objects:
  2233 ;;		On entry : 0/0
  2234 ;;		On exit  : 0/0
  2235 ;;		Unchanged: 0/0
  2236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2237 ;;      Params:         0       0       0       0
  2238 ;;      Locals:         0       0       0       0
  2239 ;;      Temps:          0       0       0       0
  2240 ;;      Totals:         0       0       0       0
  2241 ;;Total ram usage:        0 bytes
  2242 ;; Hardware stack levels used:    1
  2243 ;; Hardware stack levels required when called:    4
  2244 ;; This function calls:
  2245 ;;		Nothing
  2246 ;; This function is called by:
  2247 ;;		_SYSTEM_Initialize
  2248 ;; This function uses a non-reentrant model
  2249 ;;
  2250                           
  2251                           
  2252                           ;psect for function _WDT_Initialize
  2253  03D2                     _WDT_Initialize:	
  2254                           
  2255                           ;mcc.c: 72: WDTCON = 0x16;
  2256                           
  2257                           ;incstack = 0
  2258                           ; Regs used in _WDT_Initialize: [wreg]
  2259  03D2  3016               	movlw	22
  2260  03D3  0021               	movlb	1	; select bank1
  2261  03D4  0097               	movwf	23	;volatile
  2262  03D5  0008               	return
  2263  03D6                     __end_of_WDT_Initialize:	
  2264                           
  2265                           	psect	text5
  2266  0356                     __ptext5:	
  2267 ;; *************** function _TMR0_Initialize *****************
  2268 ;; Defined at:
  2269 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  2270 ;; Parameters:    Size  Location     Type
  2271 ;;		None
  2272 ;; Auto vars:     Size  Location     Type
  2273 ;;		None
  2274 ;; Return value:  Size  Location     Type
  2275 ;;                  1    wreg      void 
  2276 ;; Registers used:
  2277 ;;		wreg, status,2, status,0, pclath, cstack
  2278 ;; Tracked objects:
  2279 ;;		On entry : 0/0
  2280 ;;		On exit  : 0/0
  2281 ;;		Unchanged: 0/0
  2282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2283 ;;      Params:         0       0       0       0
  2284 ;;      Locals:         0       0       0       0
  2285 ;;      Temps:          1       0       0       0
  2286 ;;      Totals:         1       0       0       0
  2287 ;;Total ram usage:        1 bytes
  2288 ;; Hardware stack levels used:    1
  2289 ;; Hardware stack levels required when called:    5
  2290 ;; This function calls:
  2291 ;;		_TMR0_SetInterruptHandler
  2292 ;; This function is called by:
  2293 ;;		_SYSTEM_Initialize
  2294 ;; This function uses a non-reentrant model
  2295 ;;
  2296                           
  2297                           
  2298                           ;psect for function _TMR0_Initialize
  2299  0356                     _TMR0_Initialize:	
  2300                           
  2301                           ;tmr0.c: 69: OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | 0xD4 & 0x3F);
  2302                           
  2303                           ;incstack = 0
  2304                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2305  0356  0021               	movlb	1	; select bank1
  2306  0357  0815               	movf	21,w	;volatile
  2307  0358  39C0               	andlw	192
  2308  0359  3814               	iorlw	20
  2309  035A  0095               	movwf	21	;volatile
  2310                           
  2311                           ;tmr0.c: 72: TMR0 = 0x83;
  2312  035B  3083               	movlw	131
  2313  035C  0020               	movlb	0	; select bank0
  2314  035D  0095               	movwf	21	;volatile
  2315                           
  2316                           ;tmr0.c: 75: timer0ReloadVal= 131;
  2317  035E  3083               	movlw	131
  2318  035F  00F4               	movwf	??_TMR0_Initialize
  2319  0360  0874               	movf	??_TMR0_Initialize,w
  2320  0361  00E1               	movwf	_timer0ReloadVal	;volatile
  2321                           
  2322                           ;tmr0.c: 78: INTCONbits.TMR0IF = 0;
  2323  0362  110B               	bcf	11,2	;volatile
  2324                           
  2325                           ;tmr0.c: 81: INTCONbits.TMR0IE = 1;
  2326  0363  168B               	bsf	11,5	;volatile
  2327                           
  2328                           ;tmr0.c: 84: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  2329  0364  30D6               	movlw	low _TMR0_DefaultInterruptHandler
  2330  0365  00F2               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  2331  0366  3003               	movlw	high _TMR0_DefaultInterruptHandler
  2332  0367  00F3               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  2333  0368  3183  23C6         	fcall	_TMR0_SetInterruptHandler
  2334  036A  0008               	return
  2335  036B                     __end_of_TMR0_Initialize:	
  2336                           
  2337                           	psect	text6
  2338  03C6                     __ptext6:	
  2339 ;; *************** function _TMR0_SetInterruptHandler *****************
  2340 ;; Defined at:
  2341 ;;		line 176 in file "mcc_generated_files/tmr0.c"
  2342 ;; Parameters:    Size  Location     Type
  2343 ;;  InterruptHan    2    2[COMMON] PTR FTN()void 
  2344 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  2345 ;; Auto vars:     Size  Location     Type
  2346 ;;		None
  2347 ;; Return value:  Size  Location     Type
  2348 ;;                  1    wreg      void 
  2349 ;; Registers used:
  2350 ;;		wreg
  2351 ;; Tracked objects:
  2352 ;;		On entry : 0/0
  2353 ;;		On exit  : 0/0
  2354 ;;		Unchanged: 0/0
  2355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2356 ;;      Params:         2       0       0       0
  2357 ;;      Locals:         0       0       0       0
  2358 ;;      Temps:          0       0       0       0
  2359 ;;      Totals:         2       0       0       0
  2360 ;;Total ram usage:        2 bytes
  2361 ;; Hardware stack levels used:    1
  2362 ;; Hardware stack levels required when called:    4
  2363 ;; This function calls:
  2364 ;;		Nothing
  2365 ;; This function is called by:
  2366 ;;		_TMR0_Initialize
  2367 ;; This function uses a non-reentrant model
  2368 ;;
  2369                           
  2370                           
  2371                           ;psect for function _TMR0_SetInterruptHandler
  2372  03C6                     _TMR0_SetInterruptHandler:	
  2373                           
  2374                           ;tmr0.c: 177: TMR0_InterruptHandler = InterruptHandler;
  2375                           
  2376                           ;incstack = 0
  2377                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  2378  03C6  0873               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  2379  03C7  0020               	movlb	0	; select bank0
  2380  03C8  00DE               	movwf	_TMR0_InterruptHandler+1
  2381  03C9  0872               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  2382  03CA  00DD               	movwf	_TMR0_InterruptHandler
  2383  03CB  0008               	return
  2384  03CC                     __end_of_TMR0_SetInterruptHandler:	
  2385                           
  2386                           	psect	text7
  2387  0322                     __ptext7:	
  2388 ;; *************** function _PIN_MANAGER_Initialize *****************
  2389 ;; Defined at:
  2390 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  2391 ;; Parameters:    Size  Location     Type
  2392 ;;		None
  2393 ;; Auto vars:     Size  Location     Type
  2394 ;;		None
  2395 ;; Return value:  Size  Location     Type
  2396 ;;                  1    wreg      void 
  2397 ;; Registers used:
  2398 ;;		wreg, status,2
  2399 ;; Tracked objects:
  2400 ;;		On entry : 0/0
  2401 ;;		On exit  : 0/0
  2402 ;;		Unchanged: 0/0
  2403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2404 ;;      Params:         0       0       0       0
  2405 ;;      Locals:         0       0       0       0
  2406 ;;      Temps:          0       0       0       0
  2407 ;;      Totals:         0       0       0       0
  2408 ;;Total ram usage:        0 bytes
  2409 ;; Hardware stack levels used:    1
  2410 ;; Hardware stack levels required when called:    4
  2411 ;; This function calls:
  2412 ;;		Nothing
  2413 ;; This function is called by:
  2414 ;;		_SYSTEM_Initialize
  2415 ;; This function uses a non-reentrant model
  2416 ;;
  2417                           
  2418                           
  2419                           ;psect for function _PIN_MANAGER_Initialize
  2420  0322                     _PIN_MANAGER_Initialize:	
  2421                           
  2422                           ;pin_manager.c: 62: LATA = 0x04;
  2423                           
  2424                           ;incstack = 0
  2425                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  2426  0322  3004               	movlw	4
  2427  0323  0022               	movlb	2	; select bank2
  2428  0324  008C               	movwf	12	;volatile
  2429                           
  2430                           ;pin_manager.c: 63: LATB = 0x00;
  2431  0325  018D               	clrf	13	;volatile
  2432                           
  2433                           ;pin_manager.c: 64: LATC = 0x00;
  2434  0326  018E               	clrf	14	;volatile
  2435                           
  2436                           ;pin_manager.c: 69: TRISA = 0x3B;
  2437  0327  303B               	movlw	59
  2438  0328  0021               	movlb	1	; select bank1
  2439  0329  008C               	movwf	12	;volatile
  2440                           
  2441                           ;pin_manager.c: 70: TRISB = 0xF0;
  2442  032A  30F0               	movlw	240
  2443  032B  008D               	movwf	13	;volatile
  2444                           
  2445                           ;pin_manager.c: 71: TRISC = 0x00;
  2446  032C  018E               	clrf	14	;volatile
  2447                           
  2448                           ;pin_manager.c: 76: ANSELC = 0x00;
  2449  032D  0023               	movlb	3	; select bank3
  2450  032E  018E               	clrf	14	;volatile
  2451                           
  2452                           ;pin_manager.c: 77: ANSELB = 0x00;
  2453  032F  018D               	clrf	13	;volatile
  2454                           
  2455                           ;pin_manager.c: 78: ANSELA = 0x12;
  2456  0330  3012               	movlw	18
  2457  0331  008C               	movwf	12	;volatile
  2458                           
  2459                           ;pin_manager.c: 83: WPUB = 0x00;
  2460  0332  0024               	movlb	4	; select bank4
  2461  0333  018D               	clrf	13	;volatile
  2462                           
  2463                           ;pin_manager.c: 84: WPUA = 0x01;
  2464  0334  3001               	movlw	1
  2465  0335  008C               	movwf	12	;volatile
  2466                           
  2467                           ;pin_manager.c: 85: WPUC = 0x00;
  2468  0336  018E               	clrf	14	;volatile
  2469                           
  2470                           ;pin_manager.c: 86: OPTION_REGbits.nWPUEN = 0;
  2471  0337  0021               	movlb	1	; select bank1
  2472  0338  1395               	bcf	21,7	;volatile
  2473                           
  2474                           ;pin_manager.c: 95: APFCON0 = 0x00;
  2475  0339  0022               	movlb	2	; select bank2
  2476  033A  019D               	clrf	29	;volatile
  2477                           
  2478                           ;pin_manager.c: 96: APFCON1 = 0x00;
  2479  033B  019E               	clrf	30	;volatile
  2480  033C  0008               	return
  2481  033D                     __end_of_PIN_MANAGER_Initialize:	
  2482                           
  2483                           	psect	text8
  2484  03A5                     __ptext8:	
  2485 ;; *************** function _OSCILLATOR_Initialize *****************
  2486 ;; Defined at:
  2487 ;;		line 59 in file "mcc_generated_files/mcc.c"
  2488 ;; Parameters:    Size  Location     Type
  2489 ;;		None
  2490 ;; Auto vars:     Size  Location     Type
  2491 ;;		None
  2492 ;; Return value:  Size  Location     Type
  2493 ;;                  1    wreg      void 
  2494 ;; Registers used:
  2495 ;;		wreg, status,2
  2496 ;; Tracked objects:
  2497 ;;		On entry : 0/0
  2498 ;;		On exit  : 0/0
  2499 ;;		Unchanged: 0/0
  2500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2501 ;;      Params:         0       0       0       0
  2502 ;;      Locals:         0       0       0       0
  2503 ;;      Temps:          0       0       0       0
  2504 ;;      Totals:         0       0       0       0
  2505 ;;Total ram usage:        0 bytes
  2506 ;; Hardware stack levels used:    1
  2507 ;; Hardware stack levels required when called:    4
  2508 ;; This function calls:
  2509 ;;		Nothing
  2510 ;; This function is called by:
  2511 ;;		_SYSTEM_Initialize
  2512 ;; This function uses a non-reentrant model
  2513 ;;
  2514                           
  2515                           
  2516                           ;psect for function _OSCILLATOR_Initialize
  2517  03A5                     _OSCILLATOR_Initialize:	
  2518                           
  2519                           ;mcc.c: 62: OSCCON = 0x7A;
  2520                           
  2521                           ;incstack = 0
  2522                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  2523  03A5  307A               	movlw	122
  2524  03A6  0021               	movlb	1	; select bank1
  2525  03A7  0099               	movwf	25	;volatile
  2526                           
  2527                           ;mcc.c: 64: OSCTUNE = 0x00;
  2528  03A8  0198               	clrf	24	;volatile
  2529                           
  2530                           ;mcc.c: 66: BORCON = 0x00;
  2531  03A9  0022               	movlb	2	; select bank2
  2532  03AA  0196               	clrf	22	;volatile
  2533  03AB  0008               	return
  2534  03AC                     __end_of_OSCILLATOR_Initialize:	
  2535                           
  2536                           	psect	text9
  2537  033D                     __ptext9:	
  2538 ;; *************** function _EUSART_Initialize *****************
  2539 ;; Defined at:
  2540 ;;		line 74 in file "mcc_generated_files/eusart.c"
  2541 ;; Parameters:    Size  Location     Type
  2542 ;;		None
  2543 ;; Auto vars:     Size  Location     Type
  2544 ;;		None
  2545 ;; Return value:  Size  Location     Type
  2546 ;;                  1    wreg      void 
  2547 ;; Registers used:
  2548 ;;		wreg, status,2, status,0, pclath, cstack
  2549 ;; Tracked objects:
  2550 ;;		On entry : 0/0
  2551 ;;		On exit  : 0/0
  2552 ;;		Unchanged: 0/0
  2553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2554 ;;      Params:         0       0       0       0
  2555 ;;      Locals:         0       0       0       0
  2556 ;;      Temps:          0       0       0       0
  2557 ;;      Totals:         0       0       0       0
  2558 ;;Total ram usage:        0 bytes
  2559 ;; Hardware stack levels used:    1
  2560 ;; Hardware stack levels required when called:    5
  2561 ;; This function calls:
  2562 ;;		_EUSART_SetRxInterruptHandler
  2563 ;; This function is called by:
  2564 ;;		_SYSTEM_Initialize
  2565 ;; This function uses a non-reentrant model
  2566 ;;
  2567                           
  2568                           
  2569                           ;psect for function _EUSART_Initialize
  2570  033D                     _EUSART_Initialize:	
  2571                           
  2572                           ;eusart.c: 77: PIE1bits.RCIE = 0;
  2573                           
  2574                           ;incstack = 0
  2575                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2576  033D  0021               	movlb	1	; select bank1
  2577  033E  1291               	bcf	17,5	;volatile
  2578                           
  2579                           ;eusart.c: 78: EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  2580  033F  306B               	movlw	low _EUSART_Receive_ISR
  2581  0340  00F2               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  2582  0341  3003               	movlw	high _EUSART_Receive_ISR
  2583  0342  00F3               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  2584  0343  3183  23CC         	fcall	_EUSART_SetRxInterruptHandler
  2585                           
  2586                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  2587  0345  0021               	movlb	1	; select bank1
  2588  0346  1211               	bcf	17,4	;volatile
  2589                           
  2590                           ;eusart.c: 84: BAUDCON = 0x08;
  2591  0347  3008               	movlw	8
  2592  0348  0023               	movlb	3	; select bank3
  2593  0349  009F               	movwf	31	;volatile
  2594                           
  2595                           ;eusart.c: 87: RCSTA = 0x90;
  2596  034A  3090               	movlw	144
  2597  034B  009D               	movwf	29	;volatile
  2598                           
  2599                           ;eusart.c: 90: TXSTA = 0x24;
  2600  034C  3024               	movlw	36
  2601  034D  009E               	movwf	30	;volatile
  2602                           
  2603                           ;eusart.c: 93: SPBRGL = 0xA0;
  2604  034E  30A0               	movlw	160
  2605  034F  009B               	movwf	27	;volatile
  2606                           
  2607                           ;eusart.c: 96: SPBRGH = 0x01;
  2608  0350  3001               	movlw	1
  2609  0351  009C               	movwf	28	;volatile
  2610                           
  2611                           ;eusart.c: 106: eusartRxCount = 0;
  2612  0352  01F8               	clrf	_eusartRxCount
  2613                           
  2614                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  2615  0353  0021               	movlb	1	; select bank1
  2616  0354  1691               	bsf	17,5	;volatile
  2617  0355  0008               	return
  2618  0356                     __end_of_EUSART_Initialize:	
  2619                           
  2620                           	psect	text10
  2621  03CC                     __ptext10:	
  2622 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  2623 ;; Defined at:
  2624 ;;		line 223 in file "mcc_generated_files/eusart.c"
  2625 ;; Parameters:    Size  Location     Type
  2626 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  2627 ;;		 -> EUSART_Receive_ISR(1), 
  2628 ;; Auto vars:     Size  Location     Type
  2629 ;;		None
  2630 ;; Return value:  Size  Location     Type
  2631 ;;                  1    wreg      void 
  2632 ;; Registers used:
  2633 ;;		wreg
  2634 ;; Tracked objects:
  2635 ;;		On entry : 0/0
  2636 ;;		On exit  : 0/0
  2637 ;;		Unchanged: 0/0
  2638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2639 ;;      Params:         2       0       0       0
  2640 ;;      Locals:         0       0       0       0
  2641 ;;      Temps:          0       0       0       0
  2642 ;;      Totals:         2       0       0       0
  2643 ;;Total ram usage:        2 bytes
  2644 ;; Hardware stack levels used:    1
  2645 ;; Hardware stack levels required when called:    4
  2646 ;; This function calls:
  2647 ;;		Nothing
  2648 ;; This function is called by:
  2649 ;;		_EUSART_Initialize
  2650 ;; This function uses a non-reentrant model
  2651 ;;
  2652                           
  2653                           
  2654                           ;psect for function _EUSART_SetRxInterruptHandler
  2655  03CC                     _EUSART_SetRxInterruptHandler:	
  2656                           
  2657                           ;eusart.c: 224: EUSART_RxDefaultInterruptHandler = interruptHandler;
  2658                           
  2659                           ;incstack = 0
  2660                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  2661  03CC  0873               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  2662  03CD  0020               	movlb	0	; select bank0
  2663  03CE  00E0               	movwf	_EUSART_RxDefaultInterruptHandler+1
  2664  03CF  0872               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  2665  03D0  00DF               	movwf	_EUSART_RxDefaultInterruptHandler
  2666  03D1  0008               	return
  2667  03D2                     __end_of_EUSART_SetRxInterruptHandler:	
  2668                           
  2669                           	psect	text11
  2670  02A2                     __ptext11:	
  2671 ;; *************** function _EUSART_Deal *****************
  2672 ;; Defined at:
  2673 ;;		line 228 in file "mcc_generated_files/eusart.c"
  2674 ;; Parameters:    Size  Location     Type
  2675 ;;		None
  2676 ;; Auto vars:     Size  Location     Type
  2677 ;;		None
  2678 ;; Return value:  Size  Location     Type
  2679 ;;                  1    wreg      void 
  2680 ;; Registers used:
  2681 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2682 ;; Tracked objects:
  2683 ;;		On entry : 0/0
  2684 ;;		On exit  : 0/0
  2685 ;;		Unchanged: 0/0
  2686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2687 ;;      Params:         0       0       0       0
  2688 ;;      Locals:         0       0       0       0
  2689 ;;      Temps:          2       0       0       0
  2690 ;;      Totals:         2       0       0       0
  2691 ;;Total ram usage:        2 bytes
  2692 ;; Hardware stack levels used:    1
  2693 ;; Hardware stack levels required when called:    6
  2694 ;; This function calls:
  2695 ;;		_Get_Device_Addr
  2696 ;;		_startTimeCtrl
  2697 ;;		_stopTimeCtrl
  2698 ;;		_testTimeCtrl
  2699 ;; This function is called by:
  2700 ;;		_main
  2701 ;; This function uses a non-reentrant model
  2702 ;;
  2703                           
  2704                           
  2705                           ;psect for function _EUSART_Deal
  2706  02A2                     _EUSART_Deal:	
  2707                           
  2708                           ;eusart.c: 231: if(eusartRxBuffer[0] == 0xA5 && eusartRxBuffer[1] == 0x5A)
  2709                           
  2710                           ;incstack = 0
  2711                           ; Regs used in _EUSART_Deal: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2712  02A2  30A5               	movlw	165
  2713  02A3  0022               	movlb	2	; select bank2
  2714  02A4  0620               	xorwf	_eusartRxBuffer^(0+256),w
  2715  02A5  1D03               	btfss	3,2
  2716  02A6  0008               	return
  2717  02A7  305A               	movlw	90
  2718  02A8  0621               	xorwf	(_eusartRxBuffer^(0+256)+1),w
  2719  02A9  1D03               	btfss	3,2
  2720  02AA  0008               	return
  2721                           
  2722                           ;eusart.c: 232: {
  2723                           ;eusart.c: 234: if(eusartRxBuffer[2] == EusartRxLenth-5)
  2724  02AB  0020               	movlb	0	; select bank0
  2725  02AC  0842               	movf	_EusartRxLenth,w
  2726  02AD  3EFB               	addlw	251
  2727  02AE  00F5               	movwf	??_EUSART_Deal
  2728  02AF  30FF               	movlw	255
  2729  02B0  1803               	skipnc
  2730  02B1  3000               	movlw	0
  2731  02B2  00F6               	movwf	??_EUSART_Deal+1
  2732  02B3  0022               	movlb	2	; select bank2
  2733  02B4  0822               	movf	(_eusartRxBuffer^(0+256)+2),w
  2734  02B5  0675               	xorwf	??_EUSART_Deal,w
  2735  02B6  0476               	iorwf	??_EUSART_Deal+1,w
  2736  02B7  1D03               	skipz
  2737  02B8  0008               	return
  2738                           
  2739                           ;eusart.c: 235: {
  2740                           ;eusart.c: 236: if(eusartRxBuffer[4] == Get_Device_Addr())
  2741  02B9  3183  238D  3182   	fcall	_Get_Device_Addr
  2742  02BC  0022               	movlb	2	; select bank2
  2743  02BD  0624               	xorwf	(_eusartRxBuffer^(0+256)+4),w
  2744  02BE  1D03               	skipz
  2745  02BF  0008               	return
  2746                           
  2747                           ;eusart.c: 237: {
  2748                           ;eusart.c: 238: if(eusartRxBuffer[3] == 0x1C)
  2749  02C0  301C               	movlw	28
  2750  02C1  0623               	xorwf	(_eusartRxBuffer^(0+256)+3),w
  2751  02C2  1D03               	btfss	3,2
  2752  02C3  2AC7               	goto	l1310
  2753                           
  2754                           ;eusart.c: 239: {
  2755                           ;eusart.c: 240: stopTimeCtrl();
  2756  02C4  3182  22DD         	fcall	_stopTimeCtrl
  2757                           
  2758                           ;eusart.c: 241: }
  2759  02C6  0008               	return
  2760  02C7                     l1310:	
  2761                           
  2762                           ;eusart.c: 242: else if(eusartRxBuffer[3] == 0x1D)
  2763  02C7  301D               	movlw	29
  2764  02C8  0022               	movlb	2	; select bank2
  2765  02C9  0623               	xorwf	(_eusartRxBuffer^(0+256)+3),w
  2766  02CA  1D03               	btfss	3,2
  2767  02CB  2ACF               	goto	l1314
  2768                           
  2769                           ;eusart.c: 243: {
  2770                           ;eusart.c: 244: startTimeCtrl();
  2771  02CC  3183  23AC         	fcall	_startTimeCtrl
  2772                           
  2773                           ;eusart.c: 245: }
  2774  02CE  0008               	return
  2775  02CF                     l1314:	
  2776                           
  2777                           ;eusart.c: 246: else if(eusartRxBuffer[3] >= 0x21 && eusartRxBuffer[3] <= 0x28)
  2778  02CF  3021               	movlw	33
  2779  02D0  0022               	movlb	2	; select bank2
  2780  02D1  0223               	subwf	(_eusartRxBuffer^(0+256)+3),w
  2781  02D2  1C03               	skipc
  2782  02D3  0008               	return
  2783  02D4  3029               	movlw	41
  2784  02D5  0223               	subwf	(_eusartRxBuffer^(0+256)+3),w
  2785  02D6  1803               	skipnc
  2786  02D7  0008               	return
  2787                           
  2788                           ;eusart.c: 247: {
  2789                           ;eusart.c: 248: testTimeCtrl(eusartRxBuffer[3] - 0x20);
  2790  02D8  0823               	movf	(_eusartRxBuffer^(0+256)+3),w
  2791  02D9  3EE0               	addlw	224
  2792  02DA  3181  2121         	fcall	_testTimeCtrl
  2793  02DC  0008               	return
  2794  02DD                     __end_of_EUSART_Deal:	
  2795                           
  2796                           	psect	text12
  2797  0121                     __ptext12:	
  2798 ;; *************** function _testTimeCtrl *****************
  2799 ;; Defined at:
  2800 ;;		line 49 in file "mcc_generated_files/time_ctrl.c"
  2801 ;; Parameters:    Size  Location     Type
  2802 ;;  IQRNum          1    wreg     unsigned char 
  2803 ;; Auto vars:     Size  Location     Type
  2804 ;;  IQRNum          1    2[COMMON] unsigned char 
  2805 ;;  i               1    3[COMMON] unsigned char 
  2806 ;; Return value:  Size  Location     Type
  2807 ;;                  1    wreg      void 
  2808 ;; Registers used:
  2809 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2810 ;; Tracked objects:
  2811 ;;		On entry : 0/0
  2812 ;;		On exit  : 0/0
  2813 ;;		Unchanged: 0/0
  2814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2815 ;;      Params:         0       0       0       0
  2816 ;;      Locals:         2       0       0       0
  2817 ;;      Temps:          0      15       0       0
  2818 ;;      Totals:         2      15       0       0
  2819 ;;Total ram usage:       17 bytes
  2820 ;; Hardware stack levels used:    1
  2821 ;; Hardware stack levels required when called:    4
  2822 ;; This function calls:
  2823 ;;		Nothing
  2824 ;; This function is called by:
  2825 ;;		_EUSART_Deal
  2826 ;; This function uses a non-reentrant model
  2827 ;;
  2828                           
  2829                           
  2830                           ;psect for function _testTimeCtrl
  2831  0121                     _testTimeCtrl:	
  2832                           
  2833                           ;incstack = 0
  2834                           ; Regs used in _testTimeCtrl: [wreg+fsr1l+fsr1h+status,2+status,0]
  2835                           ;testTimeCtrl@IQRNum stored from wreg
  2836  0121  00F2               	movwf	testTimeCtrl@IQRNum
  2837                           
  2838                           ;time_ctrl.c: 51: uint8_t i;
  2839                           ;time_ctrl.c: 53: testIQRNum = IQRNum;
  2840  0122  0872               	movf	testTimeCtrl@IQRNum,w
  2841  0123  0020               	movlb	0	; select bank0
  2842  0124  00C5               	movwf	??_testTimeCtrl
  2843  0125  0845               	movf	??_testTimeCtrl,w
  2844  0126  00BC               	movwf	_testIQRNum
  2845                           
  2846                           ;time_ctrl.c: 55: for(i=0; i<4; i++)
  2847  0127  01F3               	clrf	testTimeCtrl@i
  2848  0128  3004               	movlw	4
  2849  0129  0273               	subwf	testTimeCtrl@i,w
  2850  012A  1803               	btfsc	3,0
  2851  012B  2991               	goto	l273
  2852  012C                     l1276:	
  2853                           
  2854                           ;time_ctrl.c: 56: {
  2855                           ;time_ctrl.c: 57: timeCtrlValue[IQRNum - 1][i] = eusartRxBuffer[i * 2 + 5];
  2856  012C  3573               	lslf	testTimeCtrl@i,w
  2857  012D  3E05               	addlw	5
  2858  012E  3E20               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  2859  012F  0086               	movwf	6
  2860  0130  3001               	movlw	1	; select bank2/3
  2861  0131  0087               	movwf	7
  2862  0132  0801               	movf	1,w
  2863  0133  00C5               	movwf	??_testTimeCtrl
  2864  0134  01C6               	clrf	??_testTimeCtrl+1
  2865  0135  0872               	movf	testTimeCtrl@IQRNum,w
  2866  0136  00C7               	movwf	??_testTimeCtrl+2
  2867  0137  3003               	movlw	3
  2868  0138                     u755:	
  2869  0138  35C7               	lslf	??_testTimeCtrl+2,f
  2870  0139  0B89               	decfsz	9,f
  2871  013A  2938               	goto	u755
  2872  013B  30F8               	movlw	248
  2873  013C  0747               	addwf	??_testTimeCtrl+2,w
  2874  013D  00C8               	movwf	??_testTimeCtrl+3
  2875  013E  30A0               	movlw	(low (_timeCtrlValue| 0))& (0+255)
  2876  013F  0748               	addwf	??_testTimeCtrl+3,w
  2877  0140  00C9               	movwf	??_testTimeCtrl+4
  2878  0141  3573               	lslf	testTimeCtrl@i,w
  2879  0142  0749               	addwf	??_testTimeCtrl+4,w
  2880  0143  00CA               	movwf	??_testTimeCtrl+5
  2881  0144  084A               	movf	??_testTimeCtrl+5,w
  2882  0145  0086               	movwf	6
  2883  0146  0187               	clrf	7
  2884  0147  0845               	movf	??_testTimeCtrl,w
  2885  0148  3FC0               	movwi [0]fsr1
  2886  0149  0846               	movf	??_testTimeCtrl+1,w
  2887  014A  3FC1               	movwi [1]fsr1
  2888                           
  2889                           ;time_ctrl.c: 58: timeCtrlValue[IQRNum - 1][i] = (timeCtrlValue[IQRNum - 1][i] << 8) | e
      +                          usartRxBuffer[i * 2 + 6];
  2890  014B  3573               	lslf	testTimeCtrl@i,w
  2891  014C  3E06               	addlw	6
  2892  014D  3E20               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  2893  014E  0086               	movwf	6
  2894  014F  3001               	movlw	1	; select bank2/3
  2895  0150  0087               	movwf	7
  2896  0151  0801               	movf	1,w
  2897  0152  00C5               	movwf	??_testTimeCtrl
  2898  0153  01C6               	clrf	??_testTimeCtrl+1
  2899  0154  0872               	movf	testTimeCtrl@IQRNum,w
  2900  0155  00C7               	movwf	??_testTimeCtrl+2
  2901  0156  3003               	movlw	3
  2902  0157                     u765:	
  2903  0157  35C7               	lslf	??_testTimeCtrl+2,f
  2904  0158  0B89               	decfsz	9,f
  2905  0159  2957               	goto	u765
  2906  015A  30F8               	movlw	248
  2907  015B  0747               	addwf	??_testTimeCtrl+2,w
  2908  015C  00C8               	movwf	??_testTimeCtrl+3
  2909  015D  30A0               	movlw	(low (_timeCtrlValue| 0))& (0+255)
  2910  015E  0748               	addwf	??_testTimeCtrl+3,w
  2911  015F  00C9               	movwf	??_testTimeCtrl+4
  2912  0160  3573               	lslf	testTimeCtrl@i,w
  2913  0161  0749               	addwf	??_testTimeCtrl+4,w
  2914  0162  00CA               	movwf	??_testTimeCtrl+5
  2915  0163  084A               	movf	??_testTimeCtrl+5,w
  2916  0164  0086               	movwf	6
  2917  0165  0187               	clrf	7
  2918  0166  3F40               	moviw [0]fsr1
  2919  0167  00CB               	movwf	??_testTimeCtrl+6
  2920  0168  3F41               	moviw [1]fsr1
  2921  0169  00CC               	movwf	??_testTimeCtrl+7
  2922  016A  084B               	movf	??_testTimeCtrl+6,w
  2923  016B  00CC               	movwf	??_testTimeCtrl+7
  2924  016C  01CB               	clrf	??_testTimeCtrl+6
  2925  016D  0845               	movf	??_testTimeCtrl,w
  2926  016E  044B               	iorwf	??_testTimeCtrl+6,w
  2927  016F  00CE               	movwf	??_testTimeCtrl+9
  2928  0170  0846               	movf	??_testTimeCtrl+1,w
  2929  0171  044C               	iorwf	??_testTimeCtrl+7,w
  2930  0172  00CF               	movwf	??_testTimeCtrl+10
  2931  0173  0872               	movf	testTimeCtrl@IQRNum,w
  2932  0174  00D0               	movwf	??_testTimeCtrl+11
  2933  0175  3003               	movlw	3
  2934  0176                     u775:	
  2935  0176  35D0               	lslf	??_testTimeCtrl+11,f
  2936  0177  0B89               	decfsz	9,f
  2937  0178  2976               	goto	u775
  2938  0179  30F8               	movlw	248
  2939  017A  0750               	addwf	??_testTimeCtrl+11,w
  2940  017B  00D1               	movwf	??_testTimeCtrl+12
  2941  017C  30A0               	movlw	(low (_timeCtrlValue| 0))& (0+255)
  2942  017D  0751               	addwf	??_testTimeCtrl+12,w
  2943  017E  00D2               	movwf	??_testTimeCtrl+13
  2944  017F  3573               	lslf	testTimeCtrl@i,w
  2945  0180  0752               	addwf	??_testTimeCtrl+13,w
  2946  0181  00D3               	movwf	??_testTimeCtrl+14
  2947  0182  0853               	movf	??_testTimeCtrl+14,w
  2948  0183  0086               	movwf	6
  2949  0184  0187               	clrf	7
  2950  0185  084E               	movf	??_testTimeCtrl+9,w
  2951  0186  3FC0               	movwi [0]fsr1
  2952  0187  084F               	movf	??_testTimeCtrl+10,w
  2953  0188  3FC1               	movwi [1]fsr1
  2954  0189  3001               	movlw	1
  2955  018A  00C5               	movwf	??_testTimeCtrl
  2956  018B  0845               	movf	??_testTimeCtrl,w
  2957  018C  07F3               	addwf	testTimeCtrl@i,f
  2958  018D  3004               	movlw	4
  2959  018E  0273               	subwf	testTimeCtrl@i,w
  2960  018F  1C03               	skipc
  2961  0190  292C               	goto	l1276
  2962  0191                     l273:	
  2963                           
  2964                           ;time_ctrl.c: 59: }
  2965                           ;time_ctrl.c: 60: testTimeCtrlFlag = 1;
  2966  0191  01C4               	clrf	_testTimeCtrlFlag
  2967  0192  0AC4               	incf	_testTimeCtrlFlag,f
  2968  0193  0008               	return
  2969  0194                     __end_of_testTimeCtrl:	
  2970                           
  2971                           	psect	text13
  2972  02DD                     __ptext13:	
  2973 ;; *************** function _stopTimeCtrl *****************
  2974 ;; Defined at:
  2975 ;;		line 35 in file "mcc_generated_files/time_ctrl.c"
  2976 ;; Parameters:    Size  Location     Type
  2977 ;;		None
  2978 ;; Auto vars:     Size  Location     Type
  2979 ;;  i               1    4[COMMON] unsigned char 
  2980 ;; Return value:  Size  Location     Type
  2981 ;;                  1    wreg      void 
  2982 ;; Registers used:
  2983 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2984 ;; Tracked objects:
  2985 ;;		On entry : 0/0
  2986 ;;		On exit  : 0/0
  2987 ;;		Unchanged: 0/0
  2988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2989 ;;      Params:         0       0       0       0
  2990 ;;      Locals:         1       0       0       0
  2991 ;;      Temps:          2       0       0       0
  2992 ;;      Totals:         3       0       0       0
  2993 ;;Total ram usage:        3 bytes
  2994 ;; Hardware stack levels used:    1
  2995 ;; Hardware stack levels required when called:    4
  2996 ;; This function calls:
  2997 ;;		Nothing
  2998 ;; This function is called by:
  2999 ;;		_EUSART_Deal
  3000 ;; This function uses a non-reentrant model
  3001 ;;
  3002                           
  3003                           
  3004                           ;psect for function _stopTimeCtrl
  3005  02DD                     _stopTimeCtrl:	
  3006                           
  3007                           ;time_ctrl.c: 37: uint8_t i;
  3008                           ;time_ctrl.c: 38: timeCtrlStartFlag = 0;
  3009                           
  3010                           ;incstack = 0
  3011                           ; Regs used in _stopTimeCtrl: [wreg+fsr1l+fsr1h+status,2+status,0]
  3012  02DD  01FA               	clrf	_timeCtrlStartFlag
  3013                           
  3014                           ;time_ctrl.c: 39: do { LATAbits.LATA2 = 1; } while(0);
  3015  02DE  0022               	movlb	2	; select bank2
  3016  02DF  150C               	bsf	12,2	;volatile
  3017                           
  3018                           ;time_ctrl.c: 41: for(i=0; i<8; i++)
  3019  02E0  01F4               	clrf	stopTimeCtrl@i
  3020  02E1                     L2:	
  3021  02E1  3008               	movlw	8
  3022  02E2  0274               	subwf	stopTimeCtrl@i,w
  3023  02E3  1803               	btfsc	3,0
  3024  02E4  0008               	return
  3025                           
  3026                           ;time_ctrl.c: 42: {
  3027                           ;time_ctrl.c: 43: IQRSta[i] = 0;
  3028  02E5  0874               	movf	stopTimeCtrl@i,w
  3029  02E6  3E30               	addlw	(low (_IQRSta| 0))& (0+255)
  3030  02E7  0086               	movwf	6
  3031  02E8  0187               	clrf	7
  3032  02E9  0181               	clrf	1
  3033                           
  3034                           ;time_ctrl.c: 44: IQRPreSta[i] = 3;
  3035  02EA  3003               	movlw	3
  3036  02EB  00F2               	movwf	??_stopTimeCtrl
  3037  02EC  0874               	movf	stopTimeCtrl@i,w
  3038  02ED  3E54               	addlw	(low (_IQRPreSta| 0))& (0+255)
  3039  02EE  0086               	movwf	6
  3040  02EF  0187               	clrf	7
  3041  02F0  0872               	movf	??_stopTimeCtrl,w
  3042  02F1  0081               	movwf	1
  3043                           
  3044                           ;time_ctrl.c: 45: LATC &= ~(1<<i);
  3045  02F2  3001               	movlw	1
  3046  02F3  00F2               	movwf	??_stopTimeCtrl
  3047  02F4  0A74               	incf	stopTimeCtrl@i,w
  3048  02F5  2AF7               	goto	u724
  3049  02F6                     u725:	
  3050  02F6  35F2               	lslf	??_stopTimeCtrl,f
  3051  02F7                     u724:	
  3052  02F7  0B89               	decfsz	9,f
  3053  02F8  2AF6               	goto	u725
  3054  02F9  0872               	movf	??_stopTimeCtrl,w
  3055  02FA  3AFF               	xorlw	255
  3056  02FB  00F3               	movwf	??_stopTimeCtrl+1
  3057  02FC  0873               	movf	??_stopTimeCtrl+1,w
  3058  02FD  058E               	andwf	14,f	;volatile
  3059  02FE  3001               	movlw	1
  3060  02FF  00F2               	movwf	??_stopTimeCtrl
  3061  0300  0872               	movf	??_stopTimeCtrl,w
  3062  0301  07F4               	addwf	stopTimeCtrl@i,f
  3063  0302  2AE1               	goto	L2
  3064  0303                     __end_of_stopTimeCtrl:	
  3065                           
  3066                           	psect	text14
  3067  03AC                     __ptext14:	
  3068 ;; *************** function _startTimeCtrl *****************
  3069 ;; Defined at:
  3070 ;;		line 28 in file "mcc_generated_files/time_ctrl.c"
  3071 ;; Parameters:    Size  Location     Type
  3072 ;;		None
  3073 ;; Auto vars:     Size  Location     Type
  3074 ;;		None
  3075 ;; Return value:  Size  Location     Type
  3076 ;;                  1    wreg      void 
  3077 ;; Registers used:
  3078 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3079 ;; Tracked objects:
  3080 ;;		On entry : 0/0
  3081 ;;		On exit  : 0/0
  3082 ;;		Unchanged: 0/0
  3083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3084 ;;      Params:         0       0       0       0
  3085 ;;      Locals:         0       0       0       0
  3086 ;;      Temps:          0       0       0       0
  3087 ;;      Totals:         0       0       0       0
  3088 ;;Total ram usage:        0 bytes
  3089 ;; Hardware stack levels used:    1
  3090 ;; Hardware stack levels required when called:    5
  3091 ;; This function calls:
  3092 ;;		_getTimeData
  3093 ;; This function is called by:
  3094 ;;		_EUSART_Deal
  3095 ;; This function uses a non-reentrant model
  3096 ;;
  3097                           
  3098                           
  3099                           ;psect for function _startTimeCtrl
  3100  03AC                     _startTimeCtrl:	
  3101                           
  3102                           ;time_ctrl.c: 30: getTimeData();
  3103                           
  3104                           ;incstack = 0
  3105                           ; Regs used in _startTimeCtrl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3106  03AC  3181  2194         	fcall	_getTimeData
  3107                           
  3108                           ;time_ctrl.c: 31: do { LATAbits.LATA2 = 0; } while(0);
  3109  03AE  0022               	movlb	2	; select bank2
  3110  03AF  110C               	bcf	12,2	;volatile
  3111                           
  3112                           ;time_ctrl.c: 32: timeCtrlStartFlag = 1;
  3113  03B0  01FA               	clrf	_timeCtrlStartFlag
  3114  03B1  0AFA               	incf	_timeCtrlStartFlag,f
  3115  03B2  0008               	return
  3116  03B3                     __end_of_startTimeCtrl:	
  3117                           
  3118                           	psect	text15
  3119  0194                     __ptext15:	
  3120 ;; *************** function _getTimeData *****************
  3121 ;; Defined at:
  3122 ;;		line 12 in file "mcc_generated_files/time_ctrl.c"
  3123 ;; Parameters:    Size  Location     Type
  3124 ;;		None
  3125 ;; Auto vars:     Size  Location     Type
  3126 ;;  j               1    4[COMMON] unsigned char 
  3127 ;;  i               1    3[COMMON] unsigned char 
  3128 ;;  cnt             1    2[COMMON] unsigned char 
  3129 ;; Return value:  Size  Location     Type
  3130 ;;                  1    wreg      void 
  3131 ;; Registers used:
  3132 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3133 ;; Tracked objects:
  3134 ;;		On entry : 0/0
  3135 ;;		On exit  : 0/0
  3136 ;;		Unchanged: 0/0
  3137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3138 ;;      Params:         0       0       0       0
  3139 ;;      Locals:         3       0       0       0
  3140 ;;      Temps:          0      13       0       0
  3141 ;;      Totals:         3      13       0       0
  3142 ;;Total ram usage:       16 bytes
  3143 ;; Hardware stack levels used:    1
  3144 ;; Hardware stack levels required when called:    4
  3145 ;; This function calls:
  3146 ;;		Nothing
  3147 ;; This function is called by:
  3148 ;;		_startTimeCtrl
  3149 ;; This function uses a non-reentrant model
  3150 ;;
  3151                           
  3152                           
  3153                           ;psect for function _getTimeData
  3154  0194                     _getTimeData:	
  3155                           
  3156                           ;time_ctrl.c: 14: uint8_t i, j;
  3157                           ;time_ctrl.c: 15: uint8_t cnt = 0;
  3158                           
  3159                           ;incstack = 0
  3160                           ; Regs used in _getTimeData: [wreg+fsr1l+fsr1h+status,2+status,0]
  3161  0194  01F2               	clrf	getTimeData@cnt
  3162                           
  3163                           ;time_ctrl.c: 16: for(i=0; i<8; i++)
  3164  0195  01F3               	clrf	getTimeData@i
  3165  0196                     L3:	
  3166  0196  3008               	movlw	8
  3167  0197  0273               	subwf	getTimeData@i,w
  3168  0198  1803               	btfsc	3,0
  3169  0199  0008               	return
  3170                           
  3171                           ;time_ctrl.c: 17: {
  3172                           ;time_ctrl.c: 18: for(j=0; j<4; j++)
  3173  019A  01F4               	clrf	getTimeData@j
  3174  019B  3004               	movlw	4
  3175  019C  0274               	subwf	getTimeData@j,w
  3176  019D  1803               	btfsc	3,0
  3177  019E  2A00               	goto	l1130
  3178  019F                     l1122:	
  3179                           
  3180                           ;time_ctrl.c: 19: {
  3181                           ;time_ctrl.c: 20: timeCtrlValue[i][j] = eusartRxBuffer[cnt+5];
  3182  019F  0872               	movf	getTimeData@cnt,w
  3183  01A0  3E05               	addlw	5
  3184  01A1  3E20               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  3185  01A2  0086               	movwf	6
  3186  01A3  3001               	movlw	1	; select bank2/3
  3187  01A4  0087               	movwf	7
  3188  01A5  0801               	movf	1,w
  3189  01A6  0020               	movlb	0	; select bank0
  3190  01A7  00C5               	movwf	??_getTimeData
  3191  01A8  01C6               	clrf	??_getTimeData+1
  3192  01A9  0873               	movf	getTimeData@i,w
  3193  01AA  00C7               	movwf	??_getTimeData+2
  3194  01AB  3003               	movlw	3
  3195  01AC                     u585:	
  3196  01AC  35C7               	lslf	??_getTimeData+2,f
  3197  01AD  0B89               	decfsz	9,f
  3198  01AE  29AC               	goto	u585
  3199  01AF  30A0               	movlw	(low (_timeCtrlValue| 0))& (0+255)
  3200  01B0  0747               	addwf	??_getTimeData+2,w
  3201  01B1  00C8               	movwf	??_getTimeData+3
  3202  01B2  3574               	lslf	getTimeData@j,w
  3203  01B3  0748               	addwf	??_getTimeData+3,w
  3204  01B4  00C9               	movwf	??_getTimeData+4
  3205  01B5  0849               	movf	??_getTimeData+4,w
  3206  01B6  0086               	movwf	6
  3207  01B7  0187               	clrf	7
  3208  01B8  0845               	movf	??_getTimeData,w
  3209  01B9  3FC0               	movwi [0]fsr1
  3210  01BA  0846               	movf	??_getTimeData+1,w
  3211  01BB  3FC1               	movwi [1]fsr1
  3212                           
  3213                           ;time_ctrl.c: 21: timeCtrlValue[i][j] = (timeCtrlValue[i][j] << 8)
  3214                           ;time_ctrl.c: 22: | eusartRxBuffer[cnt+6];
  3215  01BC  0872               	movf	getTimeData@cnt,w
  3216  01BD  3E06               	addlw	6
  3217  01BE  3E20               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  3218  01BF  0086               	movwf	6
  3219  01C0  3001               	movlw	1	; select bank2/3
  3220  01C1  0087               	movwf	7
  3221  01C2  0801               	movf	1,w
  3222  01C3  00C5               	movwf	??_getTimeData
  3223  01C4  01C6               	clrf	??_getTimeData+1
  3224  01C5  0873               	movf	getTimeData@i,w
  3225  01C6  00C7               	movwf	??_getTimeData+2
  3226  01C7  3003               	movlw	3
  3227  01C8                     u595:	
  3228  01C8  35C7               	lslf	??_getTimeData+2,f
  3229  01C9  0B89               	decfsz	9,f
  3230  01CA  29C8               	goto	u595
  3231  01CB  30A0               	movlw	(low (_timeCtrlValue| 0))& (0+255)
  3232  01CC  0747               	addwf	??_getTimeData+2,w
  3233  01CD  00C8               	movwf	??_getTimeData+3
  3234  01CE  3574               	lslf	getTimeData@j,w
  3235  01CF  0748               	addwf	??_getTimeData+3,w
  3236  01D0  00C9               	movwf	??_getTimeData+4
  3237  01D1  0849               	movf	??_getTimeData+4,w
  3238  01D2  0086               	movwf	6
  3239  01D3  0187               	clrf	7
  3240  01D4  3F40               	moviw [0]fsr1
  3241  01D5  00CA               	movwf	??_getTimeData+5
  3242  01D6  3F41               	moviw [1]fsr1
  3243  01D7  00CB               	movwf	??_getTimeData+6
  3244  01D8  084A               	movf	??_getTimeData+5,w
  3245  01D9  00CB               	movwf	??_getTimeData+6
  3246  01DA  01CA               	clrf	??_getTimeData+5
  3247  01DB  0845               	movf	??_getTimeData,w
  3248  01DC  044A               	iorwf	??_getTimeData+5,w
  3249  01DD  00CD               	movwf	??_getTimeData+8
  3250  01DE  0846               	movf	??_getTimeData+1,w
  3251  01DF  044B               	iorwf	??_getTimeData+6,w
  3252  01E0  00CE               	movwf	??_getTimeData+9
  3253  01E1  0873               	movf	getTimeData@i,w
  3254  01E2  00CF               	movwf	??_getTimeData+10
  3255  01E3  3003               	movlw	3
  3256  01E4                     u605:	
  3257  01E4  35CF               	lslf	??_getTimeData+10,f
  3258  01E5  0B89               	decfsz	9,f
  3259  01E6  29E4               	goto	u605
  3260  01E7  30A0               	movlw	(low (_timeCtrlValue| 0))& (0+255)
  3261  01E8  074F               	addwf	??_getTimeData+10,w
  3262  01E9  00D0               	movwf	??_getTimeData+11
  3263  01EA  3574               	lslf	getTimeData@j,w
  3264  01EB  0750               	addwf	??_getTimeData+11,w
  3265  01EC  00D1               	movwf	??_getTimeData+12
  3266  01ED  0851               	movf	??_getTimeData+12,w
  3267  01EE  0086               	movwf	6
  3268  01EF  0187               	clrf	7
  3269  01F0  084D               	movf	??_getTimeData+8,w
  3270  01F1  3FC0               	movwi [0]fsr1
  3271  01F2  084E               	movf	??_getTimeData+9,w
  3272  01F3  3FC1               	movwi [1]fsr1
  3273                           
  3274                           ;time_ctrl.c: 23: cnt += 2;
  3275  01F4  3002               	movlw	2
  3276  01F5  00C5               	movwf	??_getTimeData
  3277  01F6  0845               	movf	??_getTimeData,w
  3278  01F7  07F2               	addwf	getTimeData@cnt,f
  3279  01F8  3001               	movlw	1
  3280  01F9  00C5               	movwf	??_getTimeData
  3281  01FA  0845               	movf	??_getTimeData,w
  3282  01FB  07F4               	addwf	getTimeData@j,f
  3283  01FC  3004               	movlw	4
  3284  01FD  0274               	subwf	getTimeData@j,w
  3285  01FE  1C03               	skipc
  3286  01FF  299F               	goto	l1122
  3287  0200                     l1130:	
  3288  0200  3001               	movlw	1
  3289  0201  0020               	movlb	0	; select bank0
  3290  0202  00C5               	movwf	??_getTimeData
  3291  0203  0845               	movf	??_getTimeData,w
  3292  0204  07F3               	addwf	getTimeData@i,f
  3293  0205  2996               	goto	L3
  3294  0206                     __end_of_getTimeData:	
  3295                           
  3296                           	psect	text16
  3297  038D                     __ptext16:	
  3298 ;; *************** function _Get_Device_Addr *****************
  3299 ;; Defined at:
  3300 ;;		line 75 in file "mcc_generated_files/mcc.c"
  3301 ;; Parameters:    Size  Location     Type
  3302 ;;		None
  3303 ;; Auto vars:     Size  Location     Type
  3304 ;;  device_addr     1    3[COMMON] unsigned char 
  3305 ;; Return value:  Size  Location     Type
  3306 ;;                  1    wreg      unsigned char 
  3307 ;; Registers used:
  3308 ;;		wreg, status,2, status,0
  3309 ;; Tracked objects:
  3310 ;;		On entry : 0/0
  3311 ;;		On exit  : 0/0
  3312 ;;		Unchanged: 0/0
  3313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3314 ;;      Params:         0       0       0       0
  3315 ;;      Locals:         1       0       0       0
  3316 ;;      Temps:          1       0       0       0
  3317 ;;      Totals:         2       0       0       0
  3318 ;;Total ram usage:        2 bytes
  3319 ;; Hardware stack levels used:    1
  3320 ;; Hardware stack levels required when called:    4
  3321 ;; This function calls:
  3322 ;;		Nothing
  3323 ;; This function is called by:
  3324 ;;		_EUSART_Deal
  3325 ;; This function uses a non-reentrant model
  3326 ;;
  3327                           
  3328                           
  3329                           ;psect for function _Get_Device_Addr
  3330  038D                     _Get_Device_Addr:	
  3331                           
  3332                           ;mcc.c: 77: unsigned char device_addr;
  3333                           ;mcc.c: 79: device_addr = PORTBbits.RB4;
  3334                           
  3335                           ;incstack = 0
  3336                           ; Regs used in _Get_Device_Addr: [wreg+status,2+status,0]
  3337  038D  3000               	movlw	0
  3338  038E  0020               	movlb	0	; select bank0
  3339  038F  1A0D               	btfsc	13,4	;volatile
  3340  0390  3001               	movlw	1
  3341  0391  00F3               	movwf	Get_Device_Addr@device_addr
  3342                           
  3343                           ;mcc.c: 80: device_addr |= PORTBbits.RB6 << 1;
  3344  0392  0E0D               	swapf	13,w	;volatile
  3345  0393  0C89               	rrf	9,f
  3346  0394  0C89               	rrf	9,f
  3347  0395  3901               	andlw	1
  3348  0396  0709               	addwf	9,w
  3349  0397  00F2               	movwf	??_Get_Device_Addr
  3350  0398  0872               	movf	??_Get_Device_Addr,w
  3351  0399  04F3               	iorwf	Get_Device_Addr@device_addr,f
  3352                           
  3353                           ;mcc.c: 82: return device_addr;
  3354  039A  0873               	movf	Get_Device_Addr@device_addr,w
  3355  039B  0008               	return
  3356  039C                     __end_of_Get_Device_Addr:	
  3357                           
  3358                           	psect	intentry
  3359  0004                     __pintentry:	
  3360 ;; *************** function _INTERRUPT_InterruptManager *****************
  3361 ;; Defined at:
  3362 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  3363 ;; Parameters:    Size  Location     Type
  3364 ;;		None
  3365 ;; Auto vars:     Size  Location     Type
  3366 ;;		None
  3367 ;; Return value:  Size  Location     Type
  3368 ;;                  1    wreg      void 
  3369 ;; Registers used:
  3370 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3371 ;; Tracked objects:
  3372 ;;		On entry : 0/0
  3373 ;;		On exit  : 0/0
  3374 ;;		Unchanged: 0/0
  3375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3376 ;;      Params:         0       0       0       0
  3377 ;;      Locals:         0       0       0       0
  3378 ;;      Temps:          1       0       0       0
  3379 ;;      Totals:         1       0       0       0
  3380 ;;Total ram usage:        1 bytes
  3381 ;; Hardware stack levels used:    1
  3382 ;; Hardware stack levels required when called:    3
  3383 ;; This function calls:
  3384 ;;		Absolute function
  3385 ;;		_EUSART_Receive_ISR
  3386 ;;		_TMR0_ISR
  3387 ;; This function is called by:
  3388 ;;		Interrupt level 1
  3389 ;; This function uses a non-reentrant model
  3390 ;;
  3391                           
  3392  0004                     _INTERRUPT_InterruptManager:	
  3393                           
  3394                           ;incstack = 0
  3395  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  3396                           
  3397                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  3398  0005  3180               	pagesel	$
  3399  0006  0020               	movlb	0	; select bank0
  3400  0007  087F               	movf	127,w
  3401  0008  00F1               	movwf	??_INTERRUPT_InterruptManager
  3402                           
  3403                           ;interrupt_manager.c: 55: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  3404  0009  1A8B               	btfsc	11,5	;volatile
  3405  000A  1D0B               	btfss	11,2	;volatile
  3406  000B  2810               	goto	i1l89
  3407                           
  3408                           ;interrupt_manager.c: 56: {
  3409                           ;interrupt_manager.c: 57: TMR0_ISR();
  3410  000C  3183  23B3  3180   	fcall	_TMR0_ISR
  3411                           
  3412                           ;interrupt_manager.c: 58: }
  3413  000F  2822               	goto	i1l97
  3414  0010                     i1l89:	
  3415                           
  3416                           ;interrupt_manager.c: 59: else if(INTCONbits.PEIE == 1)
  3417  0010  1F0B               	btfss	11,6	;volatile
  3418  0011  2822               	goto	i1l97
  3419                           
  3420                           ;interrupt_manager.c: 60: {
  3421                           ;interrupt_manager.c: 61: if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
  3422  0012  0021               	movlb	1	; select bank1
  3423  0013  1A11               	btfsc	17,4	;volatile
  3424  0014  0020               	movlb	0	; select bank0
  3425  0015  1A11               	btfsc	17,4	;volatile
  3426  0016  2822               	goto	i1l97
  3427                           
  3428                           ;interrupt_manager.c: 65: else if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
  3429                           
  3430                           ;interrupt_manager.c: 62: {
  3431                           ;interrupt_manager.c: 64: }
  3432  0017  0021               	movlb	1	; select bank1
  3433  0018  1E91               	btfss	17,5	;volatile
  3434  0019  2822               	goto	i1l97
  3435  001A  0020               	movlb	0	; select bank0
  3436  001B  1E91               	btfss	17,5	;volatile
  3437  001C  2822               	goto	i1l97
  3438                           
  3439                           ;interrupt_manager.c: 66: {
  3440                           ;interrupt_manager.c: 67: EUSART_RxDefaultInterruptHandler();
  3441  001D  0860               	movf	_EUSART_RxDefaultInterruptHandler+1,w
  3442  001E  008A               	movwf	10
  3443  001F  085F               	movf	_EUSART_RxDefaultInterruptHandler,w
  3444  0020  000A               	callw
  3445  0021  3180               	pagesel	$
  3446  0022                     i1l97:	
  3447                           ;interrupt_manager.c: 74: else
  3448                           ;interrupt_manager.c: 75: {
  3449                           
  3450                           ;interrupt_manager.c: 72: }
  3451                           ;interrupt_manager.c: 73: }
  3452                           
  3453                           ;interrupt_manager.c: 69: else
  3454                           ;interrupt_manager.c: 70: {
  3455                           
  3456                           ;interrupt_manager.c: 68: }
  3457                           
  3458  0022  0871               	movf	??_INTERRUPT_InterruptManager,w
  3459  0023  0020               	movlb	0	; select bank0
  3460  0024  00FF               	movwf	127
  3461  0025  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  3462  0026  0009               	retfie
  3463  0027                     __end_of_INTERRUPT_InterruptManager:	
  3464                           
  3465                           	psect	text18
  3466  03B3                     __ptext18:	
  3467 ;; *************** function _TMR0_ISR *****************
  3468 ;; Defined at:
  3469 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  3470 ;; Parameters:    Size  Location     Type
  3471 ;;		None
  3472 ;; Auto vars:     Size  Location     Type
  3473 ;;		None
  3474 ;; Return value:  Size  Location     Type
  3475 ;;                  1    wreg      void 
  3476 ;; Registers used:
  3477 ;;		wreg, status,2, status,0, pclath, cstack
  3478 ;; Tracked objects:
  3479 ;;		On entry : 0/0
  3480 ;;		On exit  : 0/0
  3481 ;;		Unchanged: 0/0
  3482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3483 ;;      Params:         0       0       0       0
  3484 ;;      Locals:         0       0       0       0
  3485 ;;      Temps:          0       0       0       0
  3486 ;;      Totals:         0       0       0       0
  3487 ;;Total ram usage:        0 bytes
  3488 ;; Hardware stack levels used:    1
  3489 ;; Hardware stack levels required when called:    2
  3490 ;; This function calls:
  3491 ;;		_TMR0_CallBack
  3492 ;; This function is called by:
  3493 ;;		_INTERRUPT_InterruptManager
  3494 ;; This function uses a non-reentrant model
  3495 ;;
  3496                           
  3497                           
  3498                           ;psect for function _TMR0_ISR
  3499  03B3                     _TMR0_ISR:	
  3500                           
  3501                           ;tmr0.c: 112: INTCONbits.TMR0IF = 0;
  3502                           
  3503                           ;incstack = 0
  3504                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  3505  03B3  110B               	bcf	11,2	;volatile
  3506                           
  3507                           ;tmr0.c: 114: TMR0 = timer0ReloadVal;
  3508  03B4  0020               	movlb	0	; select bank0
  3509  03B5  0861               	movf	_timer0ReloadVal,w	;volatile
  3510  03B6  0095               	movwf	21	;volatile
  3511                           
  3512                           ;tmr0.c: 118: TMR0_CallBack();
  3513  03B7  3182  225C         	fcall	_TMR0_CallBack
  3514  03B9  0008               	return
  3515  03BA                     __end_of_TMR0_ISR:	
  3516                           
  3517                           	psect	text19
  3518  025C                     __ptext19:	
  3519 ;; *************** function _TMR0_CallBack *****************
  3520 ;; Defined at:
  3521 ;;		line 123 in file "mcc_generated_files/tmr0.c"
  3522 ;; Parameters:    Size  Location     Type
  3523 ;;		None
  3524 ;; Auto vars:     Size  Location     Type
  3525 ;;		None
  3526 ;; Return value:  Size  Location     Type
  3527 ;;                  1    wreg      void 
  3528 ;; Registers used:
  3529 ;;		wreg, status,2, status,0, pclath, cstack
  3530 ;; Tracked objects:
  3531 ;;		On entry : 0/0
  3532 ;;		On exit  : 0/0
  3533 ;;		Unchanged: 0/0
  3534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3535 ;;      Params:         0       0       0       0
  3536 ;;      Locals:         0       0       0       0
  3537 ;;      Temps:          1       0       0       0
  3538 ;;      Totals:         1       0       0       0
  3539 ;;Total ram usage:        1 bytes
  3540 ;; Hardware stack levels used:    1
  3541 ;; Hardware stack levels required when called:    1
  3542 ;; This function calls:
  3543 ;;		Absolute function
  3544 ;;		_TMR0_DefaultInterruptHandler
  3545 ;; This function is called by:
  3546 ;;		_TMR0_ISR
  3547 ;; This function uses a non-reentrant model
  3548 ;;
  3549                           
  3550                           
  3551                           ;psect for function _TMR0_CallBack
  3552  025C                     _TMR0_CallBack:	
  3553                           
  3554                           ;tmr0.c: 126: static uint8_t eusartRXOvertimeCnt = 0;
  3555                           ;tmr0.c: 127: static uint8_t timeCrlCnt = 0;
  3556                           ;tmr0.c: 128: static uint8_t preEusartRxCount = 0;
  3557                           ;tmr0.c: 129: static uint8_t testTimeCtrlCnt = 0;
  3558                           ;tmr0.c: 131: if(timeCtrlStartFlag)
  3559                           
  3560                           ;incstack = 0
  3561                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
  3562  025C  087A               	movf	_timeCtrlStartFlag,w
  3563  025D  1903               	btfsc	3,2
  3564  025E  2A6B               	goto	i1l1214
  3565                           
  3566                           ;tmr0.c: 132: {
  3567                           ;tmr0.c: 133: if(++timeCrlCnt >= 10)
  3568  025F  3001               	movlw	1
  3569  0260  00F0               	movwf	??_TMR0_CallBack
  3570  0261  0870               	movf	??_TMR0_CallBack,w
  3571  0262  0020               	movlb	0	; select bank0
  3572  0263  07BF               	addwf	TMR0_CallBack@timeCrlCnt,f
  3573  0264  300A               	movlw	10
  3574  0265  023F               	subwf	TMR0_CallBack@timeCrlCnt,w
  3575  0266  1C03               	skipc
  3576  0267  2A6B               	goto	i1l1214
  3577                           
  3578                           ;tmr0.c: 134: {
  3579                           ;tmr0.c: 135: timeCrlCnt = 0;
  3580  0268  01BF               	clrf	TMR0_CallBack@timeCrlCnt
  3581                           
  3582                           ;tmr0.c: 136: timeCtrlOvertimeMask = 1;
  3583  0269  01F9               	clrf	_timeCtrlOvertimeMask
  3584  026A  0AF9               	incf	_timeCtrlOvertimeMask,f
  3585  026B                     i1l1214:	
  3586                           
  3587                           ;tmr0.c: 137: }
  3588                           ;tmr0.c: 138: }
  3589                           ;tmr0.c: 140: if(testTimeCtrlFlag)
  3590  026B  0020               	movlb	0	; select bank0
  3591  026C  0844               	movf	_testTimeCtrlFlag,w
  3592  026D  1903               	btfsc	3,2
  3593  026E  2A7A               	goto	i1l1222
  3594                           
  3595                           ;tmr0.c: 141: {
  3596                           ;tmr0.c: 142: if(++testTimeCtrlCnt >= 10)
  3597  026F  3001               	movlw	1
  3598  0270  00F0               	movwf	??_TMR0_CallBack
  3599  0271  0870               	movf	??_TMR0_CallBack,w
  3600  0272  07BD               	addwf	TMR0_CallBack@testTimeCtrlCnt,f
  3601  0273  300A               	movlw	10
  3602  0274  023D               	subwf	TMR0_CallBack@testTimeCtrlCnt,w
  3603  0275  1C03               	skipc
  3604  0276  2A7A               	goto	i1l1222
  3605                           
  3606                           ;tmr0.c: 143: {
  3607                           ;tmr0.c: 144: testTimeCtrlCnt = 0;
  3608  0277  01BD               	clrf	TMR0_CallBack@testTimeCtrlCnt
  3609                           
  3610                           ;tmr0.c: 145: testTimeCtrlOvertimeMask = 1;
  3611  0278  01C3               	clrf	_testTimeCtrlOvertimeMask
  3612  0279  0AC3               	incf	_testTimeCtrlOvertimeMask,f
  3613  027A                     i1l1222:	
  3614                           
  3615                           ;tmr0.c: 146: }
  3616                           ;tmr0.c: 147: }
  3617                           ;tmr0.c: 150: if(eusartRxCount != preEusartRxCount)
  3618  027A  0878               	movf	_eusartRxCount,w
  3619  027B  063E               	xorwf	TMR0_CallBack@preEusartRxCount,w
  3620  027C  1903               	skipnz
  3621  027D  2A84               	goto	i1l1228
  3622                           
  3623                           ;tmr0.c: 151: {
  3624                           ;tmr0.c: 152: preEusartRxCount = eusartRxCount;
  3625  027E  0878               	movf	_eusartRxCount,w
  3626  027F  00F0               	movwf	??_TMR0_CallBack
  3627  0280  0870               	movf	??_TMR0_CallBack,w
  3628  0281  00BE               	movwf	TMR0_CallBack@preEusartRxCount
  3629                           
  3630                           ;tmr0.c: 153: eusartRXOvertimeCnt = 0;
  3631  0282  01C0               	clrf	TMR0_CallBack@eusartRXOvertimeCnt
  3632                           
  3633                           ;tmr0.c: 154: }
  3634  0283  2A98               	goto	i1l1242
  3635  0284                     i1l1228:	
  3636                           
  3637                           ;tmr0.c: 155: else
  3638                           ;tmr0.c: 156: {
  3639                           ;tmr0.c: 157: if(eusartRxCount != 0)
  3640  0284  0878               	movf	_eusartRxCount,w
  3641  0285  1903               	btfsc	3,2
  3642  0286  2A98               	goto	i1l1242
  3643                           
  3644                           ;tmr0.c: 158: {
  3645                           ;tmr0.c: 159: if(++eusartRXOvertimeCnt >= 20)
  3646  0287  3001               	movlw	1
  3647  0288  00F0               	movwf	??_TMR0_CallBack
  3648  0289  0870               	movf	??_TMR0_CallBack,w
  3649  028A  07C0               	addwf	TMR0_CallBack@eusartRXOvertimeCnt,f
  3650  028B  3014               	movlw	20
  3651  028C  0240               	subwf	TMR0_CallBack@eusartRXOvertimeCnt,w
  3652  028D  1C03               	skipc
  3653  028E  2A98               	goto	i1l1242
  3654                           
  3655                           ;tmr0.c: 160: {
  3656                           ;tmr0.c: 161: eusartRXOvertimeCnt = 0;
  3657  028F  01C0               	clrf	TMR0_CallBack@eusartRXOvertimeCnt
  3658                           
  3659                           ;tmr0.c: 162: EusartRxLenth = eusartRxCount;
  3660  0290  0878               	movf	_eusartRxCount,w
  3661  0291  00F0               	movwf	??_TMR0_CallBack
  3662  0292  0870               	movf	??_TMR0_CallBack,w
  3663  0293  00C2               	movwf	_EusartRxLenth
  3664                           
  3665                           ;tmr0.c: 163: preEusartRxCount = 0;
  3666  0294  01BE               	clrf	TMR0_CallBack@preEusartRxCount
  3667                           
  3668                           ;tmr0.c: 164: eusartRxCount = 0;
  3669  0295  01F8               	clrf	_eusartRxCount
  3670                           
  3671                           ;tmr0.c: 165: eusartRxOvertimeMask = 1;
  3672  0296  01C1               	clrf	_eusartRxOvertimeMask
  3673  0297  0AC1               	incf	_eusartRxOvertimeMask,f
  3674  0298                     i1l1242:	
  3675                           
  3676                           ;tmr0.c: 166: }
  3677                           ;tmr0.c: 167: }
  3678                           ;tmr0.c: 168: }
  3679                           ;tmr0.c: 170: if(TMR0_InterruptHandler)
  3680  0298  085D               	movf	_TMR0_InterruptHandler,w
  3681  0299  045E               	iorwf	_TMR0_InterruptHandler+1,w
  3682  029A  1903               	btfsc	3,2
  3683  029B  0008               	return
  3684                           
  3685                           ;tmr0.c: 171: {
  3686                           ;tmr0.c: 172: TMR0_InterruptHandler();
  3687  029C  085E               	movf	_TMR0_InterruptHandler+1,w
  3688  029D  008A               	movwf	10
  3689  029E  085D               	movf	_TMR0_InterruptHandler,w
  3690  029F  000A               	callw
  3691  02A0  3182               	pagesel	$
  3692  02A1  0008               	return
  3693  02A2                     __end_of_TMR0_CallBack:	
  3694                           
  3695                           	psect	text20
  3696  03D6                     __ptext20:	
  3697 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  3698 ;; Defined at:
  3699 ;;		line 180 in file "mcc_generated_files/tmr0.c"
  3700 ;; Parameters:    Size  Location     Type
  3701 ;;		None
  3702 ;; Auto vars:     Size  Location     Type
  3703 ;;		None
  3704 ;; Return value:  Size  Location     Type
  3705 ;;                  1    wreg      void 
  3706 ;; Registers used:
  3707 ;;		None
  3708 ;; Tracked objects:
  3709 ;;		On entry : 0/0
  3710 ;;		On exit  : 0/0
  3711 ;;		Unchanged: 0/0
  3712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3713 ;;      Params:         0       0       0       0
  3714 ;;      Locals:         0       0       0       0
  3715 ;;      Temps:          0       0       0       0
  3716 ;;      Totals:         0       0       0       0
  3717 ;;Total ram usage:        0 bytes
  3718 ;; Hardware stack levels used:    1
  3719 ;; This function calls:
  3720 ;;		Nothing
  3721 ;; This function is called by:
  3722 ;;		_TMR0_Initialize
  3723 ;;		_TMR0_CallBack
  3724 ;; This function uses a non-reentrant model
  3725 ;;
  3726                           
  3727                           
  3728                           ;psect for function _TMR0_DefaultInterruptHandler
  3729  03D6                     _TMR0_DefaultInterruptHandler:	
  3730                           
  3731                           ;incstack = 0
  3732                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  3733  03D6  0008               	return
  3734  03D7                     __end_of_TMR0_DefaultInterruptHandler:	
  3735                           
  3736                           	psect	text21
  3737  036B                     __ptext21:	
  3738 ;; *************** function _EUSART_Receive_ISR *****************
  3739 ;; Defined at:
  3740 ;;		line 199 in file "mcc_generated_files/eusart.c"
  3741 ;; Parameters:    Size  Location     Type
  3742 ;;		None
  3743 ;; Auto vars:     Size  Location     Type
  3744 ;;		None
  3745 ;; Return value:  Size  Location     Type
  3746 ;;                  1    wreg      void 
  3747 ;; Registers used:
  3748 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3749 ;; Tracked objects:
  3750 ;;		On entry : 0/0
  3751 ;;		On exit  : 0/0
  3752 ;;		Unchanged: 0/0
  3753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3754 ;;      Params:         0       0       0       0
  3755 ;;      Locals:         0       0       0       0
  3756 ;;      Temps:          1       0       0       0
  3757 ;;      Totals:         1       0       0       0
  3758 ;;Total ram usage:        1 bytes
  3759 ;; Hardware stack levels used:    1
  3760 ;; This function calls:
  3761 ;;		Nothing
  3762 ;; This function is called by:
  3763 ;;		_EUSART_Initialize
  3764 ;;		_INTERRUPT_InterruptManager
  3765 ;; This function uses a non-reentrant model
  3766 ;;
  3767                           
  3768                           
  3769                           ;psect for function _EUSART_Receive_ISR
  3770  036B                     _EUSART_Receive_ISR:	
  3771                           
  3772                           ;eusart.c: 201: if(1 == RCSTAbits.OERR)
  3773                           
  3774                           ;incstack = 0
  3775                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  3776  036B  0023               	movlb	3	; select bank3
  3777  036C  1C9D               	btfss	29,1	;volatile
  3778  036D  2B70               	goto	i1l1294
  3779                           
  3780                           ;eusart.c: 202: {
  3781                           ;eusart.c: 205: RCSTAbits.CREN = 0;
  3782  036E  121D               	bcf	29,4	;volatile
  3783                           
  3784                           ;eusart.c: 206: RCSTAbits.CREN = 1;
  3785  036F  161D               	bsf	29,4	;volatile
  3786  0370                     i1l1294:	
  3787                           
  3788                           ;eusart.c: 207: }
  3789                           ;eusart.c: 216: eusartRxBuffer[eusartRxCount++] = RCREG;
  3790  0370  0819               	movf	25,w	;volatile
  3791  0371  00F0               	movwf	??_EUSART_Receive_ISR
  3792  0372  0878               	movf	_eusartRxCount,w
  3793  0373  3E20               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  3794  0374  0086               	movwf	6
  3795  0375  3001               	movlw	1	; select bank2/3
  3796  0376  0087               	movwf	7
  3797  0377  0870               	movf	??_EUSART_Receive_ISR,w
  3798  0378  0081               	movwf	1
  3799  0379  3001               	movlw	1
  3800  037A  00F0               	movwf	??_EUSART_Receive_ISR
  3801  037B  0870               	movf	??_EUSART_Receive_ISR,w
  3802  037C  07F8               	addwf	_eusartRxCount,f
  3803  037D  0008               	return
  3804  037E                     __end_of_EUSART_Receive_ISR:	
  3805  007E                     btemp	set	126	;btemp
  3806  007E                     int$flags	set	126
  3807  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        9
    BSS         180
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80     15      66
    BANK1            80      0      64
    BANK2            80      0      75

Pointer List with Targets:

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), Absolute function(), 


Critical Paths under _main in COMMON

    _main->_EUSART_Deal
    _main->_testTimeCtrlProcess
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Deal->_stopTimeCtrl
    _startTimeCtrl->_getTimeData

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART_Receive_ISR
    _TMR0_ISR->_TMR0_CallBack

Critical Paths under _main in BANK0

    _EUSART_Deal->_testTimeCtrl
    _startTimeCtrl->_getTimeData

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1352
                        _EUSART_Deal
                  _SYSTEM_Initialize
                    _tempCtrlProcess
                _testTimeCtrlProcess
 ---------------------------------------------------------------------------------
 (1) _testTimeCtrlProcess                                  5     5      0      66
                                              2 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _tempCtrlProcess                                      3     3      0     486
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     150
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0      75
                                              4 COMMON     1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2      75
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0      75
       _EUSART_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      75
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _EUSART_Deal                                          2     2      0     650
                                              5 COMMON     2     2      0
                    _Get_Device_Addr
                      _startTimeCtrl
                       _stopTimeCtrl
                       _testTimeCtrl
 ---------------------------------------------------------------------------------
 (2) _testTimeCtrl                                        17    17      0     244
                                              2 COMMON     2     2      0
                                              0 BANK0     15    15      0
 ---------------------------------------------------------------------------------
 (2) _stopTimeCtrl                                         3     3      0     112
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _startTimeCtrl                                        0     0      0     270
                        _getTimeData
 ---------------------------------------------------------------------------------
 (3) _getTimeData                                         16    16      0     270
                                              2 COMMON     3     3      0
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (2) _Get_Device_Addr                                      2     2      0      24
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           1     1      0       0
                                              1 COMMON     1     1      0
                   Absolute function *
                 _EUSART_Receive_ISR *
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR0_ISR                                             0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (6) _TMR0_CallBack                                        1     1      0       0
                                              0 COMMON     1     1      0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Deal
     _Get_Device_Addr
     _startTimeCtrl
       _getTimeData
     _stopTimeCtrl
     _testTimeCtrl
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetRxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _WDT_Initialize
   _tempCtrlProcess
   _testTimeCtrlProcess

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
   _TMR0_ISR *
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      D8       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      F      42       6       82.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      40       8       80.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      4B      10       93.8%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      D8      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Jun 26 11:38:52 2018

               ?_EUSART_SetRxInterruptHandler 0072                              ?_tempCtrlProcess 0070  
                                 __CFG_CP$OFF 0000                               _timer0ReloadVal 0061  
                                 __CFG_LVP$ON 0000                                           l273 0191  
                                         l285 023F                                           l286 0250  
                                         l296 00D7                                  __CFG_CPD$OFF 0000  
                                         u605 01E4                                           u724 02F7  
                                         u725 02F6                                           u585 01AC  
                                         u595 01C8                                           u755 0138  
                                         u924 0237                                           u765 0157  
                                         u925 0236                                           u775 0176  
                                         u944 0248                                           u945 0247  
                                         u895 020F                                           u985 0069  
                                         u995 007D                                  __CFG_BORV$LO 0000  
                                         wreg 0009                                  __CFG_IESO$ON 0000  
                                ?_EUSART_Deal 0070                                          l1130 0200  
                                        l1122 019F                                          l1310 02C7  
                                        l1314 02CF                                          l1410 0317  
                                        l1404 0310                                          l1350 008F  
                                        l1326 0226                                          l1352 00A4  
                                        l1346 0066                                          l1276 012C  
                                        l1364 00F8                                          l1372 011C  
                                        l1348 007A                                          l1356 00B9  
                                        l1358 00CB                                          l1368 010B  
                                        l1398 0308                                          u1005 0092  
                                        u1015 00A7                                          u1044 00F0  
                                        u1045 00EF                                          u1064 0103  
                                        u1065 0102                                          _LATA 010C  
                                        _LATB 010D                                          _LATC 010E  
                                        i1l97 0022                                          i1l89 0010  
                                        _TMR0 0015                                          _WPUA 020C  
                                        _WPUB 020D                                          _WPUC 020E  
                                __CFG_WRT$OFF 0000                                 __CFG_FCMEN$ON 0000  
                       __size_of_stopTimeCtrl 0026                                          _main 0303  
                                        fsr0h 0005                                          fsr1h 0007  
                                        indf0 0000                                          fsr0l 0004  
                                        indf1 0001                                          fsr1l 0006  
                                        btemp 007E                                 __CFG_BOREN$ON 0000  
                                        start 0027                                 __CFG_MCLRE$ON 0000  
                               _startTimeCtrl 03AC                       __end_of_TMR0_Initialize 036B  
                               __CFG_PLLEN$ON 0000                ??_TMR0_DefaultInterruptHandler 0070  
                  Get_Device_Addr@device_addr 0073                __size_of_OSCILLATOR_Initialize 0007  
               __end_of_OSCILLATOR_Initialize 03AC                                         ?_main 0070  
                               __CFG_WDTE$OFF 0000                                         _RCREG 0199  
                                       _RCSTA 019D                                         _TRISA 008C  
                                       _TRISB 008D                                         _TRISC 008E  
                                       _TXSTA 019E             __size_of_TMR0_SetInterruptHandler 0006  
                   ?_TMR0_SetInterruptHandler 0072                           _testTimeCtrlProcess 0206  
                                _stopTimeCtrl 02DD                              __end_of_TMR0_ISR 03BA  
                              _WDT_Initialize 03D2                                         pclath 000A  
                                       status 0003                                         wtemp0 007E  
                           ??_Get_Device_Addr 0072                          ?_testTimeCtrlProcess 0070  
                             __initialization 0029                                ?_startTimeCtrl 0070  
                                __end_of_main 0322                   ?_INTERRUPT_InterruptManager 0070  
              ??_EUSART_SetRxInterruptHandler 0074                                        ??_main 0077  
                      __end_of_WDT_Initialize 03D6                                        _ANSELA 018C  
                                      _ANSELB 018D                                        _ANSELC 018E  
                        __size_of_getTimeData 0072                                        _BORCON 0116  
                                      i1l1222 027A                                        i1l1214 026B  
                                      i1l1242 0298                                        i1l1228 0284  
                                      i1l1294 0370                              tempCtrlProcess@i 0074  
                                      _OSCCON 0099                                        _IQRSta 0030  
                    _testTimeCtrlOvertimeMask 0043                                        _SPBRGH 019C  
                                      _SPBRGL 019B                                        _WDTCON 0097  
                               _EusartRxLenth 0042                         ??_testTimeCtrlProcess 0072  
                              __CFG_PWRTE$OFF 0000                                __CFG_STVREN$ON 0000  
                            ?_TMR0_Initialize 0070                          _eusartRxOvertimeMask 0041  
                             ?_WDT_Initialize 0070                         __end_of_TMR0_CallBack 02A2  
    TMR0_SetInterruptHandler@InterruptHandler 0072                          __size_of_EUSART_Deal 003B  
                           _SYSTEM_Initialize 037E                       __end_of__initialization 0050  
                          ?_SYSTEM_Initialize 0070                               ??_startTimeCtrl 0075  
                              __pcstackCOMMON 0070                                  __pidataBANK0 039C  
                         ??_SYSTEM_Initialize 0075                                     ?_TMR0_ISR 0070  
                testTimeCtrlProcess@PreIQRSta 005C                                _OPTION_REGbits 0095  
                   __end_of_SYSTEM_Initialize 038D                                    __pbssBANK0 0020  
                                  __pbssBANK1 00A0                                    __pbssBANK2 0120  
                 __size_of_EUSART_Receive_ISR 0013                                    __pmaintext 0303  
            _EUSART_TxDefaultInterruptHandler 003A              __end_of_TMR0_SetInterruptHandler 03CC  
                                  ??_TMR0_ISR 0071                                    __pintentry 0004  
                                     _BAUDCON 019F                                       _APFCON0 011D  
                                     _APFCON1 011E                                 _eusartRxCount 0078  
                    __size_of_tempCtrlProcess 00CD                                       _OSCTUNE 0098  
                             _Get_Device_Addr 038D                     testTimeCtrlProcess@IQRNum 0076  
                   testTimeCtrlProcess@IQRSta 0077                 TMR0_CallBack@preEusartRxCount 003E  
                TMR0_CallBack@testTimeCtrlCnt 003D                                       __ptext1 0206  
                                     __ptext2 0054                                       __ptext3 037E  
                                     __ptext4 03D2                                       __ptext5 0356  
                                     __ptext6 03C6                                       __ptext7 0322  
                                     __ptext8 03A5                                       __ptext9 033D  
                       _OSCILLATOR_Initialize 03A5                      ??_PIN_MANAGER_Initialize 0072  
                  __size_of_SYSTEM_Initialize 000F                                       clrloop0 03C1  
                        end_of_initialization 0050                                       init_ram 03BA  
                                     initloop 03BB                             _EUSART_Initialize 033D  
                               ?_testTimeCtrl 0070                    testTimeCtrlProcess@timeCnt 0038  
                                  _testIQRNum 003C                            ?_EUSART_Initialize 0070  
                                   _IQRPreSta 0054                                     _RCSTAbits 019D  
                         ??_EUSART_Initialize 0074                              ??_WDT_Initialize 0072  
                    _TMR0_SetInterruptHandler 03C6                                     _PORTBbits 000D  
                     __end_of_Get_Device_Addr 039C                              __CFG_FOSC$INTOSC 0000  
                               ??_getTimeData 0045                             ??_tempCtrlProcess 0072  
                 __end_of_testTimeCtrlProcess 025C                     __end_of_EUSART_Initialize 0356  
                              ??_testTimeCtrl 0045                             __size_of_TMR0_ISR 0007  
                      ?_OSCILLATOR_Initialize 0070                           start_initialization 0029  
                    __size_of_TMR0_Initialize 0015               __size_of_PIN_MANAGER_Initialize 001B  
                               ??_EUSART_Deal 0075  EUSART_SetRxInterruptHandler@interruptHandler 0072  
            TMR0_CallBack@eusartRXOvertimeCnt 0040                           __end_of_getTimeData 0206  
                     TMR0_CallBack@timeCrlCnt 003F                         __end_of_startTimeCtrl 03B3  
                      __size_of_TMR0_CallBack 0046                                   __pdataBANK0 0054  
                      tempCtrlProcess@timeCnt 0020                          _timeCtrlOvertimeMask 0079  
                            ?_Get_Device_Addr 0070                                   __pbssCOMMON 0077  
                                   ___latbits 0001                                 ?_stopTimeCtrl 0070  
                               __pcstackBANK0 0045                    __end_of_EUSART_Receive_ISR 037E  
                  __size_of_EUSART_Initialize 0019                           __end_of_EUSART_Deal 02DD  
            _EUSART_RxDefaultInterruptHandler 005F                         _TMR0_InterruptHandler 005D  
                                   __pnvBANK0 005D                        _PIN_MANAGER_Initialize 0322  
                               stopTimeCtrl@i 0074                  ??_INTERRUPT_InterruptManager 0071  
                          testTimeCtrl@IQRNum 0072                                ??_stopTimeCtrl 0072  
                        __end_of_testTimeCtrl 0194                                   _getTimeData 0194  
                           _timeCtrlStartFlag 007A                                 _TMR0_CallBack 025C  
                              _eusartRxBuffer 0120                             ??_TMR0_Initialize 0074  
                                    _LATAbits 010C                                     clear_ram0 03C0  
                                    _PIE1bits 0091                                 _timeCtrlValue 00A0  
         __size_of_INTERRUPT_InterruptManager 0023                    ??_TMR0_SetInterruptHandler 0074  
                                    _PIR1bits 0011                                      _TMR0_ISR 03B3  
                             _tempCtrlProcess 0054                                getTimeData@cnt 0072  
                              ?_TMR0_CallBack 0070                                   _EUSART_Deal 02A2  
                     ??_OSCILLATOR_Initialize 0072                                      __ptext10 03CC  
                                    __ptext11 02A2                                      __ptext20 03D6  
                                    __ptext12 0121                                      __ptext21 036B  
                                    __ptext13 02DD                                      __ptext14 03AC  
                                    __ptext15 0194                                      __ptext16 038D  
                                    __ptext18 03B3                                      __ptext19 025C  
                               __size_of_main 001F          __end_of_TMR0_DefaultInterruptHandler 03D7  
       __size_of_TMR0_DefaultInterruptHandler 0001                  _TMR0_DefaultInterruptHandler 03D6  
                        __end_of_stopTimeCtrl 0303                  __size_of_testTimeCtrlProcess 0056  
                     __end_of_tempCtrlProcess 0121                                      int$flags 007E  
          __end_of_INTERRUPT_InterruptManager 0027                    _INTERRUPT_InterruptManager 0004  
                       __size_of_testTimeCtrl 0073                              _testTimeCtrlFlag 0044  
                                  _INTCONbits 000B                               ??_TMR0_CallBack 0070  
                     __size_of_WDT_Initialize 0004                                      intlevel1 0000  
                     ?_PIN_MANAGER_Initialize 0070                             __CFG_CLKOUTEN$OFF 0000  
        __end_of_EUSART_SetRxInterruptHandler 03D2         __size_of_EUSART_SetRxInterruptHandler 0006  
                _EUSART_SetRxInterruptHandler 03CC                                  _testTimeCtrl 0121  
               ?_TMR0_DefaultInterruptHandler 0070                                  getTimeData@i 0073  
                                getTimeData@j 0074                            _EUSART_Receive_ISR 036B  
                                  _OPTION_REG 0095                           ?_EUSART_Receive_ISR 0070  
                             _TMR0_Initialize 0356                                  ?_getTimeData 0070  
                      __size_of_startTimeCtrl 0007                      __size_of_Get_Device_Addr 000F  
              __end_of_PIN_MANAGER_Initialize 033D                          ??_EUSART_Receive_ISR 0070  
                               testTimeCtrl@i 0073  
