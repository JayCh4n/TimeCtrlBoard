

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Nov 05 15:34:04 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1828
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	intentry,global,class=CODE,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	dabs	1,0x7E,2
    41  0000                     
    42                           ; Version 1.45
    43                           ; Generated 16/11/2017 GMT
    44                           ; 
    45                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC16F1828 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76  0000                     	;# 
    77  0001                     	;# 
    78  0002                     	;# 
    79  0003                     	;# 
    80  0004                     	;# 
    81  0005                     	;# 
    82  0006                     	;# 
    83  0007                     	;# 
    84  0008                     	;# 
    85  0009                     	;# 
    86  000A                     	;# 
    87  000B                     	;# 
    88  000C                     	;# 
    89  000D                     	;# 
    90  000E                     	;# 
    91  0011                     	;# 
    92  0012                     	;# 
    93  0013                     	;# 
    94  0015                     	;# 
    95  0016                     	;# 
    96  0016                     	;# 
    97  0017                     	;# 
    98  0018                     	;# 
    99  0019                     	;# 
   100  001A                     	;# 
   101  001B                     	;# 
   102  001C                     	;# 
   103  001E                     	;# 
   104  001F                     	;# 
   105  008C                     	;# 
   106  008D                     	;# 
   107  008E                     	;# 
   108  0091                     	;# 
   109  0092                     	;# 
   110  0093                     	;# 
   111  0095                     	;# 
   112  0096                     	;# 
   113  0097                     	;# 
   114  0098                     	;# 
   115  0099                     	;# 
   116  009A                     	;# 
   117  009B                     	;# 
   118  009B                     	;# 
   119  009C                     	;# 
   120  009D                     	;# 
   121  009E                     	;# 
   122  010C                     	;# 
   123  010D                     	;# 
   124  010E                     	;# 
   125  0111                     	;# 
   126  0112                     	;# 
   127  0113                     	;# 
   128  0114                     	;# 
   129  0115                     	;# 
   130  0116                     	;# 
   131  0117                     	;# 
   132  0118                     	;# 
   133  0119                     	;# 
   134  011A                     	;# 
   135  011B                     	;# 
   136  011D                     	;# 
   137  011E                     	;# 
   138  018C                     	;# 
   139  018D                     	;# 
   140  018E                     	;# 
   141  0191                     	;# 
   142  0191                     	;# 
   143  0192                     	;# 
   144  0193                     	;# 
   145  0193                     	;# 
   146  0193                     	;# 
   147  0194                     	;# 
   148  0195                     	;# 
   149  0196                     	;# 
   150  0199                     	;# 
   151  019A                     	;# 
   152  019B                     	;# 
   153  019B                     	;# 
   154  019B                     	;# 
   155  019B                     	;# 
   156  019C                     	;# 
   157  019C                     	;# 
   158  019D                     	;# 
   159  019E                     	;# 
   160  019F                     	;# 
   161  020C                     	;# 
   162  020D                     	;# 
   163  020E                     	;# 
   164  0211                     	;# 
   165  0211                     	;# 
   166  0212                     	;# 
   167  0212                     	;# 
   168  0213                     	;# 
   169  0213                     	;# 
   170  0214                     	;# 
   171  0214                     	;# 
   172  0215                     	;# 
   173  0215                     	;# 
   174  0215                     	;# 
   175  0215                     	;# 
   176  0216                     	;# 
   177  0216                     	;# 
   178  0217                     	;# 
   179  0217                     	;# 
   180  0291                     	;# 
   181  0291                     	;# 
   182  0292                     	;# 
   183  0293                     	;# 
   184  0294                     	;# 
   185  0295                     	;# 
   186  0295                     	;# 
   187  0296                     	;# 
   188  0298                     	;# 
   189  0298                     	;# 
   190  0299                     	;# 
   191  029A                     	;# 
   192  029B                     	;# 
   193  029C                     	;# 
   194  029D                     	;# 
   195  029E                     	;# 
   196  029E                     	;# 
   197  0311                     	;# 
   198  0311                     	;# 
   199  0312                     	;# 
   200  0313                     	;# 
   201  0318                     	;# 
   202  0318                     	;# 
   203  0319                     	;# 
   204  031A                     	;# 
   205  038C                     	;# 
   206  038D                     	;# 
   207  038E                     	;# 
   208  0391                     	;# 
   209  0392                     	;# 
   210  0393                     	;# 
   211  0394                     	;# 
   212  0395                     	;# 
   213  0396                     	;# 
   214  039A                     	;# 
   215  039C                     	;# 
   216  039D                     	;# 
   217  039E                     	;# 
   218  039F                     	;# 
   219  0415                     	;# 
   220  0416                     	;# 
   221  0417                     	;# 
   222  041C                     	;# 
   223  041D                     	;# 
   224  041E                     	;# 
   225  0FE4                     	;# 
   226  0FE5                     	;# 
   227  0FE6                     	;# 
   228  0FE7                     	;# 
   229  0FE8                     	;# 
   230  0FE9                     	;# 
   231  0FEA                     	;# 
   232  0FEB                     	;# 
   233  0FED                     	;# 
   234  0FEE                     	;# 
   235  0FEF                     	;# 
   236  0000                     	;# 
   237  0001                     	;# 
   238  0002                     	;# 
   239  0003                     	;# 
   240  0004                     	;# 
   241  0005                     	;# 
   242  0006                     	;# 
   243  0007                     	;# 
   244  0008                     	;# 
   245  0009                     	;# 
   246  000A                     	;# 
   247  000B                     	;# 
   248  000C                     	;# 
   249  000D                     	;# 
   250  000E                     	;# 
   251  0011                     	;# 
   252  0012                     	;# 
   253  0013                     	;# 
   254  0015                     	;# 
   255  0016                     	;# 
   256  0016                     	;# 
   257  0017                     	;# 
   258  0018                     	;# 
   259  0019                     	;# 
   260  001A                     	;# 
   261  001B                     	;# 
   262  001C                     	;# 
   263  001E                     	;# 
   264  001F                     	;# 
   265  008C                     	;# 
   266  008D                     	;# 
   267  008E                     	;# 
   268  0091                     	;# 
   269  0092                     	;# 
   270  0093                     	;# 
   271  0095                     	;# 
   272  0096                     	;# 
   273  0097                     	;# 
   274  0098                     	;# 
   275  0099                     	;# 
   276  009A                     	;# 
   277  009B                     	;# 
   278  009B                     	;# 
   279  009C                     	;# 
   280  009D                     	;# 
   281  009E                     	;# 
   282  010C                     	;# 
   283  010D                     	;# 
   284  010E                     	;# 
   285  0111                     	;# 
   286  0112                     	;# 
   287  0113                     	;# 
   288  0114                     	;# 
   289  0115                     	;# 
   290  0116                     	;# 
   291  0117                     	;# 
   292  0118                     	;# 
   293  0119                     	;# 
   294  011A                     	;# 
   295  011B                     	;# 
   296  011D                     	;# 
   297  011E                     	;# 
   298  018C                     	;# 
   299  018D                     	;# 
   300  018E                     	;# 
   301  0191                     	;# 
   302  0191                     	;# 
   303  0192                     	;# 
   304  0193                     	;# 
   305  0193                     	;# 
   306  0193                     	;# 
   307  0194                     	;# 
   308  0195                     	;# 
   309  0196                     	;# 
   310  0199                     	;# 
   311  019A                     	;# 
   312  019B                     	;# 
   313  019B                     	;# 
   314  019B                     	;# 
   315  019B                     	;# 
   316  019C                     	;# 
   317  019C                     	;# 
   318  019D                     	;# 
   319  019E                     	;# 
   320  019F                     	;# 
   321  020C                     	;# 
   322  020D                     	;# 
   323  020E                     	;# 
   324  0211                     	;# 
   325  0211                     	;# 
   326  0212                     	;# 
   327  0212                     	;# 
   328  0213                     	;# 
   329  0213                     	;# 
   330  0214                     	;# 
   331  0214                     	;# 
   332  0215                     	;# 
   333  0215                     	;# 
   334  0215                     	;# 
   335  0215                     	;# 
   336  0216                     	;# 
   337  0216                     	;# 
   338  0217                     	;# 
   339  0217                     	;# 
   340  0291                     	;# 
   341  0291                     	;# 
   342  0292                     	;# 
   343  0293                     	;# 
   344  0294                     	;# 
   345  0295                     	;# 
   346  0295                     	;# 
   347  0296                     	;# 
   348  0298                     	;# 
   349  0298                     	;# 
   350  0299                     	;# 
   351  029A                     	;# 
   352  029B                     	;# 
   353  029C                     	;# 
   354  029D                     	;# 
   355  029E                     	;# 
   356  029E                     	;# 
   357  0311                     	;# 
   358  0311                     	;# 
   359  0312                     	;# 
   360  0313                     	;# 
   361  0318                     	;# 
   362  0318                     	;# 
   363  0319                     	;# 
   364  031A                     	;# 
   365  038C                     	;# 
   366  038D                     	;# 
   367  038E                     	;# 
   368  0391                     	;# 
   369  0392                     	;# 
   370  0393                     	;# 
   371  0394                     	;# 
   372  0395                     	;# 
   373  0396                     	;# 
   374  039A                     	;# 
   375  039C                     	;# 
   376  039D                     	;# 
   377  039E                     	;# 
   378  039F                     	;# 
   379  0415                     	;# 
   380  0416                     	;# 
   381  0417                     	;# 
   382  041C                     	;# 
   383  041D                     	;# 
   384  041E                     	;# 
   385  0FE4                     	;# 
   386  0FE5                     	;# 
   387  0FE6                     	;# 
   388  0FE7                     	;# 
   389  0FE8                     	;# 
   390  0FE9                     	;# 
   391  0FEA                     	;# 
   392  0FEB                     	;# 
   393  0FED                     	;# 
   394  0FEE                     	;# 
   395  0FEF                     	;# 
   396  0000                     	;# 
   397  0001                     	;# 
   398  0002                     	;# 
   399  0003                     	;# 
   400  0004                     	;# 
   401  0005                     	;# 
   402  0006                     	;# 
   403  0007                     	;# 
   404  0008                     	;# 
   405  0009                     	;# 
   406  000A                     	;# 
   407  000B                     	;# 
   408  000C                     	;# 
   409  000D                     	;# 
   410  000E                     	;# 
   411  0011                     	;# 
   412  0012                     	;# 
   413  0013                     	;# 
   414  0015                     	;# 
   415  0016                     	;# 
   416  0016                     	;# 
   417  0017                     	;# 
   418  0018                     	;# 
   419  0019                     	;# 
   420  001A                     	;# 
   421  001B                     	;# 
   422  001C                     	;# 
   423  001E                     	;# 
   424  001F                     	;# 
   425  008C                     	;# 
   426  008D                     	;# 
   427  008E                     	;# 
   428  0091                     	;# 
   429  0092                     	;# 
   430  0093                     	;# 
   431  0095                     	;# 
   432  0096                     	;# 
   433  0097                     	;# 
   434  0098                     	;# 
   435  0099                     	;# 
   436  009A                     	;# 
   437  009B                     	;# 
   438  009B                     	;# 
   439  009C                     	;# 
   440  009D                     	;# 
   441  009E                     	;# 
   442  010C                     	;# 
   443  010D                     	;# 
   444  010E                     	;# 
   445  0111                     	;# 
   446  0112                     	;# 
   447  0113                     	;# 
   448  0114                     	;# 
   449  0115                     	;# 
   450  0116                     	;# 
   451  0117                     	;# 
   452  0118                     	;# 
   453  0119                     	;# 
   454  011A                     	;# 
   455  011B                     	;# 
   456  011D                     	;# 
   457  011E                     	;# 
   458  018C                     	;# 
   459  018D                     	;# 
   460  018E                     	;# 
   461  0191                     	;# 
   462  0191                     	;# 
   463  0192                     	;# 
   464  0193                     	;# 
   465  0193                     	;# 
   466  0193                     	;# 
   467  0194                     	;# 
   468  0195                     	;# 
   469  0196                     	;# 
   470  0199                     	;# 
   471  019A                     	;# 
   472  019B                     	;# 
   473  019B                     	;# 
   474  019B                     	;# 
   475  019B                     	;# 
   476  019C                     	;# 
   477  019C                     	;# 
   478  019D                     	;# 
   479  019E                     	;# 
   480  019F                     	;# 
   481  020C                     	;# 
   482  020D                     	;# 
   483  020E                     	;# 
   484  0211                     	;# 
   485  0211                     	;# 
   486  0212                     	;# 
   487  0212                     	;# 
   488  0213                     	;# 
   489  0213                     	;# 
   490  0214                     	;# 
   491  0214                     	;# 
   492  0215                     	;# 
   493  0215                     	;# 
   494  0215                     	;# 
   495  0215                     	;# 
   496  0216                     	;# 
   497  0216                     	;# 
   498  0217                     	;# 
   499  0217                     	;# 
   500  0291                     	;# 
   501  0291                     	;# 
   502  0292                     	;# 
   503  0293                     	;# 
   504  0294                     	;# 
   505  0295                     	;# 
   506  0295                     	;# 
   507  0296                     	;# 
   508  0298                     	;# 
   509  0298                     	;# 
   510  0299                     	;# 
   511  029A                     	;# 
   512  029B                     	;# 
   513  029C                     	;# 
   514  029D                     	;# 
   515  029E                     	;# 
   516  029E                     	;# 
   517  0311                     	;# 
   518  0311                     	;# 
   519  0312                     	;# 
   520  0313                     	;# 
   521  0318                     	;# 
   522  0318                     	;# 
   523  0319                     	;# 
   524  031A                     	;# 
   525  038C                     	;# 
   526  038D                     	;# 
   527  038E                     	;# 
   528  0391                     	;# 
   529  0392                     	;# 
   530  0393                     	;# 
   531  0394                     	;# 
   532  0395                     	;# 
   533  0396                     	;# 
   534  039A                     	;# 
   535  039C                     	;# 
   536  039D                     	;# 
   537  039E                     	;# 
   538  039F                     	;# 
   539  0415                     	;# 
   540  0416                     	;# 
   541  0417                     	;# 
   542  041C                     	;# 
   543  041D                     	;# 
   544  041E                     	;# 
   545  0FE4                     	;# 
   546  0FE5                     	;# 
   547  0FE6                     	;# 
   548  0FE7                     	;# 
   549  0FE8                     	;# 
   550  0FE9                     	;# 
   551  0FEA                     	;# 
   552  0FEB                     	;# 
   553  0FED                     	;# 
   554  0FEE                     	;# 
   555  0FEF                     	;# 
   556  0000                     	;# 
   557  0001                     	;# 
   558  0002                     	;# 
   559  0003                     	;# 
   560  0004                     	;# 
   561  0005                     	;# 
   562  0006                     	;# 
   563  0007                     	;# 
   564  0008                     	;# 
   565  0009                     	;# 
   566  000A                     	;# 
   567  000B                     	;# 
   568  000C                     	;# 
   569  000D                     	;# 
   570  000E                     	;# 
   571  0011                     	;# 
   572  0012                     	;# 
   573  0013                     	;# 
   574  0015                     	;# 
   575  0016                     	;# 
   576  0016                     	;# 
   577  0017                     	;# 
   578  0018                     	;# 
   579  0019                     	;# 
   580  001A                     	;# 
   581  001B                     	;# 
   582  001C                     	;# 
   583  001E                     	;# 
   584  001F                     	;# 
   585  008C                     	;# 
   586  008D                     	;# 
   587  008E                     	;# 
   588  0091                     	;# 
   589  0092                     	;# 
   590  0093                     	;# 
   591  0095                     	;# 
   592  0096                     	;# 
   593  0097                     	;# 
   594  0098                     	;# 
   595  0099                     	;# 
   596  009A                     	;# 
   597  009B                     	;# 
   598  009B                     	;# 
   599  009C                     	;# 
   600  009D                     	;# 
   601  009E                     	;# 
   602  010C                     	;# 
   603  010D                     	;# 
   604  010E                     	;# 
   605  0111                     	;# 
   606  0112                     	;# 
   607  0113                     	;# 
   608  0114                     	;# 
   609  0115                     	;# 
   610  0116                     	;# 
   611  0117                     	;# 
   612  0118                     	;# 
   613  0119                     	;# 
   614  011A                     	;# 
   615  011B                     	;# 
   616  011D                     	;# 
   617  011E                     	;# 
   618  018C                     	;# 
   619  018D                     	;# 
   620  018E                     	;# 
   621  0191                     	;# 
   622  0191                     	;# 
   623  0192                     	;# 
   624  0193                     	;# 
   625  0193                     	;# 
   626  0193                     	;# 
   627  0194                     	;# 
   628  0195                     	;# 
   629  0196                     	;# 
   630  0199                     	;# 
   631  019A                     	;# 
   632  019B                     	;# 
   633  019B                     	;# 
   634  019B                     	;# 
   635  019B                     	;# 
   636  019C                     	;# 
   637  019C                     	;# 
   638  019D                     	;# 
   639  019E                     	;# 
   640  019F                     	;# 
   641  020C                     	;# 
   642  020D                     	;# 
   643  020E                     	;# 
   644  0211                     	;# 
   645  0211                     	;# 
   646  0212                     	;# 
   647  0212                     	;# 
   648  0213                     	;# 
   649  0213                     	;# 
   650  0214                     	;# 
   651  0214                     	;# 
   652  0215                     	;# 
   653  0215                     	;# 
   654  0215                     	;# 
   655  0215                     	;# 
   656  0216                     	;# 
   657  0216                     	;# 
   658  0217                     	;# 
   659  0217                     	;# 
   660  0291                     	;# 
   661  0291                     	;# 
   662  0292                     	;# 
   663  0293                     	;# 
   664  0294                     	;# 
   665  0295                     	;# 
   666  0295                     	;# 
   667  0296                     	;# 
   668  0298                     	;# 
   669  0298                     	;# 
   670  0299                     	;# 
   671  029A                     	;# 
   672  029B                     	;# 
   673  029C                     	;# 
   674  029D                     	;# 
   675  029E                     	;# 
   676  029E                     	;# 
   677  0311                     	;# 
   678  0311                     	;# 
   679  0312                     	;# 
   680  0313                     	;# 
   681  0318                     	;# 
   682  0318                     	;# 
   683  0319                     	;# 
   684  031A                     	;# 
   685  038C                     	;# 
   686  038D                     	;# 
   687  038E                     	;# 
   688  0391                     	;# 
   689  0392                     	;# 
   690  0393                     	;# 
   691  0394                     	;# 
   692  0395                     	;# 
   693  0396                     	;# 
   694  039A                     	;# 
   695  039C                     	;# 
   696  039D                     	;# 
   697  039E                     	;# 
   698  039F                     	;# 
   699  0415                     	;# 
   700  0416                     	;# 
   701  0417                     	;# 
   702  041C                     	;# 
   703  041D                     	;# 
   704  041E                     	;# 
   705  0FE4                     	;# 
   706  0FE5                     	;# 
   707  0FE6                     	;# 
   708  0FE7                     	;# 
   709  0FE8                     	;# 
   710  0FE9                     	;# 
   711  0FEA                     	;# 
   712  0FEB                     	;# 
   713  0FED                     	;# 
   714  0FEE                     	;# 
   715  0FEF                     	;# 
   716  0000                     	;# 
   717  0001                     	;# 
   718  0002                     	;# 
   719  0003                     	;# 
   720  0004                     	;# 
   721  0005                     	;# 
   722  0006                     	;# 
   723  0007                     	;# 
   724  0008                     	;# 
   725  0009                     	;# 
   726  000A                     	;# 
   727  000B                     	;# 
   728  000C                     	;# 
   729  000D                     	;# 
   730  000E                     	;# 
   731  0011                     	;# 
   732  0012                     	;# 
   733  0013                     	;# 
   734  0015                     	;# 
   735  0016                     	;# 
   736  0016                     	;# 
   737  0017                     	;# 
   738  0018                     	;# 
   739  0019                     	;# 
   740  001A                     	;# 
   741  001B                     	;# 
   742  001C                     	;# 
   743  001E                     	;# 
   744  001F                     	;# 
   745  008C                     	;# 
   746  008D                     	;# 
   747  008E                     	;# 
   748  0091                     	;# 
   749  0092                     	;# 
   750  0093                     	;# 
   751  0095                     	;# 
   752  0096                     	;# 
   753  0097                     	;# 
   754  0098                     	;# 
   755  0099                     	;# 
   756  009A                     	;# 
   757  009B                     	;# 
   758  009B                     	;# 
   759  009C                     	;# 
   760  009D                     	;# 
   761  009E                     	;# 
   762  010C                     	;# 
   763  010D                     	;# 
   764  010E                     	;# 
   765  0111                     	;# 
   766  0112                     	;# 
   767  0113                     	;# 
   768  0114                     	;# 
   769  0115                     	;# 
   770  0116                     	;# 
   771  0117                     	;# 
   772  0118                     	;# 
   773  0119                     	;# 
   774  011A                     	;# 
   775  011B                     	;# 
   776  011D                     	;# 
   777  011E                     	;# 
   778  018C                     	;# 
   779  018D                     	;# 
   780  018E                     	;# 
   781  0191                     	;# 
   782  0191                     	;# 
   783  0192                     	;# 
   784  0193                     	;# 
   785  0193                     	;# 
   786  0193                     	;# 
   787  0194                     	;# 
   788  0195                     	;# 
   789  0196                     	;# 
   790  0199                     	;# 
   791  019A                     	;# 
   792  019B                     	;# 
   793  019B                     	;# 
   794  019B                     	;# 
   795  019B                     	;# 
   796  019C                     	;# 
   797  019C                     	;# 
   798  019D                     	;# 
   799  019E                     	;# 
   800  019F                     	;# 
   801  020C                     	;# 
   802  020D                     	;# 
   803  020E                     	;# 
   804  0211                     	;# 
   805  0211                     	;# 
   806  0212                     	;# 
   807  0212                     	;# 
   808  0213                     	;# 
   809  0213                     	;# 
   810  0214                     	;# 
   811  0214                     	;# 
   812  0215                     	;# 
   813  0215                     	;# 
   814  0215                     	;# 
   815  0215                     	;# 
   816  0216                     	;# 
   817  0216                     	;# 
   818  0217                     	;# 
   819  0217                     	;# 
   820  0291                     	;# 
   821  0291                     	;# 
   822  0292                     	;# 
   823  0293                     	;# 
   824  0294                     	;# 
   825  0295                     	;# 
   826  0295                     	;# 
   827  0296                     	;# 
   828  0298                     	;# 
   829  0298                     	;# 
   830  0299                     	;# 
   831  029A                     	;# 
   832  029B                     	;# 
   833  029C                     	;# 
   834  029D                     	;# 
   835  029E                     	;# 
   836  029E                     	;# 
   837  0311                     	;# 
   838  0311                     	;# 
   839  0312                     	;# 
   840  0313                     	;# 
   841  0318                     	;# 
   842  0318                     	;# 
   843  0319                     	;# 
   844  031A                     	;# 
   845  038C                     	;# 
   846  038D                     	;# 
   847  038E                     	;# 
   848  0391                     	;# 
   849  0392                     	;# 
   850  0393                     	;# 
   851  0394                     	;# 
   852  0395                     	;# 
   853  0396                     	;# 
   854  039A                     	;# 
   855  039C                     	;# 
   856  039D                     	;# 
   857  039E                     	;# 
   858  039F                     	;# 
   859  0415                     	;# 
   860  0416                     	;# 
   861  0417                     	;# 
   862  041C                     	;# 
   863  041D                     	;# 
   864  041E                     	;# 
   865  0FE4                     	;# 
   866  0FE5                     	;# 
   867  0FE6                     	;# 
   868  0FE7                     	;# 
   869  0FE8                     	;# 
   870  0FE9                     	;# 
   871  0FEA                     	;# 
   872  0FEB                     	;# 
   873  0FED                     	;# 
   874  0FEE                     	;# 
   875  0FEF                     	;# 
   876  0000                     	;# 
   877  0001                     	;# 
   878  0002                     	;# 
   879  0003                     	;# 
   880  0004                     	;# 
   881  0005                     	;# 
   882  0006                     	;# 
   883  0007                     	;# 
   884  0008                     	;# 
   885  0009                     	;# 
   886  000A                     	;# 
   887  000B                     	;# 
   888  000C                     	;# 
   889  000D                     	;# 
   890  000E                     	;# 
   891  0011                     	;# 
   892  0012                     	;# 
   893  0013                     	;# 
   894  0015                     	;# 
   895  0016                     	;# 
   896  0016                     	;# 
   897  0017                     	;# 
   898  0018                     	;# 
   899  0019                     	;# 
   900  001A                     	;# 
   901  001B                     	;# 
   902  001C                     	;# 
   903  001E                     	;# 
   904  001F                     	;# 
   905  008C                     	;# 
   906  008D                     	;# 
   907  008E                     	;# 
   908  0091                     	;# 
   909  0092                     	;# 
   910  0093                     	;# 
   911  0095                     	;# 
   912  0096                     	;# 
   913  0097                     	;# 
   914  0098                     	;# 
   915  0099                     	;# 
   916  009A                     	;# 
   917  009B                     	;# 
   918  009B                     	;# 
   919  009C                     	;# 
   920  009D                     	;# 
   921  009E                     	;# 
   922  010C                     	;# 
   923  010D                     	;# 
   924  010E                     	;# 
   925  0111                     	;# 
   926  0112                     	;# 
   927  0113                     	;# 
   928  0114                     	;# 
   929  0115                     	;# 
   930  0116                     	;# 
   931  0117                     	;# 
   932  0118                     	;# 
   933  0119                     	;# 
   934  011A                     	;# 
   935  011B                     	;# 
   936  011D                     	;# 
   937  011E                     	;# 
   938  018C                     	;# 
   939  018D                     	;# 
   940  018E                     	;# 
   941  0191                     	;# 
   942  0191                     	;# 
   943  0192                     	;# 
   944  0193                     	;# 
   945  0193                     	;# 
   946  0193                     	;# 
   947  0194                     	;# 
   948  0195                     	;# 
   949  0196                     	;# 
   950  0199                     	;# 
   951  019A                     	;# 
   952  019B                     	;# 
   953  019B                     	;# 
   954  019B                     	;# 
   955  019B                     	;# 
   956  019C                     	;# 
   957  019C                     	;# 
   958  019D                     	;# 
   959  019E                     	;# 
   960  019F                     	;# 
   961  020C                     	;# 
   962  020D                     	;# 
   963  020E                     	;# 
   964  0211                     	;# 
   965  0211                     	;# 
   966  0212                     	;# 
   967  0212                     	;# 
   968  0213                     	;# 
   969  0213                     	;# 
   970  0214                     	;# 
   971  0214                     	;# 
   972  0215                     	;# 
   973  0215                     	;# 
   974  0215                     	;# 
   975  0215                     	;# 
   976  0216                     	;# 
   977  0216                     	;# 
   978  0217                     	;# 
   979  0217                     	;# 
   980  0291                     	;# 
   981  0291                     	;# 
   982  0292                     	;# 
   983  0293                     	;# 
   984  0294                     	;# 
   985  0295                     	;# 
   986  0295                     	;# 
   987  0296                     	;# 
   988  0298                     	;# 
   989  0298                     	;# 
   990  0299                     	;# 
   991  029A                     	;# 
   992  029B                     	;# 
   993  029C                     	;# 
   994  029D                     	;# 
   995  029E                     	;# 
   996  029E                     	;# 
   997  0311                     	;# 
   998  0311                     	;# 
   999  0312                     	;# 
  1000  0313                     	;# 
  1001  0318                     	;# 
  1002  0318                     	;# 
  1003  0319                     	;# 
  1004  031A                     	;# 
  1005  038C                     	;# 
  1006  038D                     	;# 
  1007  038E                     	;# 
  1008  0391                     	;# 
  1009  0392                     	;# 
  1010  0393                     	;# 
  1011  0394                     	;# 
  1012  0395                     	;# 
  1013  0396                     	;# 
  1014  039A                     	;# 
  1015  039C                     	;# 
  1016  039D                     	;# 
  1017  039E                     	;# 
  1018  039F                     	;# 
  1019  0415                     	;# 
  1020  0416                     	;# 
  1021  0417                     	;# 
  1022  041C                     	;# 
  1023  041D                     	;# 
  1024  041E                     	;# 
  1025  0FE4                     	;# 
  1026  0FE5                     	;# 
  1027  0FE6                     	;# 
  1028  0FE7                     	;# 
  1029  0FE8                     	;# 
  1030  0FE9                     	;# 
  1031  0FEA                     	;# 
  1032  0FEB                     	;# 
  1033  0FED                     	;# 
  1034  0FEE                     	;# 
  1035  0FEF                     	;# 
  1036  0000                     	;# 
  1037  0001                     	;# 
  1038  0002                     	;# 
  1039  0003                     	;# 
  1040  0004                     	;# 
  1041  0005                     	;# 
  1042  0006                     	;# 
  1043  0007                     	;# 
  1044  0008                     	;# 
  1045  0009                     	;# 
  1046  000A                     	;# 
  1047  000B                     	;# 
  1048  000C                     	;# 
  1049  000D                     	;# 
  1050  000E                     	;# 
  1051  0011                     	;# 
  1052  0012                     	;# 
  1053  0013                     	;# 
  1054  0015                     	;# 
  1055  0016                     	;# 
  1056  0016                     	;# 
  1057  0017                     	;# 
  1058  0018                     	;# 
  1059  0019                     	;# 
  1060  001A                     	;# 
  1061  001B                     	;# 
  1062  001C                     	;# 
  1063  001E                     	;# 
  1064  001F                     	;# 
  1065  008C                     	;# 
  1066  008D                     	;# 
  1067  008E                     	;# 
  1068  0091                     	;# 
  1069  0092                     	;# 
  1070  0093                     	;# 
  1071  0095                     	;# 
  1072  0096                     	;# 
  1073  0097                     	;# 
  1074  0098                     	;# 
  1075  0099                     	;# 
  1076  009A                     	;# 
  1077  009B                     	;# 
  1078  009B                     	;# 
  1079  009C                     	;# 
  1080  009D                     	;# 
  1081  009E                     	;# 
  1082  010C                     	;# 
  1083  010D                     	;# 
  1084  010E                     	;# 
  1085  0111                     	;# 
  1086  0112                     	;# 
  1087  0113                     	;# 
  1088  0114                     	;# 
  1089  0115                     	;# 
  1090  0116                     	;# 
  1091  0117                     	;# 
  1092  0118                     	;# 
  1093  0119                     	;# 
  1094  011A                     	;# 
  1095  011B                     	;# 
  1096  011D                     	;# 
  1097  011E                     	;# 
  1098  018C                     	;# 
  1099  018D                     	;# 
  1100  018E                     	;# 
  1101  0191                     	;# 
  1102  0191                     	;# 
  1103  0192                     	;# 
  1104  0193                     	;# 
  1105  0193                     	;# 
  1106  0193                     	;# 
  1107  0194                     	;# 
  1108  0195                     	;# 
  1109  0196                     	;# 
  1110  0199                     	;# 
  1111  019A                     	;# 
  1112  019B                     	;# 
  1113  019B                     	;# 
  1114  019B                     	;# 
  1115  019B                     	;# 
  1116  019C                     	;# 
  1117  019C                     	;# 
  1118  019D                     	;# 
  1119  019E                     	;# 
  1120  019F                     	;# 
  1121  020C                     	;# 
  1122  020D                     	;# 
  1123  020E                     	;# 
  1124  0211                     	;# 
  1125  0211                     	;# 
  1126  0212                     	;# 
  1127  0212                     	;# 
  1128  0213                     	;# 
  1129  0213                     	;# 
  1130  0214                     	;# 
  1131  0214                     	;# 
  1132  0215                     	;# 
  1133  0215                     	;# 
  1134  0215                     	;# 
  1135  0215                     	;# 
  1136  0216                     	;# 
  1137  0216                     	;# 
  1138  0217                     	;# 
  1139  0217                     	;# 
  1140  0291                     	;# 
  1141  0291                     	;# 
  1142  0292                     	;# 
  1143  0293                     	;# 
  1144  0294                     	;# 
  1145  0295                     	;# 
  1146  0295                     	;# 
  1147  0296                     	;# 
  1148  0298                     	;# 
  1149  0298                     	;# 
  1150  0299                     	;# 
  1151  029A                     	;# 
  1152  029B                     	;# 
  1153  029C                     	;# 
  1154  029D                     	;# 
  1155  029E                     	;# 
  1156  029E                     	;# 
  1157  0311                     	;# 
  1158  0311                     	;# 
  1159  0312                     	;# 
  1160  0313                     	;# 
  1161  0318                     	;# 
  1162  0318                     	;# 
  1163  0319                     	;# 
  1164  031A                     	;# 
  1165  038C                     	;# 
  1166  038D                     	;# 
  1167  038E                     	;# 
  1168  0391                     	;# 
  1169  0392                     	;# 
  1170  0393                     	;# 
  1171  0394                     	;# 
  1172  0395                     	;# 
  1173  0396                     	;# 
  1174  039A                     	;# 
  1175  039C                     	;# 
  1176  039D                     	;# 
  1177  039E                     	;# 
  1178  039F                     	;# 
  1179  0415                     	;# 
  1180  0416                     	;# 
  1181  0417                     	;# 
  1182  041C                     	;# 
  1183  041D                     	;# 
  1184  041E                     	;# 
  1185  0FE4                     	;# 
  1186  0FE5                     	;# 
  1187  0FE6                     	;# 
  1188  0FE7                     	;# 
  1189  0FE8                     	;# 
  1190  0FE9                     	;# 
  1191  0FEA                     	;# 
  1192  0FEB                     	;# 
  1193  0FED                     	;# 
  1194  0FEE                     	;# 
  1195  0FEF                     	;# 
  1196                           
  1197                           	psect	idataCOMMON
  1198  03B5                     __pidataCOMMON:	
  1199                           
  1200                           ;initializer for _timeCtrlMode
  1201  03B5  3441               	retlw	65
  1202                           
  1203                           	psect	idataBANK0
  1204  037B                     __pidataBANK0:	
  1205                           
  1206                           ;initializer for _IQRPreSta
  1207  037B  3403               	retlw	3
  1208  037C  3403               	retlw	3
  1209  037D  3403               	retlw	3
  1210  037E  3403               	retlw	3
  1211  037F  3403               	retlw	3
  1212  0380  3403               	retlw	3
  1213  0381  3403               	retlw	3
  1214  0382  3403               	retlw	3
  1215                           
  1216                           	psect	nvBANK0
  1217  005F                     __pnvBANK0:	
  1218  005F                     _TMR0_InterruptHandler:	
  1219  005F                     	ds	2
  1220  0061                     _EUSART_RxDefaultInterruptHandler:	
  1221  0061                     	ds	2
  1222  0063                     _timer0ReloadVal:	
  1223  0063                     	ds	1
  1224  000C                     _PORTAbits	set	12
  1225  0015                     _TMR0	set	21
  1226  0011                     _PIR1bits	set	17
  1227  000B                     _INTCONbits	set	11
  1228  000D                     _PORTBbits	set	13
  1229  0095                     _OPTION_REG	set	149
  1230  0091                     _PIE1bits	set	145
  1231  0095                     _OPTION_REGbits	set	149
  1232  008E                     _TRISC	set	142
  1233  008D                     _TRISB	set	141
  1234  008C                     _TRISA	set	140
  1235  0097                     _WDTCON	set	151
  1236  0098                     _OSCTUNE	set	152
  1237  0099                     _OSCCON	set	153
  1238  010C                     _LATAbits	set	268
  1239  011E                     _APFCON1	set	286
  1240  011D                     _APFCON0	set	285
  1241  010E                     _LATC	set	270
  1242  010D                     _LATB	set	269
  1243  010C                     _LATA	set	268
  1244  0116                     _BORCON	set	278
  1245  0199                     _RCREG	set	409
  1246  019D                     _RCSTAbits	set	413
  1247  019C                     _SPBRGH	set	412
  1248  019B                     _SPBRGL	set	411
  1249  019E                     _TXSTA	set	414
  1250  019D                     _RCSTA	set	413
  1251  019F                     _BAUDCON	set	415
  1252  018C                     _ANSELA	set	396
  1253  018D                     _ANSELB	set	397
  1254  018E                     _ANSELC	set	398
  1255  020E                     _WPUC	set	526
  1256  020C                     _WPUA	set	524
  1257  020D                     _WPUB	set	525
  1258                           
  1259                           ; #config settings
  1260  0000                     
  1261                           	psect	cinit
  1262  0029                     start_initialization:	
  1263  0029                     __initialization:	
  1264                           
  1265                           ; Initialize objects allocated to COMMON
  1266  0029  3183  23B5  3180   	fcall	__pidataCOMMON	;fetch initializer
  1267  002C  00FA               	movwf	__pdataCOMMON& (0+127)
  1268                           
  1269                           ; Initialize objects allocated to BANK0
  1270  002D  307B               	movlw	low __pidataBANK0
  1271  002E  0084               	movwf	4
  1272  002F  3083               	movlw	(high __pidataBANK0)| (0+128)
  1273  0030  0085               	movwf	5
  1274  0031  3057               	movlw	low __pdataBANK0
  1275  0032  0086               	movwf	6
  1276  0033  3000               	movlw	high __pdataBANK0
  1277  0034  0087               	movwf	7
  1278  0035  3008               	movlw	8
  1279  0036  3183  2399  3180   	fcall	init_ram
  1280                           
  1281                           ; Clear objects allocated to COMMON
  1282  0039  01F7               	clrf	__pbssCOMMON& (0+127)
  1283  003A  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
  1284  003B  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
  1285                           
  1286                           ; Clear objects allocated to BANK0
  1287  003C  3020               	movlw	low __pbssBANK0
  1288  003D  0084               	movwf	4
  1289  003E  3000               	movlw	high __pbssBANK0
  1290  003F  0085               	movwf	5
  1291  0040  302A               	movlw	42
  1292  0041  3183  239F  3180   	fcall	clear_ram0
  1293                           
  1294                           ; Clear objects allocated to BANK1
  1295  0044  30A0               	movlw	low __pbssBANK1
  1296  0045  0084               	movwf	4
  1297  0046  3000               	movlw	high __pbssBANK1
  1298  0047  0085               	movwf	5
  1299  0048  3040               	movlw	64
  1300  0049  3183  239F  3180   	fcall	clear_ram0
  1301                           
  1302                           ; Clear objects allocated to BANK2
  1303  004C  3020               	movlw	low __pbssBANK2
  1304  004D  0084               	movwf	4
  1305  004E  3001               	movlw	high __pbssBANK2
  1306  004F  0085               	movwf	5
  1307  0050  304B               	movlw	75
  1308  0051  3183  239F         	fcall	clear_ram0
  1309  0053                     end_of_initialization:	
  1310                           ;End of C runtime variable initialization code
  1311                           
  1312  0053                     __end_of__initialization:	
  1313  0053  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1314  0054  0020               	movlb	0
  1315  0055  3181  29F0         	ljmp	_main	;jump to C main() function
  1316                           
  1317                           	psect	bssCOMMON
  1318  0077                     __pbssCOMMON:	
  1319  0077                     _timeCtrlEnableSignal:	
  1320  0077                     	ds	1
  1321  0078                     _eusartRxCount:	
  1322  0078                     	ds	1
  1323  0079                     _timeCtrlStartFlag:	
  1324  0079                     	ds	1
  1325                           
  1326                           	psect	dataCOMMON
  1327  007A                     __pdataCOMMON:	
  1328  007A                     _timeCtrlMode:	
  1329  007A                     	ds	1
  1330                           
  1331                           	psect	bssBANK0
  1332  0020                     __pbssBANK0:	
  1333  0020                     tempCtrlProcess@timeCnt:	
  1334  0020                     	ds	16
  1335  0030                     _testIQRSta:	
  1336  0030                     	ds	8
  1337  0038                     _IQRSta:	
  1338  0038                     	ds	8
  1339  0040                     _EUSART_TxDefaultInterruptHandler:	
  1340  0040                     	ds	2
  1341  0042                     _readSignalflag:	
  1342  0042                     	ds	1
  1343  0043                     TMR0_CallBack@testTimeCtrlCnt:	
  1344  0043                     	ds	1
  1345  0044                     TMR0_CallBack@preEusartRxCount:	
  1346  0044                     	ds	1
  1347  0045                     TMR0_CallBack@timeCrlCnt:	
  1348  0045                     	ds	1
  1349  0046                     TMR0_CallBack@eusartRXOvertimeCnt:	
  1350  0046                     	ds	1
  1351  0047                     _eusartRxOvertimeMask:	
  1352  0047                     	ds	1
  1353  0048                     _EusartRxLenth:	
  1354  0048                     	ds	1
  1355  0049                     _timeCtrlOvertimeMask:	
  1356  0049                     	ds	1
  1357                           
  1358                           	psect	dataBANK0
  1359  0057                     __pdataBANK0:	
  1360  0057                     _IQRPreSta:	
  1361  0057                     	ds	8
  1362                           
  1363                           	psect	bssBANK1
  1364  00A0                     __pbssBANK1:	
  1365  00A0                     _timeCtrlValue:	
  1366  00A0                     	ds	64
  1367                           
  1368                           	psect	bssBANK2
  1369  0120                     __pbssBANK2:	
  1370  0120                     _eusartRxBuffer:	
  1371  0120                     	ds	75
  1372                           
  1373                           	psect	inittext
  1374  0399                     init_ram:	
  1375  0399  00FE               	movwf	126
  1376  039A                     initloop:	
  1377  039A  0012               	moviw fsr0++
  1378  039B  001E               	movwi fsr1++
  1379  039C  0BFE               	decfsz	126,f
  1380  039D  2B9A               	goto	initloop
  1381  039E  3400               	retlw	0
  1382                           
  1383                           	psect	clrtext
  1384  039F                     clear_ram0:	
  1385                           ;	Called with FSR0 containing the base address, and
  1386                           ;	WREG with the size to clear
  1387                           
  1388  039F  0064               	clrwdt	;clear the watchdog before getting into this loop
  1389  03A0                     clrloop0:	
  1390  03A0  0180               	clrf	0	;clear RAM location pointed to by FSR
  1391  03A1  3101               	addfsr 0,1
  1392  03A2  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1393  03A3  2BA0               	goto	clrloop0	;have we reached the end yet?
  1394  03A4  3400               	retlw	0	;all done for this memory range, return
  1395                           
  1396                           	psect	cstackCOMMON
  1397  0070                     __pcstackCOMMON:	
  1398  0070                     ?_PIN_MANAGER_Initialize:	
  1399  0070                     ?_OSCILLATOR_Initialize:	
  1400                           ; 1 bytes @ 0x0
  1401                           
  1402  0070                     ?_WDT_Initialize:	
  1403                           ; 1 bytes @ 0x0
  1404                           
  1405  0070                     ?_TMR0_Initialize:	
  1406                           ; 1 bytes @ 0x0
  1407                           
  1408  0070                     ?_EUSART_Initialize:	
  1409                           ; 1 bytes @ 0x0
  1410                           
  1411  0070                     ?_TMR0_ISR:	
  1412                           ; 1 bytes @ 0x0
  1413                           
  1414  0070                     ?_TMR0_DefaultInterruptHandler:	
  1415                           ; 1 bytes @ 0x0
  1416                           
  1417  0070                     ??_TMR0_DefaultInterruptHandler:	
  1418                           ; 1 bytes @ 0x0
  1419                           
  1420  0070                     ?_TMR0_CallBack:	
  1421                           ; 1 bytes @ 0x0
  1422                           
  1423  0070                     ??_TMR0_CallBack:	
  1424                           ; 1 bytes @ 0x0
  1425                           
  1426  0070                     ?_EUSART_Receive_ISR:	
  1427                           ; 1 bytes @ 0x0
  1428                           
  1429  0070                     ??_EUSART_Receive_ISR:	
  1430                           ; 1 bytes @ 0x0
  1431                           
  1432  0070                     ?_stopTimeCtrl:	
  1433                           ; 1 bytes @ 0x0
  1434                           
  1435  0070                     ?_startTimeCtrl:	
  1436                           ; 1 bytes @ 0x0
  1437                           
  1438  0070                     ?_testTimeCtrl:	
  1439                           ; 1 bytes @ 0x0
  1440                           
  1441  0070                     ?_workTimeCtrl:	
  1442                           ; 1 bytes @ 0x0
  1443                           
  1444  0070                     ?_SYSTEM_Initialize:	
  1445                           ; 1 bytes @ 0x0
  1446                           
  1447  0070                     ?_Get_Device_Addr:	
  1448                           ; 1 bytes @ 0x0
  1449                           
  1450  0070                     ?_INTERRUPT_InterruptManager:	
  1451                           ; 1 bytes @ 0x0
  1452                           
  1453  0070                     ?_EUSART_Deal:	
  1454                           ; 1 bytes @ 0x0
  1455                           
  1456  0070                     ?_getTimeData:	
  1457                           ; 1 bytes @ 0x0
  1458                           
  1459  0070                     ?_tempCtrlProcess:	
  1460                           ; 1 bytes @ 0x0
  1461                           
  1462  0070                     ?_main:	
  1463                           ; 1 bytes @ 0x0
  1464                           
  1465                           
  1466                           ; 1 bytes @ 0x0
  1467  0070                     	ds	1
  1468  0071                     ??_TMR0_ISR:	
  1469  0071                     ??_INTERRUPT_InterruptManager:	
  1470                           ; 1 bytes @ 0x1
  1471                           
  1472                           
  1473                           ; 1 bytes @ 0x1
  1474  0071                     	ds	1
  1475  0072                     ??_PIN_MANAGER_Initialize:	
  1476  0072                     ??_OSCILLATOR_Initialize:	
  1477                           ; 1 bytes @ 0x2
  1478                           
  1479  0072                     ??_WDT_Initialize:	
  1480                           ; 1 bytes @ 0x2
  1481                           
  1482  0072                     ?_TMR0_SetInterruptHandler:	
  1483                           ; 1 bytes @ 0x2
  1484                           
  1485  0072                     ?_EUSART_SetRxInterruptHandler:	
  1486                           ; 1 bytes @ 0x2
  1487                           
  1488  0072                     ??_stopTimeCtrl:	
  1489                           ; 1 bytes @ 0x2
  1490                           
  1491  0072                     ??_testTimeCtrl:	
  1492                           ; 1 bytes @ 0x2
  1493                           
  1494  0072                     ??_workTimeCtrl:	
  1495                           ; 1 bytes @ 0x2
  1496                           
  1497  0072                     ??_Get_Device_Addr:	
  1498                           ; 1 bytes @ 0x2
  1499                           
  1500  0072                     ??_tempCtrlProcess:	
  1501                           ; 1 bytes @ 0x2
  1502                           
  1503  0072                     getTimeData@cnt:	
  1504                           ; 1 bytes @ 0x2
  1505                           
  1506  0072                     TMR0_SetInterruptHandler@InterruptHandler:	
  1507                           ; 1 bytes @ 0x2
  1508                           
  1509  0072                     EUSART_SetRxInterruptHandler@interruptHandler:	
  1510                           ; 2 bytes @ 0x2
  1511                           
  1512                           
  1513                           ; 2 bytes @ 0x2
  1514  0072                     	ds	1
  1515  0073                     Get_Device_Addr@device_addr:	
  1516  0073                     getTimeData@i:	
  1517                           ; 1 bytes @ 0x3
  1518                           
  1519                           
  1520                           ; 1 bytes @ 0x3
  1521  0073                     	ds	1
  1522  0074                     ??_TMR0_Initialize:	
  1523  0074                     ??_EUSART_Initialize:	
  1524                           ; 1 bytes @ 0x4
  1525                           
  1526  0074                     ??_TMR0_SetInterruptHandler:	
  1527                           ; 1 bytes @ 0x4
  1528                           
  1529  0074                     ??_EUSART_SetRxInterruptHandler:	
  1530                           ; 1 bytes @ 0x4
  1531                           
  1532  0074                     getTimeData@j:	
  1533                           ; 1 bytes @ 0x4
  1534                           
  1535  0074                     workTimeCtrl@i:	
  1536                           ; 1 bytes @ 0x4
  1537                           
  1538  0074                     stopTimeCtrl@i:	
  1539                           ; 1 bytes @ 0x4
  1540                           
  1541  0074                     testTimeCtrl@IQRNum:	
  1542                           ; 1 bytes @ 0x4
  1543                           
  1544  0074                     tempCtrlProcess@i:	
  1545                           ; 1 bytes @ 0x4
  1546                           
  1547                           
  1548                           ; 1 bytes @ 0x4
  1549  0074                     	ds	1
  1550  0075                     ??_startTimeCtrl:	
  1551  0075                     ??_SYSTEM_Initialize:	
  1552                           ; 1 bytes @ 0x5
  1553                           
  1554  0075                     ??_EUSART_Deal:	
  1555                           ; 1 bytes @ 0x5
  1556                           
  1557                           
  1558                           ; 1 bytes @ 0x5
  1559  0075                     	ds	2
  1560  0077                     ??_main:	
  1561                           
  1562                           	psect	cstackBANK0
  1563  004A                     __pcstackBANK0:	
  1564                           ; 1 bytes @ 0x7
  1565                           
  1566  004A                     ??_getTimeData:	
  1567                           
  1568                           ; 1 bytes @ 0x0
  1569  004A                     	ds	13
  1570                           
  1571                           	psect	maintext
  1572  01F0                     __pmaintext:	
  1573 ;;
  1574 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1575 ;;
  1576 ;; *************** function _main *****************
  1577 ;; Defined at:
  1578 ;;		line 49 in file "main.c"
  1579 ;; Parameters:    Size  Location     Type
  1580 ;;		None
  1581 ;; Auto vars:     Size  Location     Type
  1582 ;;		None
  1583 ;; Return value:  Size  Location     Type
  1584 ;;                  1    wreg      void 
  1585 ;; Registers used:
  1586 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1587 ;; Tracked objects:
  1588 ;;		On entry : B1F/0
  1589 ;;		On exit  : 0/0
  1590 ;;		Unchanged: 0/0
  1591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1592 ;;      Params:         0       0       0       0
  1593 ;;      Locals:         0       0       0       0
  1594 ;;      Temps:          0       0       0       0
  1595 ;;      Totals:         0       0       0       0
  1596 ;;Total ram usage:        0 bytes
  1597 ;; Hardware stack levels required when called:    7
  1598 ;; This function calls:
  1599 ;;		_EUSART_Deal
  1600 ;;		_SYSTEM_Initialize
  1601 ;;		_stopTimeCtrl
  1602 ;;		_tempCtrlProcess
  1603 ;; This function is called by:
  1604 ;;		Startup code after reset
  1605 ;; This function uses a non-reentrant model
  1606 ;;
  1607                           
  1608                           
  1609                           ;psect for function _main
  1610  01F0                     _main:	
  1611                           
  1612                           ;main.c: 52: SYSTEM_Initialize();
  1613                           
  1614                           ;incstack = 0
  1615                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1616  01F0  3183  235D  3181   	fcall	_SYSTEM_Initialize
  1617                           
  1618                           ;main.c: 58: (INTCONbits.GIE = 1);
  1619  01F3  178B               	bsf	11,7	;volatile
  1620                           
  1621                           ;main.c: 61: (INTCONbits.PEIE = 1);
  1622  01F4  170B               	bsf	11,6	;volatile
  1623  01F5                     l1411:	
  1624                           ;main.c: 69: while (1)
  1625                           
  1626                           
  1627                           ;main.c: 70: {
  1628                           ;main.c: 73: if(timeCtrlMode == 'A')
  1629  01F5  3041               	movlw	65
  1630  01F6  067A               	xorwf	_timeCtrlMode,w
  1631  01F7  1D03               	btfss	3,2
  1632  01F8  2A09               	goto	l1419
  1633                           
  1634                           ;main.c: 74: {
  1635                           ;main.c: 75: if(readSignalflag)
  1636  01F9  0020               	movlb	0	; select bank0
  1637  01FA  0842               	movf	_readSignalflag,w
  1638  01FB  1903               	btfsc	3,2
  1639  01FC  2A15               	goto	l344
  1640                           
  1641                           ;main.c: 76: {
  1642                           ;main.c: 77: if((timeCtrlEnableSignal = !PORTAbits.RA0))
  1643  01FD  1003               	clrc
  1644  01FE  1C0C               	btfss	12,0	;volatile
  1645  01FF  1403               	setc
  1646  0200  3000               	movlw	0
  1647  0201  1803               	btfsc	3,0
  1648  0202  3001               	movlw	1
  1649  0203  00F7               	movwf	_timeCtrlEnableSignal
  1650  0204  0877               	movf	_timeCtrlEnableSignal,w
  1651  0205  1903               	btfsc	3,2
  1652  0206  2A15               	goto	l344
  1653                           
  1654                           ;main.c: 78: {
  1655                           ;main.c: 79: readSignalflag = 0;
  1656  0207  01C2               	clrf	_readSignalflag
  1657                           
  1658                           ;main.c: 80: }
  1659                           ;main.c: 81: }
  1660                           ;main.c: 82: }
  1661  0208  2A15               	goto	l344
  1662  0209                     l1419:	
  1663                           
  1664                           ;main.c: 83: else if(timeCtrlMode == 'B')
  1665  0209  3042               	movlw	66
  1666  020A  067A               	xorwf	_timeCtrlMode,w
  1667  020B  1D03               	btfss	3,2
  1668  020C  2A15               	goto	l344
  1669                           
  1670                           ;main.c: 84: {
  1671                           ;main.c: 85: timeCtrlEnableSignal = !PORTAbits.RA0;
  1672  020D  1003               	clrc
  1673  020E  0020               	movlb	0	; select bank0
  1674  020F  1C0C               	btfss	12,0	;volatile
  1675  0210  1403               	setc
  1676  0211  3000               	movlw	0
  1677  0212  1803               	btfsc	3,0
  1678  0213  3001               	movlw	1
  1679  0214  00F7               	movwf	_timeCtrlEnableSignal
  1680  0215                     l344:	
  1681                           
  1682                           ;main.c: 86: }
  1683                           ;main.c: 88: if (eusartRxOvertimeMask)
  1684  0215  0020               	movlb	0	; select bank0
  1685  0216  0847               	movf	_eusartRxOvertimeMask,w
  1686  0217  1903               	btfsc	3,2
  1687  0218  2A1D               	goto	l1427
  1688                           
  1689                           ;main.c: 89: {
  1690                           ;main.c: 90: eusartRxOvertimeMask = 0;
  1691  0219  01C7               	clrf	_eusartRxOvertimeMask
  1692                           
  1693                           ;main.c: 91: EUSART_Deal();
  1694  021A  3181  21A0  3181   	fcall	_EUSART_Deal
  1695  021D                     l1427:	
  1696                           
  1697                           ;main.c: 92: }
  1698                           ;main.c: 94: if(timeCtrlOvertimeMask)
  1699  021D  0020               	movlb	0	; select bank0
  1700  021E  0849               	movf	_timeCtrlOvertimeMask,w
  1701  021F  1903               	btfsc	3,2
  1702  0220  29F5               	goto	l1411
  1703                           
  1704                           ;main.c: 95: {
  1705                           ;main.c: 96: if(timeCtrlEnableSignal && (timeCtrlStartFlag == 1))
  1706  0221  0877               	movf	_timeCtrlEnableSignal,w
  1707  0222  1903               	btfsc	3,2
  1708  0223  2A2F               	goto	l1437
  1709  0224  0379               	decf	_timeCtrlStartFlag,w
  1710  0225  1D03               	btfss	3,2
  1711  0226  2A2F               	goto	l1437
  1712                           
  1713                           ;main.c: 97: {
  1714                           ;main.c: 98: do { LATAbits.LATA2 = 0; } while(0);
  1715  0227  0022               	movlb	2	; select bank2
  1716  0228  110C               	bcf	12,2	;volatile
  1717                           
  1718                           ;main.c: 99: tempCtrlProcess();
  1719  0229  3180  2057  3181   	fcall	_tempCtrlProcess
  1720                           
  1721                           ;main.c: 100: timeCtrlOvertimeMask = 0;
  1722  022C  0020               	movlb	0	; select bank0
  1723  022D  01C9               	clrf	_timeCtrlOvertimeMask
  1724                           
  1725                           ;main.c: 101: }
  1726  022E  29F5               	goto	l1411
  1727  022F                     l1437:	
  1728                           
  1729                           ;main.c: 102: else if(!timeCtrlEnableSignal && (timeCtrlStartFlag == 1))
  1730  022F  0877               	movf	_timeCtrlEnableSignal,w
  1731  0230  1D03               	btfss	3,2
  1732  0231  29F5               	goto	l1411
  1733  0232  0379               	decf	_timeCtrlStartFlag,w
  1734  0233  1D03               	btfss	3,2
  1735  0234  29F5               	goto	l1411
  1736                           
  1737                           ;main.c: 103: {
  1738                           ;main.c: 104: stopTimeCtrl();
  1739  0235  3182  22A7  3181   	fcall	_stopTimeCtrl
  1740                           
  1741                           ;main.c: 105: timeCtrlStartFlag = 1;
  1742  0238  01F9               	clrf	_timeCtrlStartFlag
  1743  0239  0AF9               	incf	_timeCtrlStartFlag,f
  1744                           
  1745                           ;main.c: 106: readSignalflag = 1;
  1746  023A  0020               	movlb	0	; select bank0
  1747  023B  01C2               	clrf	_readSignalflag
  1748  023C  0AC2               	incf	_readSignalflag,f
  1749  023D  29F5               	goto	l1411
  1750  023E                     __end_of_main:	
  1751                           
  1752                           	psect	text1
  1753  0057                     __ptext1:	
  1754 ;; *************** function _tempCtrlProcess *****************
  1755 ;; Defined at:
  1756 ;;		line 117 in file "mcc_generated_files/time_ctrl.c"
  1757 ;; Parameters:    Size  Location     Type
  1758 ;;		None
  1759 ;; Auto vars:     Size  Location     Type
  1760 ;;  i               1    4[COMMON] unsigned char 
  1761 ;; Return value:  Size  Location     Type
  1762 ;;                  1    wreg      void 
  1763 ;; Registers used:
  1764 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  1765 ;; Tracked objects:
  1766 ;;		On entry : 0/0
  1767 ;;		On exit  : 0/0
  1768 ;;		Unchanged: 0/0
  1769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1770 ;;      Params:         0       0       0       0
  1771 ;;      Locals:         1       0       0       0
  1772 ;;      Temps:          2       0       0       0
  1773 ;;      Totals:         3       0       0       0
  1774 ;;Total ram usage:        3 bytes
  1775 ;; Hardware stack levels used:    1
  1776 ;; Hardware stack levels required when called:    4
  1777 ;; This function calls:
  1778 ;;		Nothing
  1779 ;; This function is called by:
  1780 ;;		_main
  1781 ;; This function uses a non-reentrant model
  1782 ;;
  1783                           
  1784                           
  1785                           ;psect for function _tempCtrlProcess
  1786  0057                     _tempCtrlProcess:	
  1787                           
  1788                           ;time_ctrl.c: 119: uint8_t i;
  1789                           ;time_ctrl.c: 120: static uint16_t timeCnt[8] = {0};
  1790                           ;time_ctrl.c: 122: for(i=0; i<8; i++)
  1791                           
  1792                           ;incstack = 0
  1793                           ; Regs used in _tempCtrlProcess: [wreg-fsr1h+status,2+status,0]
  1794  0057  01F4               	clrf	tempCtrlProcess@i
  1795  0058                     L1:	
  1796  0058  3008               	movlw	8
  1797  0059  0274               	subwf	tempCtrlProcess@i,w
  1798  005A  1803               	btfsc	3,0
  1799  005B  0008               	return
  1800                           
  1801                           ;time_ctrl.c: 123: {
  1802                           ;time_ctrl.c: 124: if(IQRPreSta[i] != IQRSta[i])
  1803  005C  0874               	movf	tempCtrlProcess@i,w
  1804  005D  3E38               	addlw	(low (_IQRSta| 0))& (0+255)
  1805  005E  0086               	movwf	6
  1806  005F  0187               	clrf	7
  1807  0060  0874               	movf	tempCtrlProcess@i,w
  1808  0061  3E57               	addlw	(low (_IQRPreSta| 0))& (0+255)
  1809  0062  0084               	movwf	4
  1810  0063  0185               	clrf	5
  1811  0064  0800               	movf	0,w
  1812  0065  0601               	xorwf	1,w
  1813  0066  1D03               	btfss	3,2
  1814  0067  28BC               	goto	l1365
  1815  0068  28DA               	goto	l291
  1816  0069                     l1355:	
  1817                           ;time_ctrl.c: 127: {
  1818                           ;time_ctrl.c: 128: case 0: timeCnt[i] = timeCtrlValue[i][0]; break;
  1819                           
  1820                           ;time_ctrl.c: 125: {
  1821                           ;time_ctrl.c: 126: switch(IQRSta[i])
  1822                           
  1823  0069  0874               	movf	tempCtrlProcess@i,w
  1824  006A  00F2               	movwf	??_tempCtrlProcess
  1825  006B  3002               	movlw	2
  1826  006C                     u895:	
  1827  006C  35F2               	lslf	??_tempCtrlProcess,f
  1828  006D  3EFF               	addlw	-1
  1829  006E  1D03               	skipz
  1830  006F  286C               	goto	u895
  1831  0070  3572               	lslf	??_tempCtrlProcess,w
  1832  0071  3EA0               	addlw	(low (_timeCtrlValue| 0))& (0+255)
  1833  0072  0086               	movwf	6
  1834  0073  0187               	clrf	7
  1835  0074  3574               	lslf	tempCtrlProcess@i,w
  1836  0075  3E20               	addlw	(low (tempCtrlProcess@timeCnt| 0))& (0+255)
  1837  0076  0084               	movwf	4
  1838  0077  0185               	clrf	5
  1839  0078  3F40               	moviw [0]fsr1
  1840  0079  3F80               	movwi [0]fsr0
  1841  007A  3F41               	moviw [1]fsr1
  1842  007B  3F81               	movwi [1]fsr0
  1843  007C  28CE               	goto	l1367
  1844  007D                     l1357:	
  1845                           ;time_ctrl.c: 129: case 1: timeCnt[i] = timeCtrlValue[i][1]; break;
  1846                           
  1847  007D  0874               	movf	tempCtrlProcess@i,w
  1848  007E  00F2               	movwf	??_tempCtrlProcess
  1849  007F  3002               	movlw	2
  1850  0080                     u905:	
  1851  0080  35F2               	lslf	??_tempCtrlProcess,f
  1852  0081  3EFF               	addlw	-1
  1853  0082  1D03               	skipz
  1854  0083  2880               	goto	u905
  1855  0084  3572               	lslf	??_tempCtrlProcess,w
  1856  0085  3E02               	addlw	2
  1857  0086  3EA0               	addlw	(low (_timeCtrlValue| 0))& (0+255)
  1858  0087  0086               	movwf	6
  1859  0088  0187               	clrf	7
  1860  0089  3574               	lslf	tempCtrlProcess@i,w
  1861  008A  3E20               	addlw	(low (tempCtrlProcess@timeCnt| 0))& (0+255)
  1862  008B  0084               	movwf	4
  1863  008C  0185               	clrf	5
  1864  008D  3F40               	moviw [0]fsr1
  1865  008E  3F80               	movwi [0]fsr0
  1866  008F  3F41               	moviw [1]fsr1
  1867  0090  3F81               	movwi [1]fsr0
  1868  0091  28CE               	goto	l1367
  1869  0092                     l1359:	
  1870                           ;time_ctrl.c: 130: case 2: timeCnt[i] = timeCtrlValue[i][2]; break;
  1871                           
  1872  0092  0874               	movf	tempCtrlProcess@i,w
  1873  0093  00F2               	movwf	??_tempCtrlProcess
  1874  0094  3002               	movlw	2
  1875  0095                     u915:	
  1876  0095  35F2               	lslf	??_tempCtrlProcess,f
  1877  0096  3EFF               	addlw	-1
  1878  0097  1D03               	skipz
  1879  0098  2895               	goto	u915
  1880  0099  3572               	lslf	??_tempCtrlProcess,w
  1881  009A  3E04               	addlw	4
  1882  009B  3EA0               	addlw	(low (_timeCtrlValue| 0))& (0+255)
  1883  009C  0086               	movwf	6
  1884  009D  0187               	clrf	7
  1885  009E  3574               	lslf	tempCtrlProcess@i,w
  1886  009F  3E20               	addlw	(low (tempCtrlProcess@timeCnt| 0))& (0+255)
  1887  00A0  0084               	movwf	4
  1888  00A1  0185               	clrf	5
  1889  00A2  3F40               	moviw [0]fsr1
  1890  00A3  3F80               	movwi [0]fsr0
  1891  00A4  3F41               	moviw [1]fsr1
  1892  00A5  3F81               	movwi [1]fsr0
  1893  00A6  28CE               	goto	l1367
  1894  00A7                     l1361:	
  1895                           ;time_ctrl.c: 131: case 3: timeCnt[i] = timeCtrlValue[i][3]; break;
  1896                           
  1897  00A7  0874               	movf	tempCtrlProcess@i,w
  1898  00A8  00F2               	movwf	??_tempCtrlProcess
  1899  00A9  3002               	movlw	2
  1900  00AA                     u925:	
  1901  00AA  35F2               	lslf	??_tempCtrlProcess,f
  1902  00AB  3EFF               	addlw	-1
  1903  00AC  1D03               	skipz
  1904  00AD  28AA               	goto	u925
  1905  00AE  3572               	lslf	??_tempCtrlProcess,w
  1906  00AF  3E06               	addlw	6
  1907  00B0  3EA0               	addlw	(low (_timeCtrlValue| 0))& (0+255)
  1908  00B1  0086               	movwf	6
  1909  00B2  0187               	clrf	7
  1910  00B3  3574               	lslf	tempCtrlProcess@i,w
  1911  00B4  3E20               	addlw	(low (tempCtrlProcess@timeCnt| 0))& (0+255)
  1912  00B5  0084               	movwf	4
  1913  00B6  0185               	clrf	5
  1914  00B7  3F40               	moviw [0]fsr1
  1915  00B8  3F80               	movwi [0]fsr0
  1916  00B9  3F41               	moviw [1]fsr1
  1917  00BA  3F81               	movwi [1]fsr0
  1918                           
  1919                           ;time_ctrl.c: 133: }
  1920                           
  1921                           ;time_ctrl.c: 132: default: break;
  1922  00BB  28CE               	goto	l1367
  1923  00BC                     l1365:	
  1924  00BC  0874               	movf	tempCtrlProcess@i,w
  1925  00BD  3E38               	addlw	(low (_IQRSta| 0))& (0+255)
  1926  00BE  0086               	movwf	6
  1927  00BF  0187               	clrf	7
  1928  00C0  0801               	movf	1,w
  1929                           
  1930                           ; Switch size 1, requested type "space"
  1931                           ; Number of cases is 4, Range of values is 0 to 3
  1932                           ; switch strategies available:
  1933                           ; Name         Instructions Cycles
  1934                           ; simple_byte           13     7 (average)
  1935                           ; direct_byte           14     6 (fixed)
  1936                           ; jumptable            260     6 (fixed)
  1937                           ;	Chosen strategy is simple_byte
  1938  00C1  3A00               	xorlw	0	; case 0
  1939  00C2  1903               	skipnz
  1940  00C3  2869               	goto	l1355
  1941  00C4  3A01               	xorlw	1	; case 1
  1942  00C5  1903               	skipnz
  1943  00C6  287D               	goto	l1357
  1944  00C7  3A03               	xorlw	3	; case 2
  1945  00C8  1903               	skipnz
  1946  00C9  2892               	goto	l1359
  1947  00CA  3A01               	xorlw	1	; case 3
  1948  00CB  1903               	skipnz
  1949  00CC  28A7               	goto	l1361
  1950  00CD  28CE               	goto	l1367
  1951  00CE                     l1367:	
  1952                           
  1953                           ;time_ctrl.c: 135: IQRPreSta[i] = IQRSta[i];
  1954  00CE  0874               	movf	tempCtrlProcess@i,w
  1955  00CF  3E38               	addlw	(low (_IQRSta| 0))& (0+255)
  1956  00D0  0086               	movwf	6
  1957  00D1  0187               	clrf	7
  1958  00D2  0801               	movf	1,w
  1959  00D3  00F2               	movwf	??_tempCtrlProcess
  1960  00D4  0874               	movf	tempCtrlProcess@i,w
  1961  00D5  3E57               	addlw	(low (_IQRPreSta| 0))& (0+255)
  1962  00D6  0086               	movwf	6
  1963  00D7  0187               	clrf	7
  1964  00D8  0872               	movf	??_tempCtrlProcess,w
  1965  00D9  0081               	movwf	1
  1966  00DA                     l291:	
  1967                           
  1968                           ;time_ctrl.c: 136: }
  1969                           ;time_ctrl.c: 138: if(--timeCnt[i] == 0)
  1970  00DA  3574               	lslf	tempCtrlProcess@i,w
  1971  00DB  3E20               	addlw	(low (tempCtrlProcess@timeCnt| 0))& (0+255)
  1972  00DC  0086               	movwf	6
  1973  00DD  0187               	clrf	7
  1974  00DE  3001               	movlw	1
  1975  00DF  0281               	subwf	1,f
  1976  00E0  3141               	addfsr 1,1
  1977  00E1  3000               	movlw	0
  1978  00E2  3B81               	subwfb	1,f
  1979  00E3  317F               	addfsr 1,-1
  1980  00E4  0016               	moviw fsr1++
  1981  00E5  0401               	iorwf	1,w
  1982  00E6  1D03               	btfss	3,2
  1983  00E7  2929               	goto	l1385
  1984                           
  1985                           ;time_ctrl.c: 139: {
  1986                           ;time_ctrl.c: 140: if(IQRSta[i]%2 == 0)
  1987  00E8  0874               	movf	tempCtrlProcess@i,w
  1988  00E9  3E38               	addlw	(low (_IQRSta| 0))& (0+255)
  1989  00EA  0086               	movwf	6
  1990  00EB  0187               	clrf	7
  1991  00EC  1801               	btfsc	1,0
  1992  00ED  28FB               	goto	l1373
  1993                           
  1994                           ;time_ctrl.c: 141: {
  1995                           ;time_ctrl.c: 142: LATC |= 1 << i;
  1996  00EE  3001               	movlw	1
  1997  00EF  00F2               	movwf	??_tempCtrlProcess
  1998  00F0  0A74               	incf	tempCtrlProcess@i,w
  1999  00F1  28F3               	goto	u954
  2000  00F2                     u955:	
  2001  00F2  35F2               	lslf	??_tempCtrlProcess,f
  2002  00F3                     u954:	
  2003  00F3  0B89               	decfsz	9,f
  2004  00F4  28F2               	goto	u955
  2005  00F5  0872               	movf	??_tempCtrlProcess,w
  2006  00F6  00F3               	movwf	??_tempCtrlProcess+1
  2007  00F7  0873               	movf	??_tempCtrlProcess+1,w
  2008  00F8  0022               	movlb	2	; select bank2
  2009  00F9  048E               	iorwf	14,f	;volatile
  2010                           
  2011                           ;time_ctrl.c: 143: }
  2012  00FA  290E               	goto	l1377
  2013  00FB                     l1373:	
  2014                           
  2015                           ;time_ctrl.c: 144: else if(IQRSta[i]%2 == 1)
  2016  00FB  0874               	movf	tempCtrlProcess@i,w
  2017  00FC  3E38               	addlw	(low (_IQRSta| 0))& (0+255)
  2018  00FD  0086               	movwf	6
  2019  00FE  0187               	clrf	7
  2020  00FF  1C01               	btfss	1,0
  2021  0100  290E               	goto	l1377
  2022                           
  2023                           ;time_ctrl.c: 145: {
  2024                           ;time_ctrl.c: 146: LATC &= ~(1<<i);
  2025  0101  3001               	movlw	1
  2026  0102  00F2               	movwf	??_tempCtrlProcess
  2027  0103  0A74               	incf	tempCtrlProcess@i,w
  2028  0104  2906               	goto	u974
  2029  0105                     u975:	
  2030  0105  35F2               	lslf	??_tempCtrlProcess,f
  2031  0106                     u974:	
  2032  0106  0B89               	decfsz	9,f
  2033  0107  2905               	goto	u975
  2034  0108  0872               	movf	??_tempCtrlProcess,w
  2035  0109  3AFF               	xorlw	255
  2036  010A  00F3               	movwf	??_tempCtrlProcess+1
  2037  010B  0873               	movf	??_tempCtrlProcess+1,w
  2038  010C  0022               	movlb	2	; select bank2
  2039  010D  058E               	andwf	14,f	;volatile
  2040  010E                     l1377:	
  2041                           
  2042                           ;time_ctrl.c: 147: }
  2043                           ;time_ctrl.c: 149: if(++IQRSta[i] >= 4)
  2044  010E  3001               	movlw	1
  2045  010F  00F2               	movwf	??_tempCtrlProcess
  2046  0110  0874               	movf	tempCtrlProcess@i,w
  2047  0111  3E38               	addlw	(low (_IQRSta| 0))& (0+255)
  2048  0112  0086               	movwf	6
  2049  0113  0187               	clrf	7
  2050  0114  0872               	movf	??_tempCtrlProcess,w
  2051  0115  0781               	addwf	1,f
  2052  0116  3004               	movlw	4
  2053  0117  0201               	subwf	1,w
  2054  0118  1C03               	skipc
  2055  0119  2929               	goto	l1385
  2056                           
  2057                           ;time_ctrl.c: 150: {
  2058                           ;time_ctrl.c: 151: IQRSta[i] = 3;
  2059  011A  3003               	movlw	3
  2060  011B  00F2               	movwf	??_tempCtrlProcess
  2061  011C  0874               	movf	tempCtrlProcess@i,w
  2062  011D  3E38               	addlw	(low (_IQRSta| 0))& (0+255)
  2063  011E  0086               	movwf	6
  2064  011F  0187               	clrf	7
  2065  0120  0872               	movf	??_tempCtrlProcess,w
  2066  0121  0081               	movwf	1
  2067                           
  2068                           ;time_ctrl.c: 152: if(timeCtrlMode == 'A')
  2069  0122  3041               	movlw	65
  2070  0123  067A               	xorwf	_timeCtrlMode,w
  2071  0124  1D03               	btfss	3,2
  2072  0125  2929               	goto	l1385
  2073                           
  2074                           ;time_ctrl.c: 153: {
  2075                           ;time_ctrl.c: 154: readSignalflag = 1;
  2076  0126  0020               	movlb	0	; select bank0
  2077  0127  01C2               	clrf	_readSignalflag
  2078  0128  0AC2               	incf	_readSignalflag,f
  2079  0129                     l1385:	
  2080  0129  3001               	movlw	1
  2081  012A  00F2               	movwf	??_tempCtrlProcess
  2082  012B  0872               	movf	??_tempCtrlProcess,w
  2083  012C  07F4               	addwf	tempCtrlProcess@i,f
  2084  012D  2858               	goto	L1
  2085  012E                     __end_of_tempCtrlProcess:	
  2086                           
  2087                           	psect	text2
  2088  035D                     __ptext2:	
  2089 ;; *************** function _SYSTEM_Initialize *****************
  2090 ;; Defined at:
  2091 ;;		line 50 in file "mcc_generated_files/mcc.c"
  2092 ;; Parameters:    Size  Location     Type
  2093 ;;		None
  2094 ;; Auto vars:     Size  Location     Type
  2095 ;;		None
  2096 ;; Return value:  Size  Location     Type
  2097 ;;                  1    wreg      void 
  2098 ;; Registers used:
  2099 ;;		wreg, status,2, status,0, pclath, cstack
  2100 ;; Tracked objects:
  2101 ;;		On entry : 0/0
  2102 ;;		On exit  : 0/0
  2103 ;;		Unchanged: 0/0
  2104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2105 ;;      Params:         0       0       0       0
  2106 ;;      Locals:         0       0       0       0
  2107 ;;      Temps:          0       0       0       0
  2108 ;;      Totals:         0       0       0       0
  2109 ;;Total ram usage:        0 bytes
  2110 ;; Hardware stack levels used:    1
  2111 ;; Hardware stack levels required when called:    6
  2112 ;; This function calls:
  2113 ;;		_EUSART_Initialize
  2114 ;;		_OSCILLATOR_Initialize
  2115 ;;		_PIN_MANAGER_Initialize
  2116 ;;		_TMR0_Initialize
  2117 ;;		_WDT_Initialize
  2118 ;; This function is called by:
  2119 ;;		_main
  2120 ;; This function uses a non-reentrant model
  2121 ;;
  2122                           
  2123                           
  2124                           ;psect for function _SYSTEM_Initialize
  2125  035D                     _SYSTEM_Initialize:	
  2126                           
  2127                           ;mcc.c: 52: PIN_MANAGER_Initialize();
  2128                           
  2129                           ;incstack = 0
  2130                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2131  035D  3183  2300  3183   	fcall	_PIN_MANAGER_Initialize
  2132                           
  2133                           ;mcc.c: 53: OSCILLATOR_Initialize();
  2134  0360  3183  238B  3183   	fcall	_OSCILLATOR_Initialize
  2135                           
  2136                           ;mcc.c: 54: WDT_Initialize();
  2137  0363  3183  23B1  3183   	fcall	_WDT_Initialize
  2138                           
  2139                           ;mcc.c: 55: TMR0_Initialize();
  2140  0366  3183  2335  3183   	fcall	_TMR0_Initialize
  2141                           
  2142                           ;mcc.c: 56: EUSART_Initialize();
  2143  0369  3183  231C         	fcall	_EUSART_Initialize
  2144  036B  0008               	return
  2145  036C                     __end_of_SYSTEM_Initialize:	
  2146                           
  2147                           	psect	text3
  2148  03B1                     __ptext3:	
  2149 ;; *************** function _WDT_Initialize *****************
  2150 ;; Defined at:
  2151 ;;		line 69 in file "mcc_generated_files/mcc.c"
  2152 ;; Parameters:    Size  Location     Type
  2153 ;;		None
  2154 ;; Auto vars:     Size  Location     Type
  2155 ;;		None
  2156 ;; Return value:  Size  Location     Type
  2157 ;;                  1    wreg      void 
  2158 ;; Registers used:
  2159 ;;		wreg
  2160 ;; Tracked objects:
  2161 ;;		On entry : 0/0
  2162 ;;		On exit  : 0/0
  2163 ;;		Unchanged: 0/0
  2164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2165 ;;      Params:         0       0       0       0
  2166 ;;      Locals:         0       0       0       0
  2167 ;;      Temps:          0       0       0       0
  2168 ;;      Totals:         0       0       0       0
  2169 ;;Total ram usage:        0 bytes
  2170 ;; Hardware stack levels used:    1
  2171 ;; Hardware stack levels required when called:    4
  2172 ;; This function calls:
  2173 ;;		Nothing
  2174 ;; This function is called by:
  2175 ;;		_SYSTEM_Initialize
  2176 ;; This function uses a non-reentrant model
  2177 ;;
  2178                           
  2179                           
  2180                           ;psect for function _WDT_Initialize
  2181  03B1                     _WDT_Initialize:	
  2182                           
  2183                           ;mcc.c: 72: WDTCON = 0x16;
  2184                           
  2185                           ;incstack = 0
  2186                           ; Regs used in _WDT_Initialize: [wreg]
  2187  03B1  3016               	movlw	22
  2188  03B2  0021               	movlb	1	; select bank1
  2189  03B3  0097               	movwf	23	;volatile
  2190  03B4  0008               	return
  2191  03B5                     __end_of_WDT_Initialize:	
  2192                           
  2193                           	psect	text4
  2194  0335                     __ptext4:	
  2195 ;; *************** function _TMR0_Initialize *****************
  2196 ;; Defined at:
  2197 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  2198 ;; Parameters:    Size  Location     Type
  2199 ;;		None
  2200 ;; Auto vars:     Size  Location     Type
  2201 ;;		None
  2202 ;; Return value:  Size  Location     Type
  2203 ;;                  1    wreg      void 
  2204 ;; Registers used:
  2205 ;;		wreg, status,2, status,0, pclath, cstack
  2206 ;; Tracked objects:
  2207 ;;		On entry : 0/0
  2208 ;;		On exit  : 0/0
  2209 ;;		Unchanged: 0/0
  2210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2211 ;;      Params:         0       0       0       0
  2212 ;;      Locals:         0       0       0       0
  2213 ;;      Temps:          1       0       0       0
  2214 ;;      Totals:         1       0       0       0
  2215 ;;Total ram usage:        1 bytes
  2216 ;; Hardware stack levels used:    1
  2217 ;; Hardware stack levels required when called:    5
  2218 ;; This function calls:
  2219 ;;		_TMR0_SetInterruptHandler
  2220 ;; This function is called by:
  2221 ;;		_SYSTEM_Initialize
  2222 ;; This function uses a non-reentrant model
  2223 ;;
  2224                           
  2225                           
  2226                           ;psect for function _TMR0_Initialize
  2227  0335                     _TMR0_Initialize:	
  2228                           
  2229                           ;tmr0.c: 69: OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | 0xD4 & 0x3F);
  2230                           
  2231                           ;incstack = 0
  2232                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2233  0335  0021               	movlb	1	; select bank1
  2234  0336  0815               	movf	21,w	;volatile
  2235  0337  39C0               	andlw	192
  2236  0338  3814               	iorlw	20
  2237  0339  0095               	movwf	21	;volatile
  2238                           
  2239                           ;tmr0.c: 72: TMR0 = 0x83;
  2240  033A  3083               	movlw	131
  2241  033B  0020               	movlb	0	; select bank0
  2242  033C  0095               	movwf	21	;volatile
  2243                           
  2244                           ;tmr0.c: 75: timer0ReloadVal= 131;
  2245  033D  3083               	movlw	131
  2246  033E  00F4               	movwf	??_TMR0_Initialize
  2247  033F  0874               	movf	??_TMR0_Initialize,w
  2248  0340  00E3               	movwf	_timer0ReloadVal	;volatile
  2249                           
  2250                           ;tmr0.c: 78: INTCONbits.TMR0IF = 0;
  2251  0341  110B               	bcf	11,2	;volatile
  2252                           
  2253                           ;tmr0.c: 81: INTCONbits.TMR0IE = 1;
  2254  0342  168B               	bsf	11,5	;volatile
  2255                           
  2256                           ;tmr0.c: 84: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  2257  0343  30B6               	movlw	low _TMR0_DefaultInterruptHandler
  2258  0344  00F2               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  2259  0345  3003               	movlw	high _TMR0_DefaultInterruptHandler
  2260  0346  00F3               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  2261  0347  3183  23A5         	fcall	_TMR0_SetInterruptHandler
  2262  0349  0008               	return
  2263  034A                     __end_of_TMR0_Initialize:	
  2264                           
  2265                           	psect	text5
  2266  03A5                     __ptext5:	
  2267 ;; *************** function _TMR0_SetInterruptHandler *****************
  2268 ;; Defined at:
  2269 ;;		line 176 in file "mcc_generated_files/tmr0.c"
  2270 ;; Parameters:    Size  Location     Type
  2271 ;;  InterruptHan    2    2[COMMON] PTR FTN()void 
  2272 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  2273 ;; Auto vars:     Size  Location     Type
  2274 ;;		None
  2275 ;; Return value:  Size  Location     Type
  2276 ;;                  1    wreg      void 
  2277 ;; Registers used:
  2278 ;;		wreg
  2279 ;; Tracked objects:
  2280 ;;		On entry : 0/0
  2281 ;;		On exit  : 0/0
  2282 ;;		Unchanged: 0/0
  2283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2284 ;;      Params:         2       0       0       0
  2285 ;;      Locals:         0       0       0       0
  2286 ;;      Temps:          0       0       0       0
  2287 ;;      Totals:         2       0       0       0
  2288 ;;Total ram usage:        2 bytes
  2289 ;; Hardware stack levels used:    1
  2290 ;; Hardware stack levels required when called:    4
  2291 ;; This function calls:
  2292 ;;		Nothing
  2293 ;; This function is called by:
  2294 ;;		_TMR0_Initialize
  2295 ;; This function uses a non-reentrant model
  2296 ;;
  2297                           
  2298                           
  2299                           ;psect for function _TMR0_SetInterruptHandler
  2300  03A5                     _TMR0_SetInterruptHandler:	
  2301                           
  2302                           ;tmr0.c: 177: TMR0_InterruptHandler = InterruptHandler;
  2303                           
  2304                           ;incstack = 0
  2305                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  2306  03A5  0873               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  2307  03A6  0020               	movlb	0	; select bank0
  2308  03A7  00E0               	movwf	_TMR0_InterruptHandler+1
  2309  03A8  0872               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  2310  03A9  00DF               	movwf	_TMR0_InterruptHandler
  2311  03AA  0008               	return
  2312  03AB                     __end_of_TMR0_SetInterruptHandler:	
  2313                           
  2314                           	psect	text6
  2315  0300                     __ptext6:	
  2316 ;; *************** function _PIN_MANAGER_Initialize *****************
  2317 ;; Defined at:
  2318 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  2319 ;; Parameters:    Size  Location     Type
  2320 ;;		None
  2321 ;; Auto vars:     Size  Location     Type
  2322 ;;		None
  2323 ;; Return value:  Size  Location     Type
  2324 ;;                  1    wreg      void 
  2325 ;; Registers used:
  2326 ;;		wreg, status,2
  2327 ;; Tracked objects:
  2328 ;;		On entry : 0/0
  2329 ;;		On exit  : 0/0
  2330 ;;		Unchanged: 0/0
  2331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2332 ;;      Params:         0       0       0       0
  2333 ;;      Locals:         0       0       0       0
  2334 ;;      Temps:          0       0       0       0
  2335 ;;      Totals:         0       0       0       0
  2336 ;;Total ram usage:        0 bytes
  2337 ;; Hardware stack levels used:    1
  2338 ;; Hardware stack levels required when called:    4
  2339 ;; This function calls:
  2340 ;;		Nothing
  2341 ;; This function is called by:
  2342 ;;		_SYSTEM_Initialize
  2343 ;; This function uses a non-reentrant model
  2344 ;;
  2345                           
  2346                           
  2347                           ;psect for function _PIN_MANAGER_Initialize
  2348  0300                     _PIN_MANAGER_Initialize:	
  2349                           
  2350                           ;pin_manager.c: 62: LATA = 0x04;
  2351                           
  2352                           ;incstack = 0
  2353                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  2354  0300  3004               	movlw	4
  2355  0301  0022               	movlb	2	; select bank2
  2356  0302  008C               	movwf	12	;volatile
  2357                           
  2358                           ;pin_manager.c: 63: LATB = 0x00;
  2359  0303  018D               	clrf	13	;volatile
  2360                           
  2361                           ;pin_manager.c: 64: LATC = 0x00;
  2362  0304  018E               	clrf	14	;volatile
  2363                           
  2364                           ;pin_manager.c: 69: TRISA = 0x3B;
  2365  0305  303B               	movlw	59
  2366  0306  0021               	movlb	1	; select bank1
  2367  0307  008C               	movwf	12	;volatile
  2368                           
  2369                           ;pin_manager.c: 70: TRISB = 0xF0;
  2370  0308  30F0               	movlw	240
  2371  0309  008D               	movwf	13	;volatile
  2372                           
  2373                           ;pin_manager.c: 71: TRISC = 0x00;
  2374  030A  018E               	clrf	14	;volatile
  2375                           
  2376                           ;pin_manager.c: 76: ANSELC = 0x00;
  2377  030B  0023               	movlb	3	; select bank3
  2378  030C  018E               	clrf	14	;volatile
  2379                           
  2380                           ;pin_manager.c: 77: ANSELB = 0x00;
  2381  030D  018D               	clrf	13	;volatile
  2382                           
  2383                           ;pin_manager.c: 78: ANSELA = 0x12;
  2384  030E  3012               	movlw	18
  2385  030F  008C               	movwf	12	;volatile
  2386                           
  2387                           ;pin_manager.c: 83: WPUB = 0x50;
  2388  0310  3050               	movlw	80
  2389  0311  0024               	movlb	4	; select bank4
  2390  0312  008D               	movwf	13	;volatile
  2391                           
  2392                           ;pin_manager.c: 84: WPUA = 0x01;
  2393  0313  3001               	movlw	1
  2394  0314  008C               	movwf	12	;volatile
  2395                           
  2396                           ;pin_manager.c: 85: WPUC = 0x00;
  2397  0315  018E               	clrf	14	;volatile
  2398                           
  2399                           ;pin_manager.c: 86: OPTION_REGbits.nWPUEN = 0;
  2400  0316  0021               	movlb	1	; select bank1
  2401  0317  1395               	bcf	21,7	;volatile
  2402                           
  2403                           ;pin_manager.c: 95: APFCON0 = 0x00;
  2404  0318  0022               	movlb	2	; select bank2
  2405  0319  019D               	clrf	29	;volatile
  2406                           
  2407                           ;pin_manager.c: 96: APFCON1 = 0x00;
  2408  031A  019E               	clrf	30	;volatile
  2409  031B  0008               	return
  2410  031C                     __end_of_PIN_MANAGER_Initialize:	
  2411                           
  2412                           	psect	text7
  2413  038B                     __ptext7:	
  2414 ;; *************** function _OSCILLATOR_Initialize *****************
  2415 ;; Defined at:
  2416 ;;		line 59 in file "mcc_generated_files/mcc.c"
  2417 ;; Parameters:    Size  Location     Type
  2418 ;;		None
  2419 ;; Auto vars:     Size  Location     Type
  2420 ;;		None
  2421 ;; Return value:  Size  Location     Type
  2422 ;;                  1    wreg      void 
  2423 ;; Registers used:
  2424 ;;		wreg, status,2
  2425 ;; Tracked objects:
  2426 ;;		On entry : 0/0
  2427 ;;		On exit  : 0/0
  2428 ;;		Unchanged: 0/0
  2429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2430 ;;      Params:         0       0       0       0
  2431 ;;      Locals:         0       0       0       0
  2432 ;;      Temps:          0       0       0       0
  2433 ;;      Totals:         0       0       0       0
  2434 ;;Total ram usage:        0 bytes
  2435 ;; Hardware stack levels used:    1
  2436 ;; Hardware stack levels required when called:    4
  2437 ;; This function calls:
  2438 ;;		Nothing
  2439 ;; This function is called by:
  2440 ;;		_SYSTEM_Initialize
  2441 ;; This function uses a non-reentrant model
  2442 ;;
  2443                           
  2444                           
  2445                           ;psect for function _OSCILLATOR_Initialize
  2446  038B                     _OSCILLATOR_Initialize:	
  2447                           
  2448                           ;mcc.c: 62: OSCCON = 0x7A;
  2449                           
  2450                           ;incstack = 0
  2451                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  2452  038B  307A               	movlw	122
  2453  038C  0021               	movlb	1	; select bank1
  2454  038D  0099               	movwf	25	;volatile
  2455                           
  2456                           ;mcc.c: 64: OSCTUNE = 0x00;
  2457  038E  0198               	clrf	24	;volatile
  2458                           
  2459                           ;mcc.c: 66: BORCON = 0x00;
  2460  038F  0022               	movlb	2	; select bank2
  2461  0390  0196               	clrf	22	;volatile
  2462  0391  0008               	return
  2463  0392                     __end_of_OSCILLATOR_Initialize:	
  2464                           
  2465                           	psect	text8
  2466  031C                     __ptext8:	
  2467 ;; *************** function _EUSART_Initialize *****************
  2468 ;; Defined at:
  2469 ;;		line 74 in file "mcc_generated_files/eusart.c"
  2470 ;; Parameters:    Size  Location     Type
  2471 ;;		None
  2472 ;; Auto vars:     Size  Location     Type
  2473 ;;		None
  2474 ;; Return value:  Size  Location     Type
  2475 ;;                  1    wreg      void 
  2476 ;; Registers used:
  2477 ;;		wreg, status,2, status,0, pclath, cstack
  2478 ;; Tracked objects:
  2479 ;;		On entry : 0/0
  2480 ;;		On exit  : 0/0
  2481 ;;		Unchanged: 0/0
  2482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2483 ;;      Params:         0       0       0       0
  2484 ;;      Locals:         0       0       0       0
  2485 ;;      Temps:          0       0       0       0
  2486 ;;      Totals:         0       0       0       0
  2487 ;;Total ram usage:        0 bytes
  2488 ;; Hardware stack levels used:    1
  2489 ;; Hardware stack levels required when called:    5
  2490 ;; This function calls:
  2491 ;;		_EUSART_SetRxInterruptHandler
  2492 ;; This function is called by:
  2493 ;;		_SYSTEM_Initialize
  2494 ;; This function uses a non-reentrant model
  2495 ;;
  2496                           
  2497                           
  2498                           ;psect for function _EUSART_Initialize
  2499  031C                     _EUSART_Initialize:	
  2500                           
  2501                           ;eusart.c: 77: PIE1bits.RCIE = 0;
  2502                           
  2503                           ;incstack = 0
  2504                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2505  031C  0021               	movlb	1	; select bank1
  2506  031D  1291               	bcf	17,5	;volatile
  2507                           
  2508                           ;eusart.c: 78: EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  2509  031E  304A               	movlw	low _EUSART_Receive_ISR
  2510  031F  00F2               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  2511  0320  3003               	movlw	high _EUSART_Receive_ISR
  2512  0321  00F3               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  2513  0322  3183  23AB         	fcall	_EUSART_SetRxInterruptHandler
  2514                           
  2515                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  2516  0324  0021               	movlb	1	; select bank1
  2517  0325  1211               	bcf	17,4	;volatile
  2518                           
  2519                           ;eusart.c: 84: BAUDCON = 0x08;
  2520  0326  3008               	movlw	8
  2521  0327  0023               	movlb	3	; select bank3
  2522  0328  009F               	movwf	31	;volatile
  2523                           
  2524                           ;eusart.c: 87: RCSTA = 0x90;
  2525  0329  3090               	movlw	144
  2526  032A  009D               	movwf	29	;volatile
  2527                           
  2528                           ;eusart.c: 90: TXSTA = 0x24;
  2529  032B  3024               	movlw	36
  2530  032C  009E               	movwf	30	;volatile
  2531                           
  2532                           ;eusart.c: 93: SPBRGL = 0xA0;
  2533  032D  30A0               	movlw	160
  2534  032E  009B               	movwf	27	;volatile
  2535                           
  2536                           ;eusart.c: 96: SPBRGH = 0x01;
  2537  032F  3001               	movlw	1
  2538  0330  009C               	movwf	28	;volatile
  2539                           
  2540                           ;eusart.c: 106: eusartRxCount = 0;
  2541  0331  01F8               	clrf	_eusartRxCount
  2542                           
  2543                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  2544  0332  0021               	movlb	1	; select bank1
  2545  0333  1691               	bsf	17,5	;volatile
  2546  0334  0008               	return
  2547  0335                     __end_of_EUSART_Initialize:	
  2548                           
  2549                           	psect	text9
  2550  03AB                     __ptext9:	
  2551 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  2552 ;; Defined at:
  2553 ;;		line 223 in file "mcc_generated_files/eusart.c"
  2554 ;; Parameters:    Size  Location     Type
  2555 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  2556 ;;		 -> EUSART_Receive_ISR(1), 
  2557 ;; Auto vars:     Size  Location     Type
  2558 ;;		None
  2559 ;; Return value:  Size  Location     Type
  2560 ;;                  1    wreg      void 
  2561 ;; Registers used:
  2562 ;;		wreg
  2563 ;; Tracked objects:
  2564 ;;		On entry : 0/0
  2565 ;;		On exit  : 0/0
  2566 ;;		Unchanged: 0/0
  2567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2568 ;;      Params:         2       0       0       0
  2569 ;;      Locals:         0       0       0       0
  2570 ;;      Temps:          0       0       0       0
  2571 ;;      Totals:         2       0       0       0
  2572 ;;Total ram usage:        2 bytes
  2573 ;; Hardware stack levels used:    1
  2574 ;; Hardware stack levels required when called:    4
  2575 ;; This function calls:
  2576 ;;		Nothing
  2577 ;; This function is called by:
  2578 ;;		_EUSART_Initialize
  2579 ;; This function uses a non-reentrant model
  2580 ;;
  2581                           
  2582                           
  2583                           ;psect for function _EUSART_SetRxInterruptHandler
  2584  03AB                     _EUSART_SetRxInterruptHandler:	
  2585                           
  2586                           ;eusart.c: 224: EUSART_RxDefaultInterruptHandler = interruptHandler;
  2587                           
  2588                           ;incstack = 0
  2589                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  2590  03AB  0873               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  2591  03AC  0020               	movlb	0	; select bank0
  2592  03AD  00E2               	movwf	_EUSART_RxDefaultInterruptHandler+1
  2593  03AE  0872               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  2594  03AF  00E1               	movwf	_EUSART_RxDefaultInterruptHandler
  2595  03B0  0008               	return
  2596  03B1                     __end_of_EUSART_SetRxInterruptHandler:	
  2597                           
  2598                           	psect	text10
  2599  01A0                     __ptext10:	
  2600 ;; *************** function _EUSART_Deal *****************
  2601 ;; Defined at:
  2602 ;;		line 227 in file "mcc_generated_files/eusart.c"
  2603 ;; Parameters:    Size  Location     Type
  2604 ;;		None
  2605 ;; Auto vars:     Size  Location     Type
  2606 ;;		None
  2607 ;; Return value:  Size  Location     Type
  2608 ;;                  1    wreg      void 
  2609 ;; Registers used:
  2610 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2611 ;; Tracked objects:
  2612 ;;		On entry : 0/0
  2613 ;;		On exit  : 0/0
  2614 ;;		Unchanged: 0/0
  2615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2616 ;;      Params:         0       0       0       0
  2617 ;;      Locals:         0       0       0       0
  2618 ;;      Temps:          2       0       0       0
  2619 ;;      Totals:         2       0       0       0
  2620 ;;Total ram usage:        2 bytes
  2621 ;; Hardware stack levels used:    1
  2622 ;; Hardware stack levels required when called:    6
  2623 ;; This function calls:
  2624 ;;		_Get_Device_Addr
  2625 ;;		_startTimeCtrl
  2626 ;;		_stopTimeCtrl
  2627 ;;		_testTimeCtrl
  2628 ;;		_workTimeCtrl
  2629 ;; This function is called by:
  2630 ;;		_main
  2631 ;; This function uses a non-reentrant model
  2632 ;;
  2633                           
  2634                           
  2635                           ;psect for function _EUSART_Deal
  2636  01A0                     _EUSART_Deal:	
  2637                           
  2638                           ;eusart.c: 229: if(eusartRxBuffer[0] == 0xA5 && eusartRxBuffer[1] == 0x5A)
  2639                           
  2640                           ;incstack = 0
  2641                           ; Regs used in _EUSART_Deal: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2642  01A0  30A5               	movlw	165
  2643  01A1  0022               	movlb	2	; select bank2
  2644  01A2  0620               	xorwf	_eusartRxBuffer^(0+256),w
  2645  01A3  1D03               	btfss	3,2
  2646  01A4  0008               	return
  2647  01A5  305A               	movlw	90
  2648  01A6  0621               	xorwf	(_eusartRxBuffer^(0+256)+1),w
  2649  01A7  1D03               	btfss	3,2
  2650  01A8  0008               	return
  2651                           
  2652                           ;eusart.c: 230: {
  2653                           ;eusart.c: 231: if(eusartRxBuffer[2] == EusartRxLenth-5)
  2654  01A9  0020               	movlb	0	; select bank0
  2655  01AA  0848               	movf	_EusartRxLenth,w
  2656  01AB  3EFB               	addlw	251
  2657  01AC  00F5               	movwf	??_EUSART_Deal
  2658  01AD  30FF               	movlw	255
  2659  01AE  1803               	skipnc
  2660  01AF  3000               	movlw	0
  2661  01B0  00F6               	movwf	??_EUSART_Deal+1
  2662  01B1  0022               	movlb	2	; select bank2
  2663  01B2  0822               	movf	(_eusartRxBuffer^(0+256)+2),w
  2664  01B3  0675               	xorwf	??_EUSART_Deal,w
  2665  01B4  0476               	iorwf	??_EUSART_Deal+1,w
  2666  01B5  1D03               	skipz
  2667  01B6  0008               	return
  2668                           
  2669                           ;eusart.c: 232: {
  2670                           ;eusart.c: 233: if(eusartRxBuffer[4] == Get_Device_Addr())
  2671  01B7  3183  236C  3181   	fcall	_Get_Device_Addr
  2672  01BA  0022               	movlb	2	; select bank2
  2673  01BB  0624               	xorwf	(_eusartRxBuffer^(0+256)+4),w
  2674  01BC  1D03               	skipz
  2675  01BD  29E6               	goto	l1341
  2676                           
  2677                           ;eusart.c: 234: {
  2678                           ;eusart.c: 235: if(eusartRxBuffer[3] == 0x1C)
  2679  01BE  301C               	movlw	28
  2680  01BF  0623               	xorwf	(_eusartRxBuffer^(0+256)+3),w
  2681  01C0  1D03               	btfss	3,2
  2682  01C1  29C6               	goto	l1327
  2683                           
  2684                           ;eusart.c: 236: {
  2685                           ;eusart.c: 237: stopTimeCtrl();
  2686  01C2  3182  22A7  3181   	fcall	_stopTimeCtrl
  2687                           
  2688                           ;eusart.c: 238: }
  2689  01C5  29E6               	goto	l1341
  2690  01C6                     l1327:	
  2691                           
  2692                           ;eusart.c: 239: else if(eusartRxBuffer[3] == 0x1D)
  2693  01C6  301D               	movlw	29
  2694  01C7  0022               	movlb	2	; select bank2
  2695  01C8  0623               	xorwf	(_eusartRxBuffer^(0+256)+3),w
  2696  01C9  1D03               	btfss	3,2
  2697  01CA  29CF               	goto	l1331
  2698                           
  2699                           ;eusart.c: 240: {
  2700                           ;eusart.c: 241: startTimeCtrl();
  2701  01CB  3183  2383  3181   	fcall	_startTimeCtrl
  2702                           
  2703                           ;eusart.c: 242: }
  2704  01CE  29E6               	goto	l1341
  2705  01CF                     l1331:	
  2706                           
  2707                           ;eusart.c: 243: else if(eusartRxBuffer[3] >= 0x21 && eusartRxBuffer[3] <= 0x28)
  2708  01CF  3021               	movlw	33
  2709  01D0  0022               	movlb	2	; select bank2
  2710  01D1  0223               	subwf	(_eusartRxBuffer^(0+256)+3),w
  2711  01D2  1C03               	skipc
  2712  01D3  29DE               	goto	l1337
  2713  01D4  3029               	movlw	41
  2714  01D5  0223               	subwf	(_eusartRxBuffer^(0+256)+3),w
  2715  01D6  1803               	skipnc
  2716  01D7  29DE               	goto	l1337
  2717                           
  2718                           ;eusart.c: 244: {
  2719                           ;eusart.c: 245: testTimeCtrl(eusartRxBuffer[3] - 0x20);
  2720  01D8  0823               	movf	(_eusartRxBuffer^(0+256)+3),w
  2721  01D9  3EE0               	addlw	224
  2722  01DA  3182  2276  3181   	fcall	_testTimeCtrl
  2723                           
  2724                           ;eusart.c: 246: }
  2725  01DD  29E6               	goto	l1341
  2726  01DE                     l1337:	
  2727                           
  2728                           ;eusart.c: 247: else if(eusartRxBuffer[3] == 0x4E)
  2729  01DE  304E               	movlw	78
  2730  01DF  0022               	movlb	2	; select bank2
  2731  01E0  0623               	xorwf	(_eusartRxBuffer^(0+256)+3),w
  2732  01E1  1D03               	btfss	3,2
  2733  01E2  29E6               	goto	l1341
  2734                           
  2735                           ;eusart.c: 248: {
  2736                           ;eusart.c: 249: workTimeCtrl();
  2737  01E3  3182  22D4  3181   	fcall	_workTimeCtrl
  2738  01E6                     l1341:	
  2739                           
  2740                           ;eusart.c: 250: }
  2741                           ;eusart.c: 251: }
  2742                           ;eusart.c: 252: if(eusartRxBuffer[3] == 0X1F)
  2743  01E6  301F               	movlw	31
  2744  01E7  0022               	movlb	2	; select bank2
  2745  01E8  0623               	xorwf	(_eusartRxBuffer^(0+256)+3),w
  2746  01E9  1D03               	btfss	3,2
  2747  01EA  0008               	return
  2748                           
  2749                           ;eusart.c: 253: {
  2750                           ;eusart.c: 254: timeCtrlMode = eusartRxBuffer[4];
  2751  01EB  0824               	movf	(_eusartRxBuffer^(0+256)+4),w
  2752  01EC  00F5               	movwf	??_EUSART_Deal
  2753  01ED  0875               	movf	??_EUSART_Deal,w
  2754  01EE  00FA               	movwf	_timeCtrlMode
  2755  01EF  0008               	return
  2756  01F0                     __end_of_EUSART_Deal:	
  2757                           
  2758                           	psect	text11
  2759  02D4                     __ptext11:	
  2760 ;; *************** function _workTimeCtrl *****************
  2761 ;; Defined at:
  2762 ;;		line 32 in file "mcc_generated_files/time_ctrl.c"
  2763 ;; Parameters:    Size  Location     Type
  2764 ;;		None
  2765 ;; Auto vars:     Size  Location     Type
  2766 ;;  i               1    4[COMMON] unsigned char 
  2767 ;; Return value:  Size  Location     Type
  2768 ;;                  1    wreg      void 
  2769 ;; Registers used:
  2770 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2771 ;; Tracked objects:
  2772 ;;		On entry : 0/0
  2773 ;;		On exit  : 0/0
  2774 ;;		Unchanged: 0/0
  2775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2776 ;;      Params:         0       0       0       0
  2777 ;;      Locals:         1       0       0       0
  2778 ;;      Temps:          2       0       0       0
  2779 ;;      Totals:         3       0       0       0
  2780 ;;Total ram usage:        3 bytes
  2781 ;; Hardware stack levels used:    1
  2782 ;; Hardware stack levels required when called:    4
  2783 ;; This function calls:
  2784 ;;		Nothing
  2785 ;; This function is called by:
  2786 ;;		_EUSART_Deal
  2787 ;; This function uses a non-reentrant model
  2788 ;;
  2789                           
  2790                           
  2791                           ;psect for function _workTimeCtrl
  2792  02D4                     _workTimeCtrl:	
  2793                           
  2794                           ;time_ctrl.c: 34: uint8_t i;
  2795                           ;time_ctrl.c: 36: timeCtrlStartFlag = 0;
  2796                           
  2797                           ;incstack = 0
  2798                           ; Regs used in _workTimeCtrl: [wreg+fsr1l+fsr1h+status,2+status,0]
  2799  02D4  01F9               	clrf	_timeCtrlStartFlag
  2800                           
  2801                           ;time_ctrl.c: 37: readSignalflag = 0;
  2802  02D5  0020               	movlb	0	; select bank0
  2803  02D6  01C2               	clrf	_readSignalflag
  2804                           
  2805                           ;time_ctrl.c: 38: do { LATAbits.LATA2 = 0; } while(0);
  2806  02D7  0022               	movlb	2	; select bank2
  2807  02D8  110C               	bcf	12,2	;volatile
  2808                           
  2809                           ;time_ctrl.c: 40: for(i=0; i<8; i++)
  2810  02D9  01F4               	clrf	workTimeCtrl@i
  2811  02DA                     L2:	
  2812  02DA  3008               	movlw	8
  2813  02DB  0274               	subwf	workTimeCtrl@i,w
  2814  02DC  1803               	btfsc	3,0
  2815  02DD  0008               	return
  2816                           
  2817                           ;time_ctrl.c: 41: {
  2818                           ;time_ctrl.c: 42: IQRSta[i] = 0;
  2819  02DE  0874               	movf	workTimeCtrl@i,w
  2820  02DF  3E38               	addlw	(low (_IQRSta| 0))& (0+255)
  2821  02E0  0086               	movwf	6
  2822  02E1  0187               	clrf	7
  2823  02E2  0181               	clrf	1
  2824                           
  2825                           ;time_ctrl.c: 43: testIQRSta[i] = 0;
  2826  02E3  0874               	movf	workTimeCtrl@i,w
  2827  02E4  3E30               	addlw	(low (_testIQRSta| 0))& (0+255)
  2828  02E5  0086               	movwf	6
  2829  02E6  0187               	clrf	7
  2830  02E7  0181               	clrf	1
  2831                           
  2832                           ;time_ctrl.c: 44: IQRPreSta[i] = 3;
  2833  02E8  3003               	movlw	3
  2834  02E9  00F2               	movwf	??_workTimeCtrl
  2835  02EA  0874               	movf	workTimeCtrl@i,w
  2836  02EB  3E57               	addlw	(low (_IQRPreSta| 0))& (0+255)
  2837  02EC  0086               	movwf	6
  2838  02ED  0187               	clrf	7
  2839  02EE  0872               	movf	??_workTimeCtrl,w
  2840  02EF  0081               	movwf	1
  2841                           
  2842                           ;time_ctrl.c: 46: LATC |= 1 << i;
  2843  02F0  3001               	movlw	1
  2844  02F1  00F2               	movwf	??_workTimeCtrl
  2845  02F2  0A74               	incf	workTimeCtrl@i,w
  2846  02F3  2AF5               	goto	u744
  2847  02F4                     u745:	
  2848  02F4  35F2               	lslf	??_workTimeCtrl,f
  2849  02F5                     u744:	
  2850  02F5  0B89               	decfsz	9,f
  2851  02F6  2AF4               	goto	u745
  2852  02F7  0872               	movf	??_workTimeCtrl,w
  2853  02F8  00F3               	movwf	??_workTimeCtrl+1
  2854  02F9  0873               	movf	??_workTimeCtrl+1,w
  2855  02FA  048E               	iorwf	14,f	;volatile
  2856  02FB  3001               	movlw	1
  2857  02FC  00F2               	movwf	??_workTimeCtrl
  2858  02FD  0872               	movf	??_workTimeCtrl,w
  2859  02FE  07F4               	addwf	workTimeCtrl@i,f
  2860  02FF  2ADA               	goto	L2
  2861  0300                     __end_of_workTimeCtrl:	
  2862                           
  2863                           	psect	text12
  2864  0276                     __ptext12:	
  2865 ;; *************** function _testTimeCtrl *****************
  2866 ;; Defined at:
  2867 ;;		line 74 in file "mcc_generated_files/time_ctrl.c"
  2868 ;; Parameters:    Size  Location     Type
  2869 ;;  IQRNum          1    wreg     unsigned char 
  2870 ;; Auto vars:     Size  Location     Type
  2871 ;;  IQRNum          1    4[COMMON] unsigned char 
  2872 ;; Return value:  Size  Location     Type
  2873 ;;                  1    wreg      void 
  2874 ;; Registers used:
  2875 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2876 ;; Tracked objects:
  2877 ;;		On entry : 0/0
  2878 ;;		On exit  : 0/0
  2879 ;;		Unchanged: 0/0
  2880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2881 ;;      Params:         0       0       0       0
  2882 ;;      Locals:         1       0       0       0
  2883 ;;      Temps:          2       0       0       0
  2884 ;;      Totals:         3       0       0       0
  2885 ;;Total ram usage:        3 bytes
  2886 ;; Hardware stack levels used:    1
  2887 ;; Hardware stack levels required when called:    4
  2888 ;; This function calls:
  2889 ;;		Nothing
  2890 ;; This function is called by:
  2891 ;;		_EUSART_Deal
  2892 ;; This function uses a non-reentrant model
  2893 ;;
  2894                           
  2895                           
  2896                           ;psect for function _testTimeCtrl
  2897  0276                     _testTimeCtrl:	
  2898                           
  2899                           ;incstack = 0
  2900                           ; Regs used in _testTimeCtrl: [wreg+fsr1l+fsr1h+status,2+status,0]
  2901                           ;testTimeCtrl@IQRNum stored from wreg
  2902  0276  00F4               	movwf	testTimeCtrl@IQRNum
  2903                           
  2904                           ;time_ctrl.c: 76: testIQRSta[IQRNum - 1] ^= 0x01;
  2905  0277  3001               	movlw	1
  2906  0278  00F2               	movwf	??_testTimeCtrl
  2907  0279  0874               	movf	testTimeCtrl@IQRNum,w
  2908  027A  3EFF               	addlw	255
  2909  027B  3E30               	addlw	(low (_testIQRSta| 0))& (0+255)
  2910  027C  0086               	movwf	6
  2911  027D  0187               	clrf	7
  2912  027E  0872               	movf	??_testTimeCtrl,w
  2913  027F  0681               	xorwf	1,f
  2914                           
  2915                           ;time_ctrl.c: 78: if(testIQRSta[IQRNum - 1])
  2916  0280  0874               	movf	testTimeCtrl@IQRNum,w
  2917  0281  3EFF               	addlw	255
  2918  0282  3E30               	addlw	(low (_testIQRSta| 0))& (0+255)
  2919  0283  0086               	movwf	6
  2920  0284  0187               	clrf	7
  2921  0285  0801               	movf	1,w
  2922  0286  1903               	btfsc	3,2
  2923  0287  2A97               	goto	l1281
  2924                           
  2925                           ;time_ctrl.c: 79: LATC |= 1 << (IQRNum - 1);
  2926  0288  3001               	movlw	1
  2927  0289  00F2               	movwf	??_testTimeCtrl
  2928  028A  0874               	movf	testTimeCtrl@IQRNum,w
  2929  028B  3EFF               	addlw	-1
  2930  028C  0A89               	incf	9,f
  2931  028D  2A8F               	goto	u714
  2932  028E                     u715:	
  2933  028E  35F2               	lslf	??_testTimeCtrl,f
  2934  028F                     u714:	
  2935  028F  0B89               	decfsz	9,f
  2936  0290  2A8E               	goto	u715
  2937  0291  0872               	movf	??_testTimeCtrl,w
  2938  0292  00F3               	movwf	??_testTimeCtrl+1
  2939  0293  0873               	movf	??_testTimeCtrl+1,w
  2940  0294  0022               	movlb	2	; select bank2
  2941  0295  048E               	iorwf	14,f	;volatile
  2942  0296  0008               	return
  2943  0297                     l1281:	
  2944                           
  2945                           ;time_ctrl.c: 80: else
  2946                           ;time_ctrl.c: 81: LATC &= ~(1<<(IQRNum - 1));
  2947  0297  3001               	movlw	1
  2948  0298  00F2               	movwf	??_testTimeCtrl
  2949  0299  0874               	movf	testTimeCtrl@IQRNum,w
  2950  029A  3EFF               	addlw	-1
  2951  029B  0A89               	incf	9,f
  2952  029C  2A9E               	goto	u724
  2953  029D                     u725:	
  2954  029D  35F2               	lslf	??_testTimeCtrl,f
  2955  029E                     u724:	
  2956  029E  0B89               	decfsz	9,f
  2957  029F  2A9D               	goto	u725
  2958  02A0  0872               	movf	??_testTimeCtrl,w
  2959  02A1  3AFF               	xorlw	255
  2960  02A2  00F3               	movwf	??_testTimeCtrl+1
  2961  02A3  0873               	movf	??_testTimeCtrl+1,w
  2962  02A4  0022               	movlb	2	; select bank2
  2963  02A5  058E               	andwf	14,f	;volatile
  2964  02A6  0008               	return
  2965  02A7                     __end_of_testTimeCtrl:	
  2966                           
  2967                           	psect	text13
  2968  0383                     __ptext13:	
  2969 ;; *************** function _startTimeCtrl *****************
  2970 ;; Defined at:
  2971 ;;		line 50 in file "mcc_generated_files/time_ctrl.c"
  2972 ;; Parameters:    Size  Location     Type
  2973 ;;		None
  2974 ;; Auto vars:     Size  Location     Type
  2975 ;;		None
  2976 ;; Return value:  Size  Location     Type
  2977 ;;                  1    wreg      void 
  2978 ;; Registers used:
  2979 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2980 ;; Tracked objects:
  2981 ;;		On entry : 0/0
  2982 ;;		On exit  : 0/0
  2983 ;;		Unchanged: 0/0
  2984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2985 ;;      Params:         0       0       0       0
  2986 ;;      Locals:         0       0       0       0
  2987 ;;      Temps:          0       0       0       0
  2988 ;;      Totals:         0       0       0       0
  2989 ;;Total ram usage:        0 bytes
  2990 ;; Hardware stack levels used:    1
  2991 ;; Hardware stack levels required when called:    5
  2992 ;; This function calls:
  2993 ;;		_getTimeData
  2994 ;;		_stopTimeCtrl
  2995 ;; This function is called by:
  2996 ;;		_EUSART_Deal
  2997 ;; This function uses a non-reentrant model
  2998 ;;
  2999                           
  3000                           
  3001                           ;psect for function _startTimeCtrl
  3002  0383                     _startTimeCtrl:	
  3003                           
  3004                           ;time_ctrl.c: 52: getTimeData();
  3005                           
  3006                           ;incstack = 0
  3007                           ; Regs used in _startTimeCtrl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3008  0383  3181  212E  3183   	fcall	_getTimeData
  3009                           
  3010                           ;time_ctrl.c: 53: stopTimeCtrl();
  3011  0386  3182  22A7         	fcall	_stopTimeCtrl
  3012                           
  3013                           ;time_ctrl.c: 54: timeCtrlStartFlag = 1;
  3014  0388  01F9               	clrf	_timeCtrlStartFlag
  3015  0389  0AF9               	incf	_timeCtrlStartFlag,f
  3016  038A  0008               	return
  3017  038B                     __end_of_startTimeCtrl:	
  3018                           
  3019                           	psect	text14
  3020  02A7                     __ptext14:	
  3021 ;; *************** function _stopTimeCtrl *****************
  3022 ;; Defined at:
  3023 ;;		line 57 in file "mcc_generated_files/time_ctrl.c"
  3024 ;; Parameters:    Size  Location     Type
  3025 ;;		None
  3026 ;; Auto vars:     Size  Location     Type
  3027 ;;  i               1    4[COMMON] unsigned char 
  3028 ;; Return value:  Size  Location     Type
  3029 ;;                  1    wreg      void 
  3030 ;; Registers used:
  3031 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3032 ;; Tracked objects:
  3033 ;;		On entry : 0/0
  3034 ;;		On exit  : 0/0
  3035 ;;		Unchanged: 0/0
  3036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3037 ;;      Params:         0       0       0       0
  3038 ;;      Locals:         1       0       0       0
  3039 ;;      Temps:          2       0       0       0
  3040 ;;      Totals:         3       0       0       0
  3041 ;;Total ram usage:        3 bytes
  3042 ;; Hardware stack levels used:    1
  3043 ;; Hardware stack levels required when called:    4
  3044 ;; This function calls:
  3045 ;;		Nothing
  3046 ;; This function is called by:
  3047 ;;		_EUSART_Deal
  3048 ;;		_startTimeCtrl
  3049 ;;		_main
  3050 ;; This function uses a non-reentrant model
  3051 ;;
  3052                           
  3053                           
  3054                           ;psect for function _stopTimeCtrl
  3055  02A7                     _stopTimeCtrl:	
  3056                           
  3057                           ;time_ctrl.c: 59: uint8_t i;
  3058                           ;time_ctrl.c: 60: timeCtrlStartFlag = 0;
  3059                           
  3060                           ;incstack = 0
  3061                           ; Regs used in _stopTimeCtrl: [wreg+fsr1l+fsr1h+status,2+status,0]
  3062  02A7  01F9               	clrf	_timeCtrlStartFlag
  3063                           
  3064                           ;time_ctrl.c: 61: readSignalflag = 0;
  3065  02A8  0020               	movlb	0	; select bank0
  3066  02A9  01C2               	clrf	_readSignalflag
  3067                           
  3068                           ;time_ctrl.c: 63: do { LATAbits.LATA2 = 1; } while(0);
  3069  02AA  0022               	movlb	2	; select bank2
  3070  02AB  150C               	bsf	12,2	;volatile
  3071                           
  3072                           ;time_ctrl.c: 65: for(i=0; i<8; i++)
  3073  02AC  01F4               	clrf	stopTimeCtrl@i
  3074  02AD                     L3:	
  3075  02AD  3008               	movlw	8
  3076  02AE  0274               	subwf	stopTimeCtrl@i,w
  3077  02AF  1803               	btfsc	3,0
  3078  02B0  0008               	return
  3079                           
  3080                           ;time_ctrl.c: 66: {
  3081                           ;time_ctrl.c: 67: IQRSta[i] = 0;
  3082  02B1  0874               	movf	stopTimeCtrl@i,w
  3083  02B2  3E38               	addlw	(low (_IQRSta| 0))& (0+255)
  3084  02B3  0086               	movwf	6
  3085  02B4  0187               	clrf	7
  3086  02B5  0181               	clrf	1
  3087                           
  3088                           ;time_ctrl.c: 68: testIQRSta[i] = 0;
  3089  02B6  0874               	movf	stopTimeCtrl@i,w
  3090  02B7  3E30               	addlw	(low (_testIQRSta| 0))& (0+255)
  3091  02B8  0086               	movwf	6
  3092  02B9  0187               	clrf	7
  3093  02BA  0181               	clrf	1
  3094                           
  3095                           ;time_ctrl.c: 69: IQRPreSta[i] = 3;
  3096  02BB  3003               	movlw	3
  3097  02BC  00F2               	movwf	??_stopTimeCtrl
  3098  02BD  0874               	movf	stopTimeCtrl@i,w
  3099  02BE  3E57               	addlw	(low (_IQRPreSta| 0))& (0+255)
  3100  02BF  0086               	movwf	6
  3101  02C0  0187               	clrf	7
  3102  02C1  0872               	movf	??_stopTimeCtrl,w
  3103  02C2  0081               	movwf	1
  3104                           
  3105                           ;time_ctrl.c: 70: LATC &= ~(1<<i);
  3106  02C3  3001               	movlw	1
  3107  02C4  00F2               	movwf	??_stopTimeCtrl
  3108  02C5  0A74               	incf	stopTimeCtrl@i,w
  3109  02C6  2AC8               	goto	u554
  3110  02C7                     u555:	
  3111  02C7  35F2               	lslf	??_stopTimeCtrl,f
  3112  02C8                     u554:	
  3113  02C8  0B89               	decfsz	9,f
  3114  02C9  2AC7               	goto	u555
  3115  02CA  0872               	movf	??_stopTimeCtrl,w
  3116  02CB  3AFF               	xorlw	255
  3117  02CC  00F3               	movwf	??_stopTimeCtrl+1
  3118  02CD  0873               	movf	??_stopTimeCtrl+1,w
  3119  02CE  058E               	andwf	14,f	;volatile
  3120  02CF  3001               	movlw	1
  3121  02D0  00F2               	movwf	??_stopTimeCtrl
  3122  02D1  0872               	movf	??_stopTimeCtrl,w
  3123  02D2  07F4               	addwf	stopTimeCtrl@i,f
  3124  02D3  2AAD               	goto	L3
  3125  02D4                     __end_of_stopTimeCtrl:	
  3126                           
  3127                           	psect	text15
  3128  012E                     __ptext15:	
  3129 ;; *************** function _getTimeData *****************
  3130 ;; Defined at:
  3131 ;;		line 16 in file "mcc_generated_files/time_ctrl.c"
  3132 ;; Parameters:    Size  Location     Type
  3133 ;;		None
  3134 ;; Auto vars:     Size  Location     Type
  3135 ;;  j               1    4[COMMON] unsigned char 
  3136 ;;  i               1    3[COMMON] unsigned char 
  3137 ;;  cnt             1    2[COMMON] unsigned char 
  3138 ;; Return value:  Size  Location     Type
  3139 ;;                  1    wreg      void 
  3140 ;; Registers used:
  3141 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3142 ;; Tracked objects:
  3143 ;;		On entry : 0/0
  3144 ;;		On exit  : 0/0
  3145 ;;		Unchanged: 0/0
  3146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3147 ;;      Params:         0       0       0       0
  3148 ;;      Locals:         3       0       0       0
  3149 ;;      Temps:          0      13       0       0
  3150 ;;      Totals:         3      13       0       0
  3151 ;;Total ram usage:       16 bytes
  3152 ;; Hardware stack levels used:    1
  3153 ;; Hardware stack levels required when called:    4
  3154 ;; This function calls:
  3155 ;;		Nothing
  3156 ;; This function is called by:
  3157 ;;		_startTimeCtrl
  3158 ;; This function uses a non-reentrant model
  3159 ;;
  3160                           
  3161                           
  3162                           ;psect for function _getTimeData
  3163  012E                     _getTimeData:	
  3164                           
  3165                           ;time_ctrl.c: 18: uint8_t i, j;
  3166                           ;time_ctrl.c: 19: uint8_t cnt = 0;
  3167                           
  3168                           ;incstack = 0
  3169                           ; Regs used in _getTimeData: [wreg+fsr1l+fsr1h+status,2+status,0]
  3170  012E  01F2               	clrf	getTimeData@cnt
  3171                           
  3172                           ;time_ctrl.c: 20: for(i=0; i<8; i++)
  3173  012F  01F3               	clrf	getTimeData@i
  3174  0130                     L4:	
  3175  0130  3008               	movlw	8
  3176  0131  0273               	subwf	getTimeData@i,w
  3177  0132  1803               	btfsc	3,0
  3178  0133  0008               	return
  3179                           
  3180                           ;time_ctrl.c: 21: {
  3181                           ;time_ctrl.c: 22: for(j=0; j<4; j++)
  3182  0134  01F4               	clrf	getTimeData@j
  3183  0135  3004               	movlw	4
  3184  0136  0274               	subwf	getTimeData@j,w
  3185  0137  1803               	btfsc	3,0
  3186  0138  299A               	goto	l1169
  3187  0139                     l1161:	
  3188                           
  3189                           ;time_ctrl.c: 23: {
  3190                           ;time_ctrl.c: 24: timeCtrlValue[i][j] = eusartRxBuffer[cnt+5];
  3191  0139  0872               	movf	getTimeData@cnt,w
  3192  013A  3E05               	addlw	5
  3193  013B  3E20               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  3194  013C  0086               	movwf	6
  3195  013D  3001               	movlw	1	; select bank2/3
  3196  013E  0087               	movwf	7
  3197  013F  0801               	movf	1,w
  3198  0140  0020               	movlb	0	; select bank0
  3199  0141  00CA               	movwf	??_getTimeData
  3200  0142  01CB               	clrf	??_getTimeData+1
  3201  0143  0873               	movf	getTimeData@i,w
  3202  0144  00CC               	movwf	??_getTimeData+2
  3203  0145  3003               	movlw	3
  3204  0146                     u595:	
  3205  0146  35CC               	lslf	??_getTimeData+2,f
  3206  0147  0B89               	decfsz	9,f
  3207  0148  2946               	goto	u595
  3208  0149  30A0               	movlw	(low (_timeCtrlValue| 0))& (0+255)
  3209  014A  074C               	addwf	??_getTimeData+2,w
  3210  014B  00CD               	movwf	??_getTimeData+3
  3211  014C  3574               	lslf	getTimeData@j,w
  3212  014D  074D               	addwf	??_getTimeData+3,w
  3213  014E  00CE               	movwf	??_getTimeData+4
  3214  014F  084E               	movf	??_getTimeData+4,w
  3215  0150  0086               	movwf	6
  3216  0151  0187               	clrf	7
  3217  0152  084A               	movf	??_getTimeData,w
  3218  0153  3FC0               	movwi [0]fsr1
  3219  0154  084B               	movf	??_getTimeData+1,w
  3220  0155  3FC1               	movwi [1]fsr1
  3221                           
  3222                           ;time_ctrl.c: 25: timeCtrlValue[i][j] = (timeCtrlValue[i][j] << 8)
  3223                           ;time_ctrl.c: 26: | eusartRxBuffer[cnt+6];
  3224  0156  0872               	movf	getTimeData@cnt,w
  3225  0157  3E06               	addlw	6
  3226  0158  3E20               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  3227  0159  0086               	movwf	6
  3228  015A  3001               	movlw	1	; select bank2/3
  3229  015B  0087               	movwf	7
  3230  015C  0801               	movf	1,w
  3231  015D  00CA               	movwf	??_getTimeData
  3232  015E  01CB               	clrf	??_getTimeData+1
  3233  015F  0873               	movf	getTimeData@i,w
  3234  0160  00CC               	movwf	??_getTimeData+2
  3235  0161  3003               	movlw	3
  3236  0162                     u605:	
  3237  0162  35CC               	lslf	??_getTimeData+2,f
  3238  0163  0B89               	decfsz	9,f
  3239  0164  2962               	goto	u605
  3240  0165  30A0               	movlw	(low (_timeCtrlValue| 0))& (0+255)
  3241  0166  074C               	addwf	??_getTimeData+2,w
  3242  0167  00CD               	movwf	??_getTimeData+3
  3243  0168  3574               	lslf	getTimeData@j,w
  3244  0169  074D               	addwf	??_getTimeData+3,w
  3245  016A  00CE               	movwf	??_getTimeData+4
  3246  016B  084E               	movf	??_getTimeData+4,w
  3247  016C  0086               	movwf	6
  3248  016D  0187               	clrf	7
  3249  016E  3F40               	moviw [0]fsr1
  3250  016F  00CF               	movwf	??_getTimeData+5
  3251  0170  3F41               	moviw [1]fsr1
  3252  0171  00D0               	movwf	??_getTimeData+6
  3253  0172  084F               	movf	??_getTimeData+5,w
  3254  0173  00D0               	movwf	??_getTimeData+6
  3255  0174  01CF               	clrf	??_getTimeData+5
  3256  0175  084A               	movf	??_getTimeData,w
  3257  0176  044F               	iorwf	??_getTimeData+5,w
  3258  0177  00D2               	movwf	??_getTimeData+8
  3259  0178  084B               	movf	??_getTimeData+1,w
  3260  0179  0450               	iorwf	??_getTimeData+6,w
  3261  017A  00D3               	movwf	??_getTimeData+9
  3262  017B  0873               	movf	getTimeData@i,w
  3263  017C  00D4               	movwf	??_getTimeData+10
  3264  017D  3003               	movlw	3
  3265  017E                     u615:	
  3266  017E  35D4               	lslf	??_getTimeData+10,f
  3267  017F  0B89               	decfsz	9,f
  3268  0180  297E               	goto	u615
  3269  0181  30A0               	movlw	(low (_timeCtrlValue| 0))& (0+255)
  3270  0182  0754               	addwf	??_getTimeData+10,w
  3271  0183  00D5               	movwf	??_getTimeData+11
  3272  0184  3574               	lslf	getTimeData@j,w
  3273  0185  0755               	addwf	??_getTimeData+11,w
  3274  0186  00D6               	movwf	??_getTimeData+12
  3275  0187  0856               	movf	??_getTimeData+12,w
  3276  0188  0086               	movwf	6
  3277  0189  0187               	clrf	7
  3278  018A  0852               	movf	??_getTimeData+8,w
  3279  018B  3FC0               	movwi [0]fsr1
  3280  018C  0853               	movf	??_getTimeData+9,w
  3281  018D  3FC1               	movwi [1]fsr1
  3282                           
  3283                           ;time_ctrl.c: 27: cnt += 2;
  3284  018E  3002               	movlw	2
  3285  018F  00CA               	movwf	??_getTimeData
  3286  0190  084A               	movf	??_getTimeData,w
  3287  0191  07F2               	addwf	getTimeData@cnt,f
  3288  0192  3001               	movlw	1
  3289  0193  00CA               	movwf	??_getTimeData
  3290  0194  084A               	movf	??_getTimeData,w
  3291  0195  07F4               	addwf	getTimeData@j,f
  3292  0196  3004               	movlw	4
  3293  0197  0274               	subwf	getTimeData@j,w
  3294  0198  1C03               	skipc
  3295  0199  2939               	goto	l1161
  3296  019A                     l1169:	
  3297  019A  3001               	movlw	1
  3298  019B  0020               	movlb	0	; select bank0
  3299  019C  00CA               	movwf	??_getTimeData
  3300  019D  084A               	movf	??_getTimeData,w
  3301  019E  07F3               	addwf	getTimeData@i,f
  3302  019F  2930               	goto	L4
  3303  01A0                     __end_of_getTimeData:	
  3304                           
  3305                           	psect	text16
  3306  036C                     __ptext16:	
  3307 ;; *************** function _Get_Device_Addr *****************
  3308 ;; Defined at:
  3309 ;;		line 75 in file "mcc_generated_files/mcc.c"
  3310 ;; Parameters:    Size  Location     Type
  3311 ;;		None
  3312 ;; Auto vars:     Size  Location     Type
  3313 ;;  device_addr     1    3[COMMON] unsigned char 
  3314 ;; Return value:  Size  Location     Type
  3315 ;;                  1    wreg      unsigned char 
  3316 ;; Registers used:
  3317 ;;		wreg, status,2, status,0
  3318 ;; Tracked objects:
  3319 ;;		On entry : 0/0
  3320 ;;		On exit  : 0/0
  3321 ;;		Unchanged: 0/0
  3322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3323 ;;      Params:         0       0       0       0
  3324 ;;      Locals:         1       0       0       0
  3325 ;;      Temps:          1       0       0       0
  3326 ;;      Totals:         2       0       0       0
  3327 ;;Total ram usage:        2 bytes
  3328 ;; Hardware stack levels used:    1
  3329 ;; Hardware stack levels required when called:    4
  3330 ;; This function calls:
  3331 ;;		Nothing
  3332 ;; This function is called by:
  3333 ;;		_EUSART_Deal
  3334 ;; This function uses a non-reentrant model
  3335 ;;
  3336                           
  3337                           
  3338                           ;psect for function _Get_Device_Addr
  3339  036C                     _Get_Device_Addr:	
  3340                           
  3341                           ;mcc.c: 77: unsigned char device_addr;
  3342                           ;mcc.c: 79: device_addr = PORTBbits.RB4;
  3343                           
  3344                           ;incstack = 0
  3345                           ; Regs used in _Get_Device_Addr: [wreg+status,2+status,0]
  3346  036C  3000               	movlw	0
  3347  036D  0020               	movlb	0	; select bank0
  3348  036E  1A0D               	btfsc	13,4	;volatile
  3349  036F  3001               	movlw	1
  3350  0370  00F3               	movwf	Get_Device_Addr@device_addr
  3351                           
  3352                           ;mcc.c: 80: device_addr |= PORTBbits.RB6 << 1;
  3353  0371  0E0D               	swapf	13,w	;volatile
  3354  0372  0C89               	rrf	9,f
  3355  0373  0C89               	rrf	9,f
  3356  0374  3901               	andlw	1
  3357  0375  0709               	addwf	9,w
  3358  0376  00F2               	movwf	??_Get_Device_Addr
  3359  0377  0872               	movf	??_Get_Device_Addr,w
  3360  0378  04F3               	iorwf	Get_Device_Addr@device_addr,f
  3361                           
  3362                           ;mcc.c: 82: return device_addr;
  3363  0379  0873               	movf	Get_Device_Addr@device_addr,w
  3364  037A  0008               	return
  3365  037B                     __end_of_Get_Device_Addr:	
  3366                           
  3367                           	psect	intentry
  3368  0004                     __pintentry:	
  3369 ;; *************** function _INTERRUPT_InterruptManager *****************
  3370 ;; Defined at:
  3371 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  3372 ;; Parameters:    Size  Location     Type
  3373 ;;		None
  3374 ;; Auto vars:     Size  Location     Type
  3375 ;;		None
  3376 ;; Return value:  Size  Location     Type
  3377 ;;                  1    wreg      void 
  3378 ;; Registers used:
  3379 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3380 ;; Tracked objects:
  3381 ;;		On entry : 0/0
  3382 ;;		On exit  : 0/0
  3383 ;;		Unchanged: 0/0
  3384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3385 ;;      Params:         0       0       0       0
  3386 ;;      Locals:         0       0       0       0
  3387 ;;      Temps:          1       0       0       0
  3388 ;;      Totals:         1       0       0       0
  3389 ;;Total ram usage:        1 bytes
  3390 ;; Hardware stack levels used:    1
  3391 ;; Hardware stack levels required when called:    3
  3392 ;; This function calls:
  3393 ;;		Absolute function
  3394 ;;		_EUSART_Receive_ISR
  3395 ;;		_TMR0_ISR
  3396 ;; This function is called by:
  3397 ;;		Interrupt level 1
  3398 ;; This function uses a non-reentrant model
  3399 ;;
  3400                           
  3401  0004                     _INTERRUPT_InterruptManager:	
  3402                           
  3403                           ;incstack = 0
  3404  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  3405                           
  3406                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  3407  0005  3180               	pagesel	$
  3408  0006  0020               	movlb	0	; select bank0
  3409  0007  087F               	movf	127,w
  3410  0008  00F1               	movwf	??_INTERRUPT_InterruptManager
  3411                           
  3412                           ;interrupt_manager.c: 55: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  3413  0009  1A8B               	btfsc	11,5	;volatile
  3414  000A  1D0B               	btfss	11,2	;volatile
  3415  000B  2810               	goto	i1l89
  3416                           
  3417                           ;interrupt_manager.c: 56: {
  3418                           ;interrupt_manager.c: 57: TMR0_ISR();
  3419  000C  3183  2392  3180   	fcall	_TMR0_ISR
  3420                           
  3421                           ;interrupt_manager.c: 58: }
  3422  000F  2822               	goto	i1l97
  3423  0010                     i1l89:	
  3424                           
  3425                           ;interrupt_manager.c: 59: else if(INTCONbits.PEIE == 1)
  3426  0010  1F0B               	btfss	11,6	;volatile
  3427  0011  2822               	goto	i1l97
  3428                           
  3429                           ;interrupt_manager.c: 60: {
  3430                           ;interrupt_manager.c: 61: if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
  3431  0012  0021               	movlb	1	; select bank1
  3432  0013  1A11               	btfsc	17,4	;volatile
  3433  0014  0020               	movlb	0	; select bank0
  3434  0015  1A11               	btfsc	17,4	;volatile
  3435  0016  2822               	goto	i1l97
  3436                           
  3437                           ;interrupt_manager.c: 65: else if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
  3438                           
  3439                           ;interrupt_manager.c: 62: {
  3440                           ;interrupt_manager.c: 64: }
  3441  0017  0021               	movlb	1	; select bank1
  3442  0018  1E91               	btfss	17,5	;volatile
  3443  0019  2822               	goto	i1l97
  3444  001A  0020               	movlb	0	; select bank0
  3445  001B  1E91               	btfss	17,5	;volatile
  3446  001C  2822               	goto	i1l97
  3447                           
  3448                           ;interrupt_manager.c: 66: {
  3449                           ;interrupt_manager.c: 67: EUSART_RxDefaultInterruptHandler();
  3450  001D  0862               	movf	_EUSART_RxDefaultInterruptHandler+1,w
  3451  001E  008A               	movwf	10
  3452  001F  0861               	movf	_EUSART_RxDefaultInterruptHandler,w
  3453  0020  000A               	callw
  3454  0021  3180               	pagesel	$
  3455  0022                     i1l97:	
  3456                           ;interrupt_manager.c: 74: else
  3457                           ;interrupt_manager.c: 75: {
  3458                           
  3459                           ;interrupt_manager.c: 72: }
  3460                           ;interrupt_manager.c: 73: }
  3461                           
  3462                           ;interrupt_manager.c: 69: else
  3463                           ;interrupt_manager.c: 70: {
  3464                           
  3465                           ;interrupt_manager.c: 68: }
  3466                           
  3467  0022  0871               	movf	??_INTERRUPT_InterruptManager,w
  3468  0023  0020               	movlb	0	; select bank0
  3469  0024  00FF               	movwf	127
  3470  0025  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  3471  0026  0009               	retfie
  3472  0027                     __end_of_INTERRUPT_InterruptManager:	
  3473                           
  3474                           	psect	text18
  3475  0392                     __ptext18:	
  3476 ;; *************** function _TMR0_ISR *****************
  3477 ;; Defined at:
  3478 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  3479 ;; Parameters:    Size  Location     Type
  3480 ;;		None
  3481 ;; Auto vars:     Size  Location     Type
  3482 ;;		None
  3483 ;; Return value:  Size  Location     Type
  3484 ;;                  1    wreg      void 
  3485 ;; Registers used:
  3486 ;;		wreg, status,2, status,0, pclath, cstack
  3487 ;; Tracked objects:
  3488 ;;		On entry : 0/0
  3489 ;;		On exit  : 0/0
  3490 ;;		Unchanged: 0/0
  3491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3492 ;;      Params:         0       0       0       0
  3493 ;;      Locals:         0       0       0       0
  3494 ;;      Temps:          0       0       0       0
  3495 ;;      Totals:         0       0       0       0
  3496 ;;Total ram usage:        0 bytes
  3497 ;; Hardware stack levels used:    1
  3498 ;; Hardware stack levels required when called:    2
  3499 ;; This function calls:
  3500 ;;		_TMR0_CallBack
  3501 ;; This function is called by:
  3502 ;;		_INTERRUPT_InterruptManager
  3503 ;; This function uses a non-reentrant model
  3504 ;;
  3505                           
  3506                           
  3507                           ;psect for function _TMR0_ISR
  3508  0392                     _TMR0_ISR:	
  3509                           
  3510                           ;tmr0.c: 112: INTCONbits.TMR0IF = 0;
  3511                           
  3512                           ;incstack = 0
  3513                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  3514  0392  110B               	bcf	11,2	;volatile
  3515                           
  3516                           ;tmr0.c: 114: TMR0 = timer0ReloadVal;
  3517  0393  0020               	movlb	0	; select bank0
  3518  0394  0863               	movf	_timer0ReloadVal,w	;volatile
  3519  0395  0095               	movwf	21	;volatile
  3520                           
  3521                           ;tmr0.c: 118: TMR0_CallBack();
  3522  0396  3182  223E         	fcall	_TMR0_CallBack
  3523  0398  0008               	return
  3524  0399                     __end_of_TMR0_ISR:	
  3525                           
  3526                           	psect	text19
  3527  023E                     __ptext19:	
  3528 ;; *************** function _TMR0_CallBack *****************
  3529 ;; Defined at:
  3530 ;;		line 123 in file "mcc_generated_files/tmr0.c"
  3531 ;; Parameters:    Size  Location     Type
  3532 ;;		None
  3533 ;; Auto vars:     Size  Location     Type
  3534 ;;		None
  3535 ;; Return value:  Size  Location     Type
  3536 ;;                  1    wreg      void 
  3537 ;; Registers used:
  3538 ;;		wreg, status,2, status,0, pclath, cstack
  3539 ;; Tracked objects:
  3540 ;;		On entry : 0/0
  3541 ;;		On exit  : 0/0
  3542 ;;		Unchanged: 0/0
  3543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3544 ;;      Params:         0       0       0       0
  3545 ;;      Locals:         0       0       0       0
  3546 ;;      Temps:          1       0       0       0
  3547 ;;      Totals:         1       0       0       0
  3548 ;;Total ram usage:        1 bytes
  3549 ;; Hardware stack levels used:    1
  3550 ;; Hardware stack levels required when called:    1
  3551 ;; This function calls:
  3552 ;;		Absolute function
  3553 ;;		_TMR0_DefaultInterruptHandler
  3554 ;; This function is called by:
  3555 ;;		_TMR0_ISR
  3556 ;; This function uses a non-reentrant model
  3557 ;;
  3558                           
  3559                           
  3560                           ;psect for function _TMR0_CallBack
  3561  023E                     _TMR0_CallBack:	
  3562                           
  3563                           ;tmr0.c: 126: static uint8_t eusartRXOvertimeCnt = 0;
  3564                           ;tmr0.c: 127: static uint8_t timeCrlCnt = 0;
  3565                           ;tmr0.c: 128: static uint8_t preEusartRxCount = 0;
  3566                           ;tmr0.c: 129: static uint8_t testTimeCtrlCnt = 0;
  3567                           ;tmr0.c: 131: if(timeCtrlStartFlag)
  3568                           
  3569                           ;incstack = 0
  3570                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
  3571  023E  0879               	movf	_timeCtrlStartFlag,w
  3572  023F  1903               	btfsc	3,2
  3573  0240  2A4D               	goto	i1l1249
  3574                           
  3575                           ;tmr0.c: 132: {
  3576                           ;tmr0.c: 133: if(++timeCrlCnt >= 10)
  3577  0241  3001               	movlw	1
  3578  0242  00F0               	movwf	??_TMR0_CallBack
  3579  0243  0870               	movf	??_TMR0_CallBack,w
  3580  0244  0020               	movlb	0	; select bank0
  3581  0245  07C5               	addwf	TMR0_CallBack@timeCrlCnt,f
  3582  0246  300A               	movlw	10
  3583  0247  0245               	subwf	TMR0_CallBack@timeCrlCnt,w
  3584  0248  1C03               	skipc
  3585  0249  2A4D               	goto	i1l1249
  3586                           
  3587                           ;tmr0.c: 134: {
  3588                           ;tmr0.c: 135: timeCrlCnt = 0;
  3589  024A  01C5               	clrf	TMR0_CallBack@timeCrlCnt
  3590                           
  3591                           ;tmr0.c: 136: timeCtrlOvertimeMask = 1;
  3592  024B  01C9               	clrf	_timeCtrlOvertimeMask
  3593  024C  0AC9               	incf	_timeCtrlOvertimeMask,f
  3594  024D                     i1l1249:	
  3595                           
  3596                           ;tmr0.c: 137: }
  3597                           ;tmr0.c: 138: }
  3598                           ;tmr0.c: 150: if(eusartRxCount != preEusartRxCount)
  3599  024D  0878               	movf	_eusartRxCount,w
  3600  024E  0020               	movlb	0	; select bank0
  3601  024F  0644               	xorwf	TMR0_CallBack@preEusartRxCount,w
  3602  0250  1903               	skipnz
  3603  0251  2A58               	goto	i1l1255
  3604                           
  3605                           ;tmr0.c: 151: {
  3606                           ;tmr0.c: 152: preEusartRxCount = eusartRxCount;
  3607  0252  0878               	movf	_eusartRxCount,w
  3608  0253  00F0               	movwf	??_TMR0_CallBack
  3609  0254  0870               	movf	??_TMR0_CallBack,w
  3610  0255  00C4               	movwf	TMR0_CallBack@preEusartRxCount
  3611                           
  3612                           ;tmr0.c: 153: eusartRXOvertimeCnt = 0;
  3613  0256  01C6               	clrf	TMR0_CallBack@eusartRXOvertimeCnt
  3614                           
  3615                           ;tmr0.c: 154: }
  3616  0257  2A6C               	goto	i1l1269
  3617  0258                     i1l1255:	
  3618                           
  3619                           ;tmr0.c: 155: else
  3620                           ;tmr0.c: 156: {
  3621                           ;tmr0.c: 157: if(eusartRxCount != 0)
  3622  0258  0878               	movf	_eusartRxCount,w
  3623  0259  1903               	btfsc	3,2
  3624  025A  2A6C               	goto	i1l1269
  3625                           
  3626                           ;tmr0.c: 158: {
  3627                           ;tmr0.c: 159: if(++eusartRXOvertimeCnt >= 2)
  3628  025B  3001               	movlw	1
  3629  025C  00F0               	movwf	??_TMR0_CallBack
  3630  025D  0870               	movf	??_TMR0_CallBack,w
  3631  025E  07C6               	addwf	TMR0_CallBack@eusartRXOvertimeCnt,f
  3632  025F  3002               	movlw	2
  3633  0260  0246               	subwf	TMR0_CallBack@eusartRXOvertimeCnt,w
  3634  0261  1C03               	skipc
  3635  0262  2A6C               	goto	i1l1269
  3636                           
  3637                           ;tmr0.c: 160: {
  3638                           ;tmr0.c: 161: eusartRXOvertimeCnt = 0;
  3639  0263  01C6               	clrf	TMR0_CallBack@eusartRXOvertimeCnt
  3640                           
  3641                           ;tmr0.c: 162: EusartRxLenth = eusartRxCount;
  3642  0264  0878               	movf	_eusartRxCount,w
  3643  0265  00F0               	movwf	??_TMR0_CallBack
  3644  0266  0870               	movf	??_TMR0_CallBack,w
  3645  0267  00C8               	movwf	_EusartRxLenth
  3646                           
  3647                           ;tmr0.c: 163: preEusartRxCount = 0;
  3648  0268  01C4               	clrf	TMR0_CallBack@preEusartRxCount
  3649                           
  3650                           ;tmr0.c: 164: eusartRxCount = 0;
  3651  0269  01F8               	clrf	_eusartRxCount
  3652                           
  3653                           ;tmr0.c: 165: eusartRxOvertimeMask = 1;
  3654  026A  01C7               	clrf	_eusartRxOvertimeMask
  3655  026B  0AC7               	incf	_eusartRxOvertimeMask,f
  3656  026C                     i1l1269:	
  3657                           
  3658                           ;tmr0.c: 166: }
  3659                           ;tmr0.c: 167: }
  3660                           ;tmr0.c: 168: }
  3661                           ;tmr0.c: 170: if(TMR0_InterruptHandler)
  3662  026C  085F               	movf	_TMR0_InterruptHandler,w
  3663  026D  0460               	iorwf	_TMR0_InterruptHandler+1,w
  3664  026E  1903               	btfsc	3,2
  3665  026F  0008               	return
  3666                           
  3667                           ;tmr0.c: 171: {
  3668                           ;tmr0.c: 172: TMR0_InterruptHandler();
  3669  0270  0860               	movf	_TMR0_InterruptHandler+1,w
  3670  0271  008A               	movwf	10
  3671  0272  085F               	movf	_TMR0_InterruptHandler,w
  3672  0273  000A               	callw
  3673  0274  3182               	pagesel	$
  3674  0275  0008               	return
  3675  0276                     __end_of_TMR0_CallBack:	
  3676                           
  3677                           	psect	text20
  3678  03B6                     __ptext20:	
  3679 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  3680 ;; Defined at:
  3681 ;;		line 180 in file "mcc_generated_files/tmr0.c"
  3682 ;; Parameters:    Size  Location     Type
  3683 ;;		None
  3684 ;; Auto vars:     Size  Location     Type
  3685 ;;		None
  3686 ;; Return value:  Size  Location     Type
  3687 ;;                  1    wreg      void 
  3688 ;; Registers used:
  3689 ;;		None
  3690 ;; Tracked objects:
  3691 ;;		On entry : 0/0
  3692 ;;		On exit  : 0/0
  3693 ;;		Unchanged: 0/0
  3694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3695 ;;      Params:         0       0       0       0
  3696 ;;      Locals:         0       0       0       0
  3697 ;;      Temps:          0       0       0       0
  3698 ;;      Totals:         0       0       0       0
  3699 ;;Total ram usage:        0 bytes
  3700 ;; Hardware stack levels used:    1
  3701 ;; This function calls:
  3702 ;;		Nothing
  3703 ;; This function is called by:
  3704 ;;		_TMR0_Initialize
  3705 ;;		_TMR0_CallBack
  3706 ;; This function uses a non-reentrant model
  3707 ;;
  3708                           
  3709                           
  3710                           ;psect for function _TMR0_DefaultInterruptHandler
  3711  03B6                     _TMR0_DefaultInterruptHandler:	
  3712                           
  3713                           ;incstack = 0
  3714                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  3715  03B6  0008               	return
  3716  03B7                     __end_of_TMR0_DefaultInterruptHandler:	
  3717                           
  3718                           	psect	text21
  3719  034A                     __ptext21:	
  3720 ;; *************** function _EUSART_Receive_ISR *****************
  3721 ;; Defined at:
  3722 ;;		line 199 in file "mcc_generated_files/eusart.c"
  3723 ;; Parameters:    Size  Location     Type
  3724 ;;		None
  3725 ;; Auto vars:     Size  Location     Type
  3726 ;;		None
  3727 ;; Return value:  Size  Location     Type
  3728 ;;                  1    wreg      void 
  3729 ;; Registers used:
  3730 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3731 ;; Tracked objects:
  3732 ;;		On entry : 0/0
  3733 ;;		On exit  : 0/0
  3734 ;;		Unchanged: 0/0
  3735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3736 ;;      Params:         0       0       0       0
  3737 ;;      Locals:         0       0       0       0
  3738 ;;      Temps:          1       0       0       0
  3739 ;;      Totals:         1       0       0       0
  3740 ;;Total ram usage:        1 bytes
  3741 ;; Hardware stack levels used:    1
  3742 ;; This function calls:
  3743 ;;		Nothing
  3744 ;; This function is called by:
  3745 ;;		_EUSART_Initialize
  3746 ;;		_INTERRUPT_InterruptManager
  3747 ;; This function uses a non-reentrant model
  3748 ;;
  3749                           
  3750                           
  3751                           ;psect for function _EUSART_Receive_ISR
  3752  034A                     _EUSART_Receive_ISR:	
  3753                           
  3754                           ;eusart.c: 201: if(1 == RCSTAbits.OERR)
  3755                           
  3756                           ;incstack = 0
  3757                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  3758  034A  0023               	movlb	3	; select bank3
  3759  034B  1C9D               	btfss	29,1	;volatile
  3760  034C  2B4F               	goto	i1l1311
  3761                           
  3762                           ;eusart.c: 202: {
  3763                           ;eusart.c: 205: RCSTAbits.CREN = 0;
  3764  034D  121D               	bcf	29,4	;volatile
  3765                           
  3766                           ;eusart.c: 206: RCSTAbits.CREN = 1;
  3767  034E  161D               	bsf	29,4	;volatile
  3768  034F                     i1l1311:	
  3769                           
  3770                           ;eusart.c: 207: }
  3771                           ;eusart.c: 216: eusartRxBuffer[eusartRxCount++] = RCREG;
  3772  034F  0819               	movf	25,w	;volatile
  3773  0350  00F0               	movwf	??_EUSART_Receive_ISR
  3774  0351  0878               	movf	_eusartRxCount,w
  3775  0352  3E20               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  3776  0353  0086               	movwf	6
  3777  0354  3001               	movlw	1	; select bank2/3
  3778  0355  0087               	movwf	7
  3779  0356  0870               	movf	??_EUSART_Receive_ISR,w
  3780  0357  0081               	movwf	1
  3781  0358  3001               	movlw	1
  3782  0359  00F0               	movwf	??_EUSART_Receive_ISR
  3783  035A  0870               	movf	??_EUSART_Receive_ISR,w
  3784  035B  07F8               	addwf	_eusartRxCount,f
  3785  035C  0008               	return
  3786  035D                     __end_of_EUSART_Receive_ISR:	
  3787  007E                     btemp	set	126	;btemp
  3788  007E                     int$flags	set	126
  3789  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        9
    BSS         184
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80     13      68
    BANK1            80      0      64
    BANK2            80      0      75

Pointer List with Targets:

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), Absolute function(), 


Critical Paths under _main in COMMON

    _main->_EUSART_Deal
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Deal->_stopTimeCtrl
    _EUSART_Deal->_testTimeCtrl
    _EUSART_Deal->_workTimeCtrl
    _startTimeCtrl->_getTimeData
    _startTimeCtrl->_stopTimeCtrl

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART_Receive_ISR
    _TMR0_ISR->_TMR0_CallBack

Critical Paths under _main in BANK0

    _startTimeCtrl->_getTimeData

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1554
                        _EUSART_Deal
                  _SYSTEM_Initialize
                       _stopTimeCtrl
                    _tempCtrlProcess
 ---------------------------------------------------------------------------------
 (1) _tempCtrlProcess                                      3     3      0     486
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     150
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0      75
                                              4 COMMON     1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2      75
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0      75
       _EUSART_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      75
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _EUSART_Deal                                          2     2      0     784
                                              5 COMMON     2     2      0
                    _Get_Device_Addr
                      _startTimeCtrl
                       _stopTimeCtrl
                       _testTimeCtrl
                       _workTimeCtrl
 ---------------------------------------------------------------------------------
 (2) _workTimeCtrl                                         3     3      0     134
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _testTimeCtrl                                         3     3      0      88
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _startTimeCtrl                                        0     0      0     404
                        _getTimeData
                       _stopTimeCtrl
 ---------------------------------------------------------------------------------
 (1) _stopTimeCtrl                                         3     3      0     134
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _getTimeData                                         16    16      0     270
                                              2 COMMON     3     3      0
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (2) _Get_Device_Addr                                      2     2      0      24
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           1     1      0       0
                                              1 COMMON     1     1      0
                   Absolute function *
                 _EUSART_Receive_ISR *
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR0_ISR                                             0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (6) _TMR0_CallBack                                        1     1      0       0
                                              0 COMMON     1     1      0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Deal
     _Get_Device_Addr
     _startTimeCtrl
       _getTimeData
       _stopTimeCtrl
     _stopTimeCtrl
     _testTimeCtrl
     _workTimeCtrl
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetRxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _WDT_Initialize
   _stopTimeCtrl
   _tempCtrlProcess

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
   _TMR0_ISR *
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      DA       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      D      44       6       85.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      40       8       80.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      4B      10       93.8%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      DA      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Nov 05 15:34:04 2018

               ?_EUSART_SetRxInterruptHandler 0072                              ?_tempCtrlProcess 0070  
                                 __CFG_CP$OFF 0000                          _timeCtrlEnableSignal 0077  
                             _timer0ReloadVal 0063                                   __CFG_LVP$ON 0000  
                                         l344 0215                                           l291 00DA  
                                __CFG_CPD$OFF 0000                                           u605 0162  
                                         u615 017E                                           u554 02C8  
                                         u714 028F                                           u555 02C7  
                                         u715 028E                                           u724 029E  
                                         u725 029D                                           u744 02F5  
                                         u745 02F4                                           u905 0080  
                                         u595 0146                                           u915 0095  
                                         u925 00AA                                           u954 00F3  
                                         u955 00F2                                           u974 0106  
                                         u975 0105                                           u895 006C  
                                __CFG_BORV$LO 0000                                           wreg 0009  
                                __CFG_IESO$ON 0000                                  ?_EUSART_Deal 0070  
                                        l1161 0139                                          l1331 01CF  
                                        l1411 01F5                                          l1341 01E6  
                                        l1327 01C6                                          l1169 019A  
                                        l1281 0297                                          l1337 01DE  
                                        l1361 00A7                                          l1355 0069  
                                        l1427 021D                                          l1419 0209  
                                        l1373 00FB                                          l1357 007D  
                                        l1365 00BC                                          l1437 022F  
                                        l1359 0092                                          l1367 00CE  
                                        l1377 010E                                          l1385 0129  
                                        _LATA 010C                                          _LATB 010D  
                                        _LATC 010E                                          i1l97 0022  
                                        i1l89 0010                                          _TMR0 0015  
                                        _WPUA 020C                                          _WPUB 020D  
                                        _WPUC 020E                                  __CFG_WRT$OFF 0000  
                               __CFG_FCMEN$ON 0000                         __size_of_stopTimeCtrl 002D  
                                        _main 01F0                                          fsr0h 0005  
                                        fsr1h 0007                                          indf0 0000  
                                        fsr0l 0004                                          indf1 0001  
                                        fsr1l 0006                                          btemp 007E  
                               __CFG_BOREN$ON 0000                                          start 0027  
                               __CFG_MCLRE$ON 0000                                 _startTimeCtrl 0383  
                     __end_of_TMR0_Initialize 034A                                 __CFG_PLLEN$ON 0000  
              ??_TMR0_DefaultInterruptHandler 0070                    Get_Device_Addr@device_addr 0073  
              __size_of_OSCILLATOR_Initialize 0007                 __end_of_OSCILLATOR_Initialize 0392  
                                       ?_main 0070                                 __CFG_WDTE$OFF 0000  
                                       _RCREG 0199                                         _RCSTA 019D  
                                       _TRISA 008C                                         _TRISB 008D  
                                       _TRISC 008E                                         _TXSTA 019E  
           __size_of_TMR0_SetInterruptHandler 0006                     ?_TMR0_SetInterruptHandler 0072  
                                _stopTimeCtrl 02A7                              __end_of_TMR0_ISR 0399  
                       __size_of_workTimeCtrl 002C                                _WDT_Initialize 03B1  
                                       pclath 000A                                         status 0003  
                                       wtemp0 007E                             ??_Get_Device_Addr 0072  
                             __initialization 0029                                ?_startTimeCtrl 0070  
                                __end_of_main 023E                   ?_INTERRUPT_InterruptManager 0070  
              ??_EUSART_SetRxInterruptHandler 0074                                        ??_main 0077  
                                _workTimeCtrl 02D4                        __end_of_WDT_Initialize 03B5  
                                      _ANSELA 018C                                        _ANSELB 018D  
                                      _ANSELC 018E                          __size_of_getTimeData 0072  
                                      _BORCON 0116                                        i1l1311 034F  
                                      i1l1255 0258                                        i1l1249 024D  
                                      i1l1269 026C                              tempCtrlProcess@i 0074  
                                      _OSCCON 0099                                        _IQRSta 0038  
                                      _SPBRGH 019C                                        _SPBRGL 019B  
                                      _WDTCON 0097                                 _EusartRxLenth 0048  
                              __CFG_PWRTE$OFF 0000                                __CFG_STVREN$ON 0000  
                            ?_TMR0_Initialize 0070                          _eusartRxOvertimeMask 0047  
                                __pdataCOMMON 007A                               ?_WDT_Initialize 0070  
                       __end_of_TMR0_CallBack 0276      TMR0_SetInterruptHandler@InterruptHandler 0072  
                        __size_of_EUSART_Deal 0050                             _SYSTEM_Initialize 035D  
                     __end_of__initialization 0053                            ?_SYSTEM_Initialize 0070  
                             ??_startTimeCtrl 0075                                __pcstackCOMMON 0070  
                                __pidataBANK0 037B                           ??_SYSTEM_Initialize 0075  
                                   ?_TMR0_ISR 0070                                _OPTION_REGbits 0095  
                   __end_of_SYSTEM_Initialize 036C                                    __pbssBANK0 0020  
                                  __pbssBANK1 00A0                                    __pbssBANK2 0120  
                 __size_of_EUSART_Receive_ISR 0013                                    __pmaintext 01F0  
            _EUSART_TxDefaultInterruptHandler 0040              __end_of_TMR0_SetInterruptHandler 03AB  
                                  ??_TMR0_ISR 0071                                    __pintentry 0004  
                                     _BAUDCON 019F                                       _APFCON0 011D  
                                     _APFCON1 011E                                 _eusartRxCount 0078  
                    __size_of_tempCtrlProcess 00D7                                       _OSCTUNE 0098  
                             _Get_Device_Addr 036C                 TMR0_CallBack@preEusartRxCount 0044  
                TMR0_CallBack@testTimeCtrlCnt 0043                                       __ptext1 0057  
                                     __ptext2 035D                                       __ptext3 03B1  
                                     __ptext4 0335                                       __ptext5 03A5  
                                     __ptext6 0300                                       __ptext7 038B  
                                     __ptext8 031C                                       __ptext9 03AB  
                       _OSCILLATOR_Initialize 038B                      ??_PIN_MANAGER_Initialize 0072  
                  __size_of_SYSTEM_Initialize 000F                                       clrloop0 03A0  
                        end_of_initialization 0053                                       init_ram 0399  
                                     initloop 039A                             _EUSART_Initialize 031C  
                               ?_testTimeCtrl 0070                                    _testIQRSta 0030  
                          ?_EUSART_Initialize 0070                                     _IQRPreSta 0057  
                                   _RCSTAbits 019D                           ??_EUSART_Initialize 0074  
                            ??_WDT_Initialize 0072                      _TMR0_SetInterruptHandler 03A5  
                                   _PORTAbits 000C                                     _PORTBbits 000D  
                     __end_of_Get_Device_Addr 037B                              __CFG_FOSC$INTOSC 0000  
                               ??_getTimeData 004A                             ??_tempCtrlProcess 0072  
                   __end_of_EUSART_Initialize 0335                                ??_testTimeCtrl 0072  
                               __pidataCOMMON 03B5                             __size_of_TMR0_ISR 0007  
                      ?_OSCILLATOR_Initialize 0070                           start_initialization 0029  
                    __size_of_TMR0_Initialize 0015               __size_of_PIN_MANAGER_Initialize 001C  
                               ??_EUSART_Deal 0075                                _readSignalflag 0042  
EUSART_SetRxInterruptHandler@interruptHandler 0072              TMR0_CallBack@eusartRXOvertimeCnt 0046  
                         __end_of_getTimeData 01A0                       TMR0_CallBack@timeCrlCnt 0045  
                       __end_of_startTimeCtrl 038B                        __size_of_TMR0_CallBack 0038  
                                 __pdataBANK0 0057                        tempCtrlProcess@timeCnt 0020  
                        _timeCtrlOvertimeMask 0049                              ?_Get_Device_Addr 0070  
                                 __pbssCOMMON 0077                                     ___latbits 0001  
                               ?_stopTimeCtrl 0070                                 __pcstackBANK0 004A  
                  __end_of_EUSART_Receive_ISR 035D                    __size_of_EUSART_Initialize 0019  
                         __end_of_EUSART_Deal 01F0              _EUSART_RxDefaultInterruptHandler 0061  
                       _TMR0_InterruptHandler 005F                                     __pnvBANK0 005F  
                      _PIN_MANAGER_Initialize 0300                                 stopTimeCtrl@i 0074  
                ??_INTERRUPT_InterruptManager 0071                                 ?_workTimeCtrl 0070  
                          testTimeCtrl@IQRNum 0074                                ??_stopTimeCtrl 0072  
                        __end_of_testTimeCtrl 02A7                                   _getTimeData 012E  
                           _timeCtrlStartFlag 0079                                 _TMR0_CallBack 023E  
                              _eusartRxBuffer 0120                             ??_TMR0_Initialize 0074  
                                    _LATAbits 010C                                     clear_ram0 039F  
                                    _PIE1bits 0091                                 _timeCtrlValue 00A0  
         __size_of_INTERRUPT_InterruptManager 0023                    ??_TMR0_SetInterruptHandler 0074  
                                    _PIR1bits 0011                                      _TMR0_ISR 0392  
                              ??_workTimeCtrl 0072                               _tempCtrlProcess 0057  
                              getTimeData@cnt 0072                                ?_TMR0_CallBack 0070  
                                 _EUSART_Deal 01A0                       ??_OSCILLATOR_Initialize 0072  
                                    __ptext10 01A0                                      __ptext11 02D4  
                                    __ptext20 03B6                                      __ptext12 0276  
                                    __ptext21 034A                                      __ptext13 0383  
                                    __ptext14 02A7                                      __ptext15 012E  
                                    __ptext16 036C                                      __ptext18 0392  
                                    __ptext19 023E                                 __size_of_main 004E  
        __end_of_TMR0_DefaultInterruptHandler 03B7         __size_of_TMR0_DefaultInterruptHandler 0001  
                _TMR0_DefaultInterruptHandler 03B6                          __end_of_stopTimeCtrl 02D4  
                                _timeCtrlMode 007A                       __end_of_tempCtrlProcess 012E  
                                    int$flags 007E            __end_of_INTERRUPT_InterruptManager 0027  
                  _INTERRUPT_InterruptManager 0004                         __size_of_testTimeCtrl 0031  
                               workTimeCtrl@i 0074                                    _INTCONbits 000B  
                             ??_TMR0_CallBack 0070                       __size_of_WDT_Initialize 0004  
                                    intlevel1 0000                          __end_of_workTimeCtrl 0300  
                     ?_PIN_MANAGER_Initialize 0070                             __CFG_CLKOUTEN$OFF 0000  
        __end_of_EUSART_SetRxInterruptHandler 03B1         __size_of_EUSART_SetRxInterruptHandler 0006  
                _EUSART_SetRxInterruptHandler 03AB                                  _testTimeCtrl 0276  
               ?_TMR0_DefaultInterruptHandler 0070                                  getTimeData@i 0073  
                                getTimeData@j 0074                            _EUSART_Receive_ISR 034A  
                                  _OPTION_REG 0095                           ?_EUSART_Receive_ISR 0070  
                             _TMR0_Initialize 0335                                  ?_getTimeData 0070  
                      __size_of_startTimeCtrl 0008                      __size_of_Get_Device_Addr 000F  
              __end_of_PIN_MANAGER_Initialize 031C                          ??_EUSART_Receive_ISR 0070  
